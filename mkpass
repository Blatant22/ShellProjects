#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/mkpass
# Started On        - Fri 20 Oct 12:14:09 BST 2017
# Last Change       - Sun 29 Oct 23:40:17 GMT 2017
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

# Originally a ShellPlugin, called with shellpass, but has since been improved.
#
# This is a work in progress. More features to be added. Currently just basic
# functionality, which is in itself very useful.

#------------------------------------------------------------------------------MAIN

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		echo "$REPLY"
	done <<-EOF
		            MKPASS (29th October 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            Pure Bourne Again Shell approach to complex password generation.

		SYNTAX:     mkpass [OPTS] INT
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --type|-t TYPE          - Where T is the type. See below.

		NOTE:       This small program uses /dev/urandom to generate a wide range of
		            characters, just as you would expect from genpass, but fuller and
		            with extra features and choices for the user.

		            Where INT is the number (integer) of characters to generate.

		TYPES:      Available TYPEs for the --type or -t flags are as follows:

		            +------------+----------------------+
		            | VALID TYPE | WHAT IT INCLUDES     |
		            +------------+----------------------+
		            | alnum      | Letters and digits.  |
		            | digit      | All digits.          |
		            | alpha      | All letters.         |
		            | punct      | Various punctuation. |
		            | alphapunct | All of the above.    |
		            +-----------------------------------+
	EOF
}

#TODO - Any others which could be added?
while [ -n "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		*)
			break ;;
	esac

	shift
done

INT="$1"

[ $# -eq 1 ] || XERR "$LINENO" "Incorrect argument(s) specified."
[ -e /dev/urandom ] || XERR "$LINENO" "Unable to access /dev/urandom device."
[ -z "$INT" ] && XERR "$LINENO" "Missing INT -- how many characters do you want?"

{ [[ "$*" =~ [0-9]+ ]] && [ "$INT" -ge 1 ]; } || {
	XERR "$LINENO" "Requires an integer greater than or equal to 1."
}

#TODO - Add logic to switch between different CHARS variables.
CHARS='[\`/\+\\\|0-9A-Za-z\_\,\.\?\!\"\\\/\$\%\^\&\*\(\)\{\}\]\[-\>\<\:\@\~]'

declare -i A=0
while read -a X; do
	[[ "${X:0:1}" == $CHARS ]] && {
		A+=1; Z+="${X:0:1}"
		[ $A -eq $INT ] && break
	}
done < /dev/urandom

printf "%s\n" "$Z"
