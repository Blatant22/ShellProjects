#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/mkpass
# Started On        - Fri 20 Oct 12:14:09 BST 2017
# Last Change       - Tue 23 Jan 22:19:50 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Originally a ShellPlugin, called with shellpass, but has since been improved.
#------------------------------------------------------------------------------MAIN

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            MKPASS (23rd January 2018)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Pure Bourne Again Shell approach to complex password generation.

		SYNTAX:     mkpass [OPTS] INT

		OPTS:       --help|-h|-?            - Displays this help information.
		            --type|-t TYPE          - Where T is the type. See below.

		NOTE:       This small program uses /dev/urandom to generate a wide range of
		            characters, just as you would expect from genpass, but fuller and
		            with extra features and choices for the user.

		            Where INT is the number (integer) of characters to generate.

		TYPES:      Available TYPEs:

		            +------------+----------------------+------------------+
		            | VALID TYPE | WHAT IT INCLUDES     | REGEX FORM       |
		            +------------+----------------------+------------------+
		            | punct      | Punctuation          | [[:punct:]]      |
		            | digit      | Digits               | [[:digit:]]      |
		            | alpha      | Letters              | [[:alpha:]]      |
		            | alnum      | Letters and Digits   | [[:alnum:]]      |
		            | alphapunct | All of the above.    | [[:alphapunct:]] |
		            +-----------------------------------+------------------+
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--type|-t)
			shift; TYPE="$1" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac

	shift
done

[[ "$1" =~ [0-9]+ ]] && INT=$1
[ -z "$INT" ] && XERR "$LINENO" "Invalid or missing INT."

[ -e /dev/urandom ] || XERR "$LINENO" "Unable to access /dev/urandom device."

if ! [[ "$*" =~ [0-9]+ ]] && [ "$INT" -ge 1 ]; then
	XERR "$LINENO" "Requires an integer greater than or equal to 1."
fi

case "${TYPE:-EMPTY}" in
	punct)
		CHARS='[\`/\+\\\|\_\,\.\?\!\"\\\/\$\%\^\&\*\(\)\{\}\]\[-\>\<\:\@\~]' ;;
	digit)
		CHARS='[0-9]' ;;
	alpha)
		CHARS='[A-Za-z]' ;;
	alnum)
		CHARS='[0-9A-Za-z]' ;;
	alphapunct|EMPTY)
		CHARS='[\`/\+\\\|0-9A-Za-z\_\,\.\?\!\"\\\/\$\%\^\&\*\(\)\{\}\]\[-\>\<\:\@\~]' ;;
	*)
		XERR "$LINENO" "Invalid TYPE selected." ;;
esac

declare -i A=0
while read -a X; do
	if [[ "${X:0:1}" == $CHARS ]]; then
		A+=1
		printf "%s" "${X:0:1}"
		[ $A -eq $INT ] && break
	fi
done < /dev/urandom

echo
