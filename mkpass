#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/mkpass
# Started On        - Fri 20 Oct 12:14:09 BST 2017
# Last Change       - Sat 21 Oct 01:01:46 BST 2017
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

# Originally a ShellPlugin, called with shellpass, but has since been improved.
#
# This is a work in progress. More features to be added. Currently just basic
# functionality, which is in itself very useful.

#------------------------------------------------------------------------------MAIN

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		echo "$REPLY"
	done <<-EOF
		            MKPASS (21st October 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            Pure Bourne Again Shell approach to complex password generation.

		SYNTAX:     mkpass [OPTS] INT
		
		OPTS:       --help|-h|-?            - Displays this help information.

		NOTE:       This small program uses /dev/urandom to generate a wide range of
		            characters, just as you would expect from genpass, but fuller and
		            with extra features and choices for the user.

		            Where INT is the number (integer) of characters to generate.
	EOF
}

while [ -n "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
	esac

	shift
done

[ -e /dev/urandom ] || XERR "$LINENO" "Unable to access /dev/urandom device."
[ $# -eq 1 ] || XERR "$LINENO" "Only one argument is required."

{ [[ "$*" =~ [0-9]+ ]] && [ "$*" -ge 1 ]; } || {
	XERR "$LINENO" "Requires an integer greater than or equal to 1."
}

declare -i A=0
while read -a X; do
	[[ "${X:0:1}" == [\`/\+\\\|0-9A-Za-z\_\,\.\?\!\"\\\/\$\%\^\&\*\(\)\{\}\]\[-\>\<\:\@\~] ]] && {
		A+=1; printf "%s" "${X:0:1}"; [ $A -eq $* ] && break
	}
done < /dev/urandom
