#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/backmeup
# Started On        - Tue  7 Nov 21:50:05 GMT 2017
# Last Change       - Sun 27 Oct 16:06:39 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-10-27"
_PROJECT_="${0##*/}"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

DOM="https://github.com"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            A simple tool to quickly and easily back up your HOME.

		SYNTAX:     $_PROJECT_ [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --update|-U             - Check for updates to $_PROJECT_.
		            --debug|-D              - Enables the built-in bash debugging.
		            --reset|-R              - Re-run the initial setting prompts.
		            --notify|-N             - Notify after completion, via notify-send.

		EXAMPLE:    $_PROJECT_ --notify -Q

		FILE:       User settings saved in and read from: \$HOME/.$_PROJECT_/settings

		NOTE:       When entering your settings, ensure that no variables are used.

		SITE:       $DOM/terminalforlife/Extra
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--update|-U)
			UPDATE="true" ;;
		--debug|-D)
			DEBUGME="true" ;;
		--reset|-R)
			RESET="true" ;;
		--notify|-N)
			NOTIFY="true" ;;
		*)
			FAIL 1 "$LINENO" "Incorrect argument(s) specified." ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in gzip tar sync mkdir; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		FAIL 0 "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

[ "$BEQUIET" == "true" ] && exec > /dev/null
[ "$DEBUGME" == "true" ] && set -xeu


if [ "$UPDATE" == "true" ]; then
	if ! type -fP wget > /dev/null 2>&1; then
		FAIL 1 "$LINENO" "Dependency 'wget' not met."
	fi

	VERSION_URL="$DOM/terminalforlife/Extra/raw/master/versions"
	while IFS='=' read -a LINE; do
		if  [ "${LINE[0]}" == "$_PROJECT_" ]; then
			LATEST="${LINE[1]}"

			if [[ "${LATEST//-}" =~ ^[0-9]{8}$ ]]; then
				if [ ${LATEST//-} -gt ${_VERSION_//-} ]; then
					while read -r; do
						printf "%s\n" "$REPLY"
					done <<-EOF
						New version available:    $LATEST
						Current version:          $_VERSION_
					EOF
				fi
			else
				FAIL 1 "$LINENO" "Failed to check for available updates."
			fi
		fi
	done <<< "$(wget -q "$VERSION_URL" -O -)"

	exit 0
fi

MAIN_DIR="$HOME/.$_PROJECT_"
SETTINGS="$MAIN_DIR/settings"

[ -d "$MAIN_DIR" ] || mkdir "$MAIN_DIR"

if [ ! -f "$SETTINGS" -o "$RESET" == "true" ]; then
	read -ep "Directory for $_PROJECT_ archives: " STORE

	case $REPLY in
		*)
			if ! [ -d "$STORE" ]; then
				FAIL 1 "$LINENO" "Directory not found or inaccessible."
			fi ;;
		"")
			FAIL 1 "$LINENO" "You must enter a valid path." ;;
	esac

	printf -v DATETIME "%(%F_%H%M)T" "-1"

	{
		while read -r; do
			printf "%s\n" "$REPLY"
		done <<-EOF
			# User settings file for and parsed by $_PROJECT_.
			# Created:   $DATETIME
			# User:      $USER
			# UID:       $UID

			# The path to the target file system. (mountpoint)
			STORE="$STORE"

			# Exclude directories or files here.
			EXCLUDE="$HOME/.cache"
			EXCLUDE="$HOME/.thumbnails"
		EOF
	} > "$SETTINGS"

	printf "Settings saved - Please relaunch $_PROJECT_.\n"
	exit 0
elif ! [ -r "$SETTINGS" ]; then
	FAIL 1 "$LINENO" "File '$SETTINGS' inaccessible."
fi

declare -a EXCLUDE
declare -i LINE=0
while read -a X; do
	LINE+=1

	[ "${X[0]:0:1}" == "#" ] && continue
	IFS="=" read -ra Y <<< "${X[@]}"

	case ${Y[0]:-EMPTY} in
		STORE)
			printf "STORE: %s\n" "${Y[1]//\"}"
			STORE="${Y[1]//\"}" ;;
		EXCLUDE)
			printf "EXCLUDING: %s\n" "${Y[1]//\"}"
			EXCLUDE+=("--exclude=${Y[1]%/}") ;;
		EMPTY)
			;;
		*)
			FAIL 1 "$LINENO" "Invalid parameter '${Y[0]}' on line #$LINE." ;;
	esac
done < "$SETTINGS"

[ -d "$STORE" ] || FAIL 1 "$LINENO" "Target '$STORE' not found."

printf -v ARCHIVE "BMU_%(%F_%H%M)T" "-1"
declare -i SECONDS=0

tar --xattrs --ignore-failed-read `eval printf "%s\\\\\n" ${EXCLUDE[@]}`\
	--totals -cvpf "${STORE%/}/$ARCHIVE" "$HOME" || FAIL="true"

gzip -v --best --suffix ".tgz" "${STORE%/}/$ARCHIVE" || FAIL="true"
sync "${STORE%/}/$ARCHIVE.tgz" || FAIL="true"

if ! [ "$FAIL" == "true" ]; then
	printf "Backup successfully created in %d seconds.\n" "$SECONDS"
else
	FAIL 0 "$LINENO" "One or more errors detected during backup."
fi

if [ "$NOTIFY" == "true" ]; then
	if type -fP notify-send > /dev/null 2>&1; then
		notify-send "Your $_PROJECT_ execution is finished."
	else
		FAIL 1 "$LINENO" "Dependency 'notify-send' not met."
	fi
fi

