#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/backmeup
# Started On        - Tue  7 Nov 21:50:05 GMT 2017
# Last Change       - Sat 13 Jan 21:58:25 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# A small, personal-ish tool I use to quickly and easily back up my HOME from a
# terminal into a (compressed with gzip) tar archive.
#
# NOTE: I'm currently in the process of converting this tool to one aimed at a
#       general user, rather than more just myself. As it stands, this isn't
#       user-friendly or especially rich in features.
#----------------------------------------------------------------------------------

#TODO - Consider adding a notify-send feature for when it has completed.

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /bin/{gzip,tar,sync,mkdir}; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            BACKMEUP (26th December 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            A simple tool to quickly and easily back up your HOME.

		SYNTAX:     backmeup [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug|-D              - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --reset|-R              - Re-run the initial setting prompts.

		FILE:       User settings saved in and read from: \$HOME/.backmeup/settings

		NOTE:       When entering your settings, ensure that no variables are used.
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--reset|-R)
			RESET="true" ;;
		*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
	esac

	shift
done

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

MAIN_DIR="$HOME/.backmeup"
SETTINGS="$MAIN_DIR/settings"

[ -e /proc/mounts ] || XERR "$LINENO" "Unable to find file: /proc/mounts"
[ -d "$MAIN_DIR" ] || /bin/mkdir "$MAIN_DIR"

if [ ! -f "$SETTINGS" -o "$RESET" == "true" ]; then
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF

		Before you can continue, you must first enter some information, which will be saved
		in ~/.backmeup/settings; this is to ensure the correct operation of backmeup.

	EOF

	read -ep "What is the label of the partition to which your archives will be saved? " LABEL
	[ -z "$LABEL" ] && XERR "$LINENO" "Empty value provided for settings parameter: LABEL"

	#TODO - Make this accept variables, like $USER.
	read -ep "Now enter the mountpoint of the aforementioned partition: " STORE
	[ -z "$LABEL" ] && XERR "$LINENO" "Empty value provided for settings parameter: STORE"

	read -n 1 -ep "Will you proceed with the provided settings? " YN
	[[ "$YN" =~ [Nn] ]] && { printf "\nSettings creation cancelled - Quitting."; exit 2; }

	printf "\n"
	printf -v DATETIME "%(%F_%H%M)T" "-1"

	{
		while read -r; do
			printf "%s\n" "$REPLY"
		done <<-EOF
			# User settings file for and parsed by backmeup.
			# Created:   $DATETIME
			# User:      $USER
			# UID:       $UID

			LABEL="$LABEL"
			STORE="${STORE%/$LABEL}/$LABEL"

			EXCLUDE="${HOME/\/}/.cache"
			EXCLUDE="${HOME/\/}/.thumbnails"
		EOF
	} > "$SETTINGS"

	printf "Settings saved - Please relaunch backmeup.\n"
	exit 0
elif ! [ -r "$SETTINGS" ]; then
	XERR "$LINENO" "Unable to access: $SETTINGS"
fi

declare -i LINE=0
while read -a X; do
	LINE+=1

	[ "${X[0]:0:1}" == "#" ] && continue
	IFS="=" read -ra Y <<< "${X[@]}"

	case "${Y[0]:-EMPTY}" in
		LABEL)
			LABEL="${Y[1]//\"}" ;;
		STORE)
			STORE="${Y[1]//\"}" ;;
		EXCLUDE)
			EXCLUDE+=" --exclude=${Y[1]%/}" ;;
		EMPTY)
			;;
		*)
			XERR "$LINENO" "Invalid parameter '${Y[0]}' on line #$LINE." ;;
	esac
done < "$SETTINGS"

printf -v ARCHIVE "BMU_%(%F_%H%M)T" "-1"

#echo /bin/tar --xattrs $EXCLUDE -cvpf "${STORE%/}/$ARCHIVE" "$HOME"
#exit

declare -i SECONDS=0
while read -a X; do
	if [[ "${X[1]}" =~ "${LABEL// /040}" ]]; then
		#TODO - Why aren't exclusions working as they should?
		/bin/tar --xattrs $EXCLUDE -cvpf "${STORE%/}/$ARCHIVE" "$HOME"
		/bin/gzip -v --best --suffix ".tgz" "${STORE%/}/$ARCHIVE"
		/bin/sync "${STORE%/}/$ARCHIVE.tgz"

		printf "Backup created in %d seconds.\n" "$SECONDS"
		exit 0
	fi
done < /proc/mounts

XERR "$LINENO" "The backup target is not available."
