#!/usr/bin/env bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/nwchk (Network Check)
# Started On        - Thu 18 Apr 11:19:19 BST 2019
# Last Change       - Thu 18 Apr 15:23:14 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Written by inspiration of YouTube and Arch user, 'S3NTYN3L'.
#----------------------------------------------------------------------------------

_VERSION_="2019-04-18"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

SADDR="https://www.google.co.uk/"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            NWCHK ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Check, once or periodically, for network connectivity.

		SYNTAX:     nwchk [OPTS] IFACE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --debug|-D              - Enables the built-in bash debugging.
		            --logfile|-L PATH       - File to use instead of the default.
		            --log|-l                - Save a log of detected events.
		            --internet|-I           - Check also for Internet connectivity.
		            --once-only|-o          - Don't check periodically, only once.
		            --interval|-i S         - Seconds (S) between each check.
		            --ping-addr|-p IP       - Address to ping for connectivity checks.
		            --spider-addr|-S ADDR   - The address to crawl with a spider.
		            --bell|-b               - Sound off the X11 bell on alert.

		NOTE:       Where IFACE is the network interface to check.

		            The default ping address is 8.8.8.8, Google's public DNS.

		            The default log file used is:

		              \$HOME/.nwchk.log

		            The default interval, if none is specified, is 10 seconds.

		EXAMPLE:    nwchk --bell -p 1.1.1.1 -S 'https://duckduckgo.com/'

		SITE:       The default address for the wget spider:

		              $SADDR
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--debug|-D)
			DEBUGME="true" ;;
		--once-only|-o)
			ONCE="true" ;;
		--interval|-i)
			shift

			if ! [[ "$1" =~ ^[0-9]+$ ]] || [ $1 -lt 3 ]; then
				XERR "$LINENO" "Invalid interval provided."
			fi ;;
		--log|-l)
			LOG="true" ;;
		--logfile|-L)
			shift; LOGFILE="$1" ;;
		--internet|-I)
			INTERNET="true" ;;
		--ping-addr|-p)
			#TODO - Check address validity.
			#TODO - Check for this but no -I.
			shift; IP="$1" ;;
		--spider-addr|-S)
			#TODO - Check validity.
			shift; SPIDER="$1" ;;
		--*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

#TODO - Check for -S and/or -p but no -I.
#TODO - Check for -i and -o.

if ! [ "$LOG" == "true" ] && [ "$LOGFILE" ]; then
	XERR "$LINENO" "Logfile specified, but nwchk wasn't told to log."
fi

if ! [ "$*" ]; then
	XERR "$LINENO" "Missing user-specified network interface."
else
	if [ "${#@}" -gt 1 ]; then
		XERR "$LINENO" "Only one interface may be specified at one time."
	else
		IFACE="$1"
	fi
fi

declare -i DEPCOUNT=0
for DEP in dirname sleep ping notify-send; {
	if ! type -Pf "$DEP" 2>&1 > /dev/null; then
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

if type -Pf ip 2>&1 > /dev/null; then
	USEIP="true"
elif type -Pf ifconfig 2>&1 > /dev/null; then
	USEIF="true"
else
	XERR "$LINENO" "Unable to find applicable executable."
fi

if [ "$INTERNET" == "true" ] && ! type -Pf ping 2>&1 > /dev/null; then
	XERR "$LINENO" "Dependency 'ping' not met."
fi

echo $USEIP $USEIF

# Prefer ip, if both are found, as ifconfig is deprecated.
[ "$USEIP" == "true" -a "$USEIF" == "true" ] && unset USEIF

type -Pf systemctl 2>&1 > /dev/null && SYSD="true"

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -x

NOTIFY(){
	#TODO - Add exclamation or other type of alert icon.
	if ! notify-send --urgency=$1 "$2"; then
		LOGIT="Unable to send a notification."
		XERR "$LINENO" "Unable to send a notification -- quitting."
	fi

	if [ "$BELL" == "true" ]; then
		for I in {1..3}; { printf "\a"; sleep 1s; }
	fi
}

LOGIT(){
	# If logfile is or becomes invalid during loop, go with the default.
	[ "$LOGFILE" ] || LOGFILE="$HOME/.nwchk.log"

	if [ "$LOG" == "true" ]; then
		printf "%(%F_%X)T: %s\n" -1 "$1" >> "$LOGFILE"
	fi
}

#TODO - Handle clean and logged exit, good or bad.
EXIT(){
	LOGIT "NWCHK has exited."
	NOTIFY normal "No longer checking network connectivity."
}

trap 'EXIT' EXIT

LOGIT "Begun checking network connectivity."

declare -i ERRS=0
while :; do
	if [ "$SYSD" == "true" ]; then
		if ! systemctl status network-online.target 2>&1 > /dev/null; then
			LOGIT "SystemD detects that 'Network' is not online."
			ERRS+=1
		fi
	fi

	if [ "$INTERNET" == "true" ]; then
		if ! ping -q -c 1 ${IP:-8.8.8.8} 2>&1 > /dev/null; then
			LOGIT "Error(s) detected while pinging IP address."
			ERRS+=1
		fi

		if type -Pf wget 2>&1 > /dev/null; then
			if ! wget -q -T 3 --spider "$SADDR"; then
				LOGIT "Unable to confirm server () availability."
				ERRS+=1
			fi
		fi
	fi

	if [ $ERRS -gt 0 ]; then
		LOGIT "Sending notification to the current user."
		NOTIFY critical "Network connectivity error(s) detected."
	fi

	if ! [ "$ONCE" == "true" ]; then
		sleep ${INT:-10}s
	else
		break
	fi
done
