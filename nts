#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - nts (Note to Self)
# Started On        - Sun 10 Nov 23:54:20 GMT 2019
# Last Change       - Mon 11 Nov 02:10:49 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Work in progress...
#----------------------------------------------------------------------------------

_VERSION_="2019-11-11"
_PROJECT_="${0##*/}"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

DOM="https://github.com"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - Note to Self ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Dummy description for this template.

		SYNTAX:     $_PROJECT_ [OPTS] NOTE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --update|-U             - Check for updates to $_PROJECT_.
		            --debug|-D              - Enables the built-in bash debugging.
		            --make|-m NOTE          - Make note; saves for later reading.
		            --raw|-R                - Display notes as-is, without formatting.
		            --delete                - Irrevocably delete database file.

		SITE:       $DOM/terminalforlife/Extra
	EOF
}

SHOW="true"
FANCY="true"
SHOWALL="true"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--update|-U)
			UPDATE="true" ;;
		--debug|-D)
			DEBUGME="true" ;;
		--make|-m)
			shift; NOTE="$1"

			if [ -z "$NOTE" ]; then
				FAIL 1 "$LINENO" "Text missing while making note."
			fi ;;
		--raw|-R)
			FANCY="false" ;;
		--delete|-D)
			DELETE="true" ;;
		*)
			FAIL 1 "$LINENO" "Incorrect argument(s) specified." ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in rm mkdir fold tput; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		FAIL 0 "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

if [ "$UPDATE" == "true" ]; then
	if ! type -fP wget > /dev/null 2>&1; then
		FAIL 1 "$LINENO" "Dependency 'wget' not met."
	fi

	VERSION_URL="$DOM/terminalforlife/Extra/raw/master/versions"
	while IFS='=' read -a LINE; do
		if  [ "${LINE[0]}" == "$_PROJECT_" ]; then
			LATEST="${LINE[1]}"

			if [[ "${LATEST//-}" =~ ^[0-9]{8}$ ]]; then
				if [ ${LATEST//-} -gt ${_VERSION_//-} ]; then
					while read -r; do
						printf "%s\n" "$REPLY"
					done <<-EOF
						New version available:    $LATEST
						Current version:          $_VERSION_
					EOF
				fi
			else
				FAIL 1 "$LINENO" "Failed to check for available updates."
			fi
		fi
	done <<< "$(wget -q "$VERSION_URL" -O -)"

	exit 0
fi

[ "$DEBUGME" == "true" ] && set -x

MAIN_DIR="$HOME/.config/nts"
DB="$MAIN_DIR/db"

if ! [ -d "$MAIN_DIR" ]; then
	mkdir -p "$MAIN_DIR" || FAIL 1 "$LINENO" "Unable to make 'nts' directory."
fi

GENDB(){
	printf -v DATE "%(%X %F)T"
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		# Generated NTS (Note to Self) database.
		# DATE:    $DATE
		# USER:    $USER (UID: $UID)
		# HOST:    $HOSTNAME
	EOF
}

if [ "$DELETE" == "true" ]; then
	rm -v "$DB" || FAIL 1 "$LINENO" "Unable to delete the database."
	exit 0
else
	if ! [ -f "$DB" ]; then
		GENDB > "$DB" || FAIL 1 "$LINENO" "Unable to generate a database."
	else
		[ -r "$DB" ] || FAIL 1 "$LINENO" "Unable to read the database."
	fi
fi

# Arguments apply to formatting of the output.
PARSEDB(){
	# Expected format: DATE~UID[USER]~HOSTNAME~NOTE
	while IFS='~' read -ra LINE; do
		if ! [[ "${LINE[0]}" == \#* ]] && [ -n "${LINE[*]}" ]; then
			if [ "$SHOWALL" == "true" ]; then
				if [ "$FANCY" == "true" ]; then
					printf "DATE:   %s\nUSER:   %s\nHOST:   %s\n\n%s\n\n"\
						"${LINE[0]}" "${LINE[1]}" "${LINE[2]}" "${LINE[3]}"\
						| fold -sw "${COLUMNS:-`tput cols`}"
				else
					printf "%s~%s~%s~%s\n" "${LINE[0]}" "${LINE[1]}"\
						"${LINE[2]}" "${LINE[3]}"
				fi
			fi
		fi
	done < "$DB"
}

if [ -n "$NOTE" ]; then
	HOSTNAME="${HOSTNAME//~/?}" # <-- Sanitize, just in-case.
	NOTE="${NOTE/$'\n'/\\n}" # <-- Sanitize, in-case the user enters a new line.
	printf "%(%F_%X)T~%s~%s~%s\n" -1 "${UID:-N/A}[${USER:-N/A}]"\
		"${HOSTNAME:-N/A}" "${NOTE:-N/A}" >> "$DB"
	exit 0
fi

PARSEDB
