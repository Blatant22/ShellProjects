#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - kernelchk
# Started On        - Sat 16 Sep 20:40:17 BST 2017
# Last Change       - Sun  5 May 14:20:18 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Now deprecated in favor of its Perl rewrite.
#----------------------------------------------------------------------------------

_VERSION_="2019-05-05"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            KERNELCHK ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Small tool to check for a change in kernel version. Ideal for scripts.

		SYNTAX:     kernelchk [OPT]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Output only error messages.
		            --set|-s                - Set kernelchk to the current kernel.
		            --sound|-S PATH         - Provide a notification sound file.
		            --clear|-c              - Clear the saved kernel version.
		            --espeak|-E             - Use espeak; only if available.
		            --notify-send|-N        - Use notify-send; only if available.
		            --bell|-b               - Sound the system's bell upon kernel change.

		EXAMPLE:    kernelchk -q -E --notify-send --bell
		            kernelchk --sound /usr/share/sounds/Oxygen-Sys-Special.ogg
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--set|-s)
			ARG_SET="true" ;;
		--quiet|-q)
			QUIET_MODE="true" ;;
		--sound|-S)
			shift

			if ! [ "$1" ]; then
				XERR "$LINENO" "No sound file specified."
			else
				ERR_SOUND="$1"
			fi ;;
		--clear|-c)
			ARG_CLEAR="true" ;;
		--espeak|-E)
			ESPEAK="true" ;;
		--notify-send|-N)
			NOTIFY_SEND="true" ;;
		--bell|-b)
			DOBELL="true" ;;
		*)
			XERR "$LINENO" "Incorrect argument(s)." ;;
	esac

	shift
done

[ -x /bin/rm ] || XERR "$LINENO" "Dependency '/bin/rm' not met."

read -a BUFFER < /proc/version
printf -v KERNEL "%s" "${BUFFER[2]}"
KERNEL_FILE="$HOME/.kernelchk"

if [ "$ARG_CLEAR" == "true" -a "$ARG_SET" == "true" ]; then
	XERR "$LINENO" "Only one of --clear|-c or --set|-s function at a time."
fi

if [ "$ARG_SET" == "true" ]; then
	printf "%s\n" "$KERNEL" > "$KERNEL_FILE"
elif [ "$ARG_CLEAR" == "true" ]; then
	/bin/rm "$KERNEL_FILE" >&-
fi

if [ "$ESPEAK" == "true" -a ! -x /usr/bin/espeak ]; then
	XERR "$LINENO" "Dependency '/usr/bin/espeak' not met."
elif [ "$NOTIFY_SEND" -a ! -x /usr/bin/notify-send ]; then
	XERR "$LINENO" "Dependency '/usr/bin/notify-send' not met."
fi

[ -f "$KERNEL_FILE" -a -r "$KERNEL_FILE" ] && SAVED_KERNEL=`< "$KERNEL_FILE"`

if ! [ "$QUIET_MODE" == "true" ]; then
	printf "%-s%30s\n" "CURRENT:" "${KERNEL:-Unknown}"
	printf "%-s%32s\n" "SAVED:"   "${SAVED_KERNEL:-N/A}"
fi

if [ -n "$SAVED_KERNEL" -a ! "$KERNEL" == "$SAVED_KERNEL" ]; then
	if [ -n "$ERR_SOUND" ] && [ -f "$ERR_SOUND" ]; then
		if [ -x /usr/bin/paplay ]; then
			/usr/bin/paplay "$ERR_SOUND" & disown
		elif [ -x /usr/bin/aplay ]; then
			/usr/bin/aplay "$ERR_SOUND" & disown
		else
			ERR "$LINENO" "Unable to play sound file."
		fi
	fi

	[ "$DOBELL" == "true" ] && printf "\a"

	WARN_MSG="WARNING. Kernel version change detected."

	[ "$ESPEAK" == "true" ] && /usr/bin/espeak "$WARN_MSG" -p 0 & disown

	if [ "$NOTIFY_SEND" == "true" ]; then
		/usr/bin/notify-send --urgency=critical "$WARN_MSG"
	fi
fi

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
