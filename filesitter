#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/filesitter
# Started On        - Thu 28 Sep 23:58:07 BST 2017
# Last Change       - Sat  3 Mar 23:14:01 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /usr/bin/{tr,cut,stat} /bin/{systemctl,sleep}; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            FILESITTER (3rd March 2018)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            Watch for and act upon the completion of file size changes.

		SYNTAX:     filesitter [OPTS] FILE1 FILE2 FILE3
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --interval N            - Where N is the check interval in seconds.
		                                      Default is to check every 600 minutes.
		            --shutdown              - Power system off instead of suspending.

		NOTE:       Only up to three files can be watched at one time.

		            Suspending the machine is the default action upon no detected file size
		            change. The amount of minimum detected space change is 1 byte.
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--interval)
			shift
			if [[ "$1" =~ ^([0-9]+|[0-9]+.[0-9]+)$ ]]; then
				INTERVAL="$1"
			else
				XERR "$LINENO" "Invalid interval specified."
			fi ;;
		--shutdown)
			ACTION="poweroff" ;;
		*)
			break ;;
	esac
	shift
done

#TODO - Why is this here? Explore and optimize.
IFS=""

if ! [ "$1" -a "$2" -a "$3" ]; then
	XERR "$LINENO" "At least one filename is required."
else
	#TODO - More than 3 file shouldn't be an issue -- fix.
	FILENAME1="$1"
	FILENAME2="$2"
	FILENAME3="$3"
fi

[ $UID -eq 0 ] && XERR "$LINENO" "Root access isn't required."

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

while :; do
	for FILE in\
	\
		"${FILENAME1:-NULL}" "${FILENAME2:-NULL}" "${FILENAME3:-NULL}"
	{
		[ "$FILE" == "NULL" ] && continue
		if ! [ -f "$FILE" -o -r "$FILE" ]; then
			XERR "$LINENO" "Cannot find or access: $FILE"
		else
			NEW+=`/usr/bin/stat --printf="%s" "$FILE"`
		fi
	}

	if [ ${OLD:-0} -eq $NEW ]; then
		# Use trap to avoid neverending loop with suspend.
		[ -z "$ACTION" ] && ACTION="suspend"
		trap "/bin/systemctl $ACTION" HUP

		kill -HUP $$ && exit 0 || {
			XERR "$LINENO" "Failed to $ACTION the system."
		}
	fi

	OLD="$NEW"
	unset NEW

	/bin/sleep ${INTERVAL:-600}s
done

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
