#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/filesitter
# Started On        - Thu 28 Sep 23:58:07 BST 2017
# Last Change       - Thu  9 Nov 11:56:12 GMT 2017
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /usr/bin/{tr,cut,stat} /bin/{systemctl,sleep}; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

shopt -s extglob

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            FILESITTER (9th November 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            Watch for and act upon the completion of file size changes.

		SYNTAX:     filesitter [OPTS] FILE1 FILE2 FILE3
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --interval=n            - Where n is the check interval in seconds.
		                                      Default is to check every 600 minutes.
		            --shutdown              - Power system off instead of suspending.

		NOTE:       Only up to three files can be watched at one time.

		            Suspending the machine is the default action upon no detected file size
		            change. The amount of minimum detected space change is 1 byte.
	EOF
}

for ARG in $@; {
	case "$ARG" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--interval=@(+([0-9])|+([0-9]).+([0-9])))
			INTERVAL="${ARG/*=}" ;;
		--shutdown)
			ACTION="poweroff" ;;
		*)
			break ;;
	esac

	shift
}

IFS=""; FILENAME1="$1"; FILENAME2="$2"; FILENAME3="$3"
[ -z "$FILENAME1" -a -z "$FILENAME2" -a -z "$FILENAME3" ] && {
	XERR "$LINENO" "At least one filename is required."
}

[ $UID -eq 0 ] && XERR "$LINENO" "Root access isn't required."

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

while :; do
	for FILE in\
	\
		"${FILENAME1:-NULL}" "${FILENAME2:-NULL}" "${FILENAME3:-NULL}"
	{
		[ "$FILE" == "NULL" ] && continue

		[ -f "$FILE" -o -r "$FILE" ] || {
			XERR "$LINENO" "Cannot find or access: $FILE"
		}

		NEW+=`/usr/bin/stat --printf="%s" "$FILE"`
	}

	[ ${OLD:-0} -eq $NEW ] && {
		# Use trap to avoid neverending loop with suspend.
		[ -z "$ACTION" ] && ACTION="suspend"
		trap "/bin/systemctl $ACTION" HUP

		# Exit if kill succeeds, otherwise just exit with error.
		kill -HUP $$ && exit 0 || {
			XERR "$LINENO" "Failed to $ACTION the system."
		}
	}

	OLD="$NEW"
	unset NEW

	/bin/sleep ${INTERVAL:-600}s
done

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
