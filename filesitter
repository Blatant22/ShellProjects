#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/filesitter
# Started On        - Thu 28 Sep 23:58:07 BST 2017
# Last Change       - Thu  9 May 00:56:51 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-05-09"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            FILESITTER ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Watch for and act upon the completion of file size changes.

		SYNTAX:     filesitter [OPTS] FILE1 FILE2 FILE3 . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --interval|-I N         - Where N is the check interval in seconds.
		                                      Default is to check every 300 seconds.
		            --shutdown|-S           - Power system off instead of suspending.

		NOTE:       Multiple files can be monitored at a time.

		            Suspending the machine is the default action upon no detected file size
		            change. The amount of minimum detected space change is 1 byte.
	EOF
}

ACTION="suspend"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--interval|-I)
			shift
			if [[ "$1" =~ ^([0-9]+|[0-9]+.[0-9]+)$ ]]; then
				INTERVAL="$1"
			else
				XERR "$LINENO" "Invalid interval specified."
			fi ;;
		--shutdown|-S)
			ACTION="poweroff" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

if ! [ "$*" ]; then
	XERR "$LINENO" "No files were given for filesitter to monitor."
fi

declare -i DEPCOUNT=0
for DEP in /usr/bin/stat /bin/{systemctl,sleep}; {
	if ! [ -x "$DEP" ]; then
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

[ "$DEBUGME" == "true" ] && set -x

GO="yes"
while [ "$GO" == "yes" ]; do
	declare -i NEW=0

	for FILE in $@; {
		[ -f "$FILE" ] || continue
		NEW+=`/usr/bin/stat --printf="%s" "$FILE" 2>&-`
	}

	if [ ${OLD:-0} -eq $NEW ]; then
		GO="no"
	else
		OLD="$NEW"
		/bin/sleep ${INTERVAL:-300}s
	fi
done

if ! /bin/systemctl $ACTION; then
	XERR "$LINENO" "System $ACTION failed."
fi

# vim: ft=sh noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
