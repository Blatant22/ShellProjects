#!/bin/bash

#----------------------------------------------------------------------------------#
# Project Name      - miscellaneous/nxbt
# Started On        - Fri  6 Oct 17:52:55 BST 2017
# Last Change       - Fri  6 Oct 18:52:44 BST 2017
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

# This is somewhat of a fork of XBT, written by Joe Collins on October 4th, 2017:
#
# https://www.youtube.com/channel/UCTfabOKD7Yty6sDF4POBVqA
# http://www.ezeelinux.com/bash-scripts/
#
# NXBT (NEW XBT) IS A WORK IN PROGRESS.
#
# Please don't use this until I've declared here that I feel
# it's functional. Also, there will be one of my installit installers when it's
# functional and I feel it's safe and tested enough.

#----------------------------------------------------------------------------------

# | Requirements:
# |
# | XBT should run on any currently supported Linux distribution with BASH. The
# | dedicated USB drive must be formatted to a Linux native file system such as
# | Ext4 to ensure that file permissions will be stored unchanged.
# |
# | …And away we go!
#
#                         - Joe Collins

#----------------------------------------------------------------------------------

XERR(){ echo "[L${1}] ERROR: $2" 1>&2; exit 1; }
ERR(){ echo "[L${1}] ERROR: $2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /usr/bin/rsync; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

shopt -s extglob

USAGE(){
	while read -r; do
		echo "$REPLY"
	done <<-EOF
		            NXBT - NEW XBT (6th October 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            A fork and improvement of the XBT program written by Joe Collins.

		SYNTAX:     nxbt [OPTS] TARGET
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --log|-l PATH           - Choose a different location for the logfile.
		            --source|-s PATH        - Choose a different location to back up.
		            --targz                 - Archive and compress with gzip TARGET.

		NOTE:       Where TARGET is the location to store the backed up files. The files
		            will be stored within a timestamped directory. An example TARGET:

		              nxbt /media/\$USER/Backup_Drive/
	EOF
}

LOGFILE="/tmp/nxbt_$USER_$$.log"
exec 2> "$LOGFILE"

while [ -n "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--logfile)
			shift

			[ -d "${1%\/*}" ] && LOGFILE="$1" || {
				XERR "$LINENO" "Logfile directory not found."
			}
		--source)
			#TODO - Incorporate multiple optional sources.
			shift

			[ -d "${1%\/*}" ] && SOURCE="$1" || {
				XERR "$LINENO" "Source directory not found."
			}
		*)
			XERR "$LINENO" "Incorrect option(s) specified." ;;
	esac

	shift
done

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

TARGET="$*"
BACKNAME="BACKUP_$_`printf '%(%F_%X)T'`"

[ -d "$TARGET" ] || XERR "Unable to find or access the TARGET directory."

[ -z "$SOURCE" ] && {
	echo "Backing up $HOME..."
	/usr/bin/rsync -a –delete –info=progress2 "$HOME" "$TARGET/$BACKNAME"

	echo "Backing up /etc..."
	/usr/bin/rsync -a –delete –info=progress2 "/etc" "$TARGET/$BACKNAME"
} || {
	/usr/bin/rsync -a –delete –info=progress2 "$SOURCE" "$TARGET/$BACKNAME"
}

[ "$DEBUGME" == "true" ] && set +xeu || exit 0

#----------------------------------------------------------------------------------

#echo “Backup sent to XBT_Drive USB from $HOSTNAME by ‘$USER’ on:” > /tmp/backup.log
#date >> /tmp/backup.log
#echo “Errors:” >> /tmp/backup.log
#
## Begin backup operations using rsync:
## (User will be prompted for sudo password if XBT was not started with sudo.)
#
#echo ”
#Backing up /etc…”
#sudo rsync -a –delete –info=progress2 /etc/ /media/”$USER”/XBT_Drive/Etc_Backup/ 2>> /tmp/backup.log
#echo ”
#Backing up /home…”
#sudo rsync -a –delete –info=progress2 /home/ /media/”$USER”/XBT_Drive/Home_Backup/ 2>> /tmp/backup.log
#
#echo “——————–
#– All backed up! –
#——————–
#” | tee -a /tmp/backup.log
#
## Log file is created or appended on XBT_Drive from /tmp:
## (backup.log will be removed from /tmp on next reboot.)
#
#cat /tmp/backup.log >> /media/”$USER”/XBT_Drive/backup.log
#
## Writing all cached data to drives and exiting:
#
#sync
#exit
#
