#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - getline
# Started On        - Tue 19 Sep 20:57:01 BST 2017
# Last Change       - Mon 26 Mar 23:14:43 BST 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2018-03-26"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            GETLINE ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Pure Bourne Again Shell way to handle a plain text file.

		SYNTAX:     getline [OPTS] ACTION FILE1 FILE2 FILE3 . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --nocolor|-c            - Disables color in all standard getline output.
		            --nums|-n               - Displays line numbers when viewing files.
		            --ttl|-t                - Shows only the total numbers; omits filename.
		            --sum|-S                - When using count action, display grand total.
		            --names|-N              - When concatenating results, output the
		                                      filenames. Ignored if using a count action.

		ACTION:     read                    - Output the contents of the file.
		            read:N                  - Like read, but autoscroll N number of seconds.
		            line N[,N,H...]         - Where N is the line number of the file to show.
		            start N                 - Show the first N number of lines.
		            end N                   - Show the last N number of lines.
		            field l:f               - Where l is the line, and f is the field.
		            gmatch GLOB             - Where GLOB is the shell extglob to match.
		            rmatch REGEX            - Where REGEX is the regular expression to match.
		            lcount                  - Count the number of lines in the file.
		            wcount                  - Count the number of words in the file.
		            ccount                  - Count the number of characters in the file.

		NOTE:       Words, lines, and characters are determined in a shell-like way.

		EXAMPLE:    getline field 14:2 /etc/bash.bashrc
		            getline --nums read ~/.bashrc
		            getline --ttl lcount /etc/fstab
		            getline -c gmatch "kernel:" /var/log/syslog
		            getline read /etc/passwd
	EOF
}

declare -i ACTION_COUNT=0
SHOW_NAMES="false"
TOTAL_ONLY="false"
LINE_NUMBERS="false"
COLOR_MODE="true"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--nums|-n)
			LINE_NUMBERS="true" ;;
		--ttl|-t)
			TOTAL_ONLY="true" ;;
		--nocolor|-c)
			COLOR_MODE="false" ;;
		--names|-N)
			SHOW_NAMES="true" ;;
		--sum|-S)
			XERR "$LINENO" "Feature not yet available."
			SHOW_SUM="true" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

while [ "$1" ]; do
	case "$1" in
		read)
			ACTION_COUNT+=1
			INSTRUCT="read" ;;
		read:[1-9])
			ACTION_COUNT+=1
			INSTRUCT="read:${1/*:}" ;;
		start)
			XERR "$LINENO" "Feature not yet available."

			#TODO - Finish this feature.
			shift

			ACTION_COUNT+=1
			INSTRUCT="start"
			STARTNUM="$1"

			if [[ "$STARTNUM" =~ [0-9]+ ]]; then
				XERR "$LINENO" "Incorrect start number chosen."
			fi ;;
		end)
			XERR "$LINENO" "Feature not yet available."

			#TODO - Finish this feature.
			shift

			ACTION_COUNT+=1
			INSTRUCT="end"
			ENDNUM="$1"

			if ! [[ "$ENDNUM" =~ ^[0-9]+$ ]]; then
				XERR "$LINENO" "Incorrect end number chosen."
			fi ;;
		line)
			#TODO - Why won't this display >1 line at a time?
			shift

			ACTION_COUNT+=1
			INSTRUCT="showline"

			#TODO - Add ranges, like: line 2-50,57-59,70-74
			for L in ${1//,/ }; {
				if ! [[ "$L" =~ ^[0-9]+$ ]]; then
					XERR "$LINENO" "Incorrect line number: $L"
				fi

				# This is to ensure the user doesn't get confused
				# when they enter line 1, expecting line 1 as per
				# wc, yet see line 2, because arrays start at 0.
				let L--

				LINETOSHOW+=" $L"
			} ;;
		field)
			shift

			ACTION_COUNT+=1
			INSTRUCT="showfield"
			CUTLINE="$1"

			if ! [[ "$CUTLINE" =~ [0-9]+:[0-9]+ ]]; then
				XERR "$LINENO" "Incorrect cut line/field selected"
			fi ;;
		lcount)
			ACTION_COUNT+=1
			INSTRUCT="lcount" ;;
		wcount)
			ACTION_COUNT+=1
			INSTRUCT="wcount" ;;
		ccount)
			ACTION_COUNT+=1
			INSTRUCT="ccount" ;;
		gmatch)
			shift
			ACTION_COUNT+=1
			INSTRUCT="gmatch=$1" ;;
		rmatch)
			shift
			ACTION_COUNT+=1
			INSTRUCT="rmatch=$1" ;;
		*)
			break ;;
	esac

	shift
done

if [ "$COLOR_MODE" == "true" ]; then
	GREY="\e[1;30m"
	NORMAL="\e[0m"
fi

if [ $ACTION_COUNT -gt 1 ]; then
	XERR "$LINENO" "Only one action at a time may be specified."
fi

[ "$DEBUGME" == "true" ] && set -x

if ! [ "$INSTRUCT" ]; then
	XERR "$LINENO" "Missing or incorrect action argument."
else
	[ "$*" ] && FILELIST+="$@ "
fi

if [ "$INSTRUCT" == "showfield" ]; then
	# As above, but with the f part in action show-field=l:f.
	CUTFIELD=${CUTLINE/*:}
	let CUTFIELD--

	[ $CUTFIELD -lt 0 ] && XERR "$LINENO" "Incorrect field selected."
fi

if ! [[ "$INSTRUCT" == [wlc]count ]] && [ "$TOTAL_ONLY" == "true"  ]; then
	XERR "$LINENO" "Missing paired argument for --total-only."
fi

# This function saves repetition when a line or lines need to be displayed. Use
# $1 for the variable which contains the line number, $2 for the actual file's
# data, and use $3 for the newline \n character, if desired.
LINE_NUM_FUNC(){
	if [ "$LINE_NUMBERS" == "false" ]; then
		printf "%s$3" "$2"
	else
		[ -z "$2" ] && continue
		printf "${GREY}%#6d$NORMAL  %s$3" "$1" "$2"
	fi
}

for FILE in $FILELIST; {
	# Initialize the variables used in this for loop. This is to ensure when
	# working with a new file in FILELIST, the variables don't carry over.
	CHARCOUNT=0; LINECOUNT=0; WORDCOUNT=0; GETWORDS=""

	if ! [[ "$INSTRUCT" == [wlc]count ]] && [ "$SHOW_NAMES" == "true" ]; then
		printf "FILE: %s\n" "$FILE"
	fi

	if [ -z "$FILE" ]; then
		XERR "$LINENO" "No filename(s) specified."
	elif ! [ -f "$FILE" -a -r "$FILE" ]; then
		XERR "$LINENO" "File missing or inaccessible: $FILE"
	fi

	if [ "$INSTRUCT" == "showline" ]; then
		#TODO - Imrove count performances by using this. Use #N to get the
		#       length of the index (line in array); this can then be
		#       tested like in the below while loop, but may be quicker.
		#       Could the whole lot be be based upon readarray/mapfile?
		#       Example: printf "%s\n" "${#REPLY[@]}"
		readarray REPLY < "$FILE"
		for L in $LINETOSHOW; {
			LINE_NUM_FUNC "$LINETOSHOW" "${REPLY[$L]}"
		}

		continue
	fi

	# For the current file, read each line and process it as follows. Needed to
	# use -r and IFS= to avoid formatting issues with the output.
	while IFS= read -r REPLY; do
		# Remove newline characters from the current line. This fixes the
		# issue whereby using \ in files (particularly code) to continue
		# a long command on the next line, would not display correctly.
		REPLY="${REPLY//}"

		# Fixes issue whereby empty lines were being ignored. This converts
		# empty lines to a literal new line character. (\n doesn't work)
		[ -z "$REPLY" ] && REPLY+=""

		#TODO - Does this include spaces and/or tabs? Find out.
		# Replace each character in the current line with a + followed by
		# a space, thus allowing the for loop to recognise each field and
		# so able to count each one, using let's increment.
		for CHAR in ${REPLY//?/+ }; { let CHARCOUNT++; }

		# Continue to the next line, ignoring what's left of the while loop
		# if all you want is the character count. Saves unnecessary
		# processing and likely conflicts.
		[ "$INSTRUCT" == "ccount" ] && continue

		let LINECOUNT++

		if [ "$INSTRUCT" == "showfield" ]; then
			# Check if on the right line for show-field.
			if [ ${CUTLINE%:*} -eq $LINECOUNT ]; then
				read -a ARRAY <<< "$REPLY"
				printf "%s\n" "${ARRAY[$CUTFIELD]}"
				break
			fi
		fi

		# Process the results of each action listed here.
		case "$INSTRUCT" in
			read)
				# Output the file, like cat.
				LINE_NUM_FUNC "$LINECOUNT" "$REPLY" "\\n" ;;
			read:[1-9])
				# Output the file, like cat, but autoscroll.
				LINE_NUM_FUNC "$LINECOUNT" "$REPLY" "\\n"

				# Sleep for n number of seconds before scrolling.
				sleep ${INSTRUCT/*:}s ;;
			gmatch=*)
				# If the current line contains the match given by
				# the user and stored in INSTRUCT=*. Uses globbing.
				if [[ "$REPLY" == *${INSTRUCT/*=}* ]]; then
					LINE_NUM_FUNC "$LINECOUNT" "$REPLY" "\\n"
				fi ;;
			rmatch=*)
				# As gmatch, but uses extended regex.
				if [[ "$REPLY" =~ ${INSTRUCT/*=} ]]; then
					LINE_NUM_FUNC "$LINECOUNT" "$REPLY" "\\n"
				fi ;;
		esac
	done < "$FILE"

	# Saves repetition by calling this function for each following INSTRUCT.
	# Supply the first positional parameter with the variable from which to get
	# the total. Easier to add to.
	TTL_OUTPUT(){
		if ! [ "$TOTAL_ONLY" == "true" ]; then
			printf "%s %s\n" "$1" "$FILE"
		else
			printf "%s\n" "$1"
		fi
	}

	# Process the results of each action listed here.
	case "$INSTRUCT" in
		lcount)
			# Display total number of lines.
			TTL_OUTPUT "$LINECOUNT" ;;
		wcount)
			# Display total number of words.
			GETWORDS=$(for I in `< "$FILE"`; { printf "%s\n" "$I"; })
			for WORD in $GETWORDS; { let WORDCOUNT++; }
			TTL_OUTPUT "$WORDCOUNT" ;;
		ccount)
			# Display total number of characters.
			TTL_OUTPUT "$CHARCOUNT" ;;
	esac

	#TODO - Finish this. Target: show sum of concatenated "count" results.
	if [ "$SHOW_SUM" == "true" ]; then
		:
	fi
}

# vim: ft=sh noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
