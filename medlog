#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/medlog
# Started On        - Fri 18 Nov ??:??:?? BST 2016
# Last Change       - Sun 12 May 23:07:26 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# WARNING: This program (older one, compared to the GUI, medlogip) logs in the
#          opposite direction to medlogip. When I wrote medlogip, I realised it was
#          silly having the latest entries at the bottom. An easy fix in medlog, -
#          so I may include that at some point.
#----------------------------------------------------------------------------------

_VERSION_="2019-05-12"
_PROJECT_="${0##*/}"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Need help logging when you've taken your daily medication?

		SYNTAX:     $_PROJECT_ [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		*)
			FAIL 1 "$LINENO" "Incorrect argument(s) specified." ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in xmessage notify-send mkdir; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		FAIL 0 "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

MAINDIR="$HOME/.$_PROJECT_"
LOGFILE="$MAINDIR/$_PROJECT_.log"
[ -d "$MAINDIR" ] || mkdir -p "$MAINDIR"
[ -f "$LOGFILE" ] || > "$LOGFILE"
[ -w "$LOGFILE" ] || FAIL 1 "$LINENO" "File '${LOGFILE//*\/}' has no write access."

while read -a X; do
	printf -v LAST_LOG "%s\n" "${X[0]}"
done < "$LOGFILE"

printf -v TODAY_DATE "%(%F (%X))T" -1
MSG="Medication taken today, $USER?"
MSG_NO="Take medication, then reload $_PROJECT_."
if [ "${TODAY_DATE%/*}" == "${LAST_LOG%/*}" ]; then
	notify-send "Medication already taken today."
else
	if ! xmessage -buttons yes,no -center "$MSG"; then
		#TODO - Loop a reminder notification every X minutes.
		notify-send "$MSG_NO"
		exit 1
	else
		printf "%(%F (%X))T\n" -1 >> "$LOGFILE"
	fi
fi

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
