#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/mfw
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/mfw (Mint Forum Watch)
# Started On        - Sun 21 Jan 14:15:13 GMT 2018
# Last Change       - Fri  6 Dec 22:52:13 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# As I frequent the Mint forums so often, in an effort to help people, it'd be
# helpful to me if I can be apprised of thread posts in the Newbie Questions
# forums. This small program does just that; designed to run in the background.
#
# At some point, I may introduce the ability to watch different forums.
#----------------------------------------------------------------------------------

_VERSION_="2019-12-06"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

DOM='https://forums.linuxmint.com'

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - Mint Forum Watch ($_VERSION_)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Notifier for page-one threads on the Newbie Questions Linux Mint forum.

		SYNTAX:     $_PROJECT_ [OPTS] [INTERVAL]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --filter|-F ID          - Omit threads by their ID number. (See URL)
		            --no-notify-wait        - Display all notifications at once.
		            --run-once|-O           - Don't run in the background; run only once.

		EXAMPLE:    $_PROJECT_ -F 12345 -F 54321 --no-notify-wait 30

		NOTE:       Where INTERVAL is the time between each check, in minutes.

		SITE:       $DOM
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--debug|-D)
			DEBUGME='true' ;;
		--filter|-F)
			shift; ID="$1" ;;
		--no-notify-wait)
			NO_NOTIFY_WAIT='true' ;;
		--run-once|-O)
			RUN_ONCE='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

INTERVAL=$1

declare -i DEPCOUNT=0
for DEP in sleep notify-send wget; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

[ "$DEBUGME" == 'true' ] && set -x

URL="$DOM/viewforum.php?f=90"
REGEX='\?f=90\&amp\;t=[0-9]+\&amp;sid=[0-9a-z]+\"\sclass=\"topictitle\">.*<'

# Filter out the old standard, stickied threads, plus user specified threads.
FILTER=(83444 83314 81997 97158 245700 230142 219089 224270 $FILTER_ADD)

while :; do
	PARSE(){
		while IFS=">" read -a X; do
			if [[ ${X[*]} =~ class=\"posts\"\ [0-9]+\ \< ]]; then
				T_REP=${X[1]//[!0-9]}
				[ $T_REP -eq 0 ] || continue
			elif [[ ${X[*]} =~ class=\"topictitle\" ]]; then
				IFS=";" read -a Y <<< "${X[0]/*<a href=}"
				T_ID=${Y[1]//[!0-9]}
				T_STR=${X[1]%</a}

				for Z in ${FILTER[@]}; {
					[ "$Z" == "$T_ID" ] && continue 2
				}

				printf "%6d[%0.2d]: %s\n" "$T_ID" "$T_REP" "$T_STR"
			fi
		done <<< "$(wget -q "$URL" -O -)"
	}

	while read -a R; do
		BUF=${R/???????}

		if ! [ "$NO_NOTIFY_WAIT" == 'true' ]; then
			printf -v SECS "%0.5d" "$RANDOM"
			sleep ${SECS%???}s
		fi

		notify-send "${R[*]}"
	done <<< "$(PARSE)"

	if ! [ "$RUN_ONCE" == 'true' ]; then
		sleep ${INTERVAL}m
	else
		break
	fi
done &

