#!/bin/bash
#cito M:755 O:0 G:0 T:/usr/bin/ripmydvd
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/ripmydvd
# Started On        - Fri 29 Sep 21:19:47 BST 2017
# Last Change       - Fri  6 Dec 22:53:43 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-12-06"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Shell program using ffmpeg and mplayer to rip your DVD.

		SYNTAX:     $_PROJECT_ [OPTS] TARGET

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --debug|-D              - Enables the built-in bash debugging.
		            --title|-t N[-N]        - Where N is the title number on the DVD. The
		                                      title choice can be specified by a range.
		            --eject|-e              - Eject the device's tray upon completion.
		            --nosummary             - Don't display a summary before exiting.
		            --device|-d X           - Where X is the device from which to rip. By
		                                      default, this will be /dev/sr0.
		            --startcmd CMD          - Execute CMD command before ripping begins.
		            --endcmd CMD            - Execute CMD command when ripping is done.
		            --aid X                 - Where X is the audio channel.
		            --asid X                - Where X is the audio substream ID.
		            --alang X               - Where X is the audio language; en or eng?
		            --combine|-C            - Wrong language? This option should work.

		NOTE:       You may wish to use lsdvd to help you, especially with audio.

		            The --combine|-C option requires --aid or --alang. This will rip the
		            audio and video separately, then they will be combined into TARGET.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--quiet|-q)
			BEQUIET='true' ;;
		--debug|-D)
			DEBUGME='true' ;;
		--device|-d)
			shift

			[ -b "$1" ] || Err 1 $LINENO "Device not found at: $1"
			DEVICE="$1" ;;
		--combine|-C)
			COMBINE='true' ;;
		--title|-t)
			shift

			if [[ $1 =~ ^([0-9]+|[0-9]+-[0-9]+)$ ]]; then
				TITLE=$1
			else
				Err 1 $LINENO "Invalid title."
			fi ;;
		--aid)
			shift

			AID="-aid $1" ;;
		--asid)
			shift

			ASID="-asid $1" ;;
		--alang)
			shift

			ALANG="-alang $1" ;;
		--eject|-e)
			EJECT='true' ;;
		--nosummary)
			SUMMARY='false' ;;
		--startcmd)
			shift

			START_COMMAND="$1" ;;
		--endcmd)
			shift

			END_COMMAND="$1" ;;
		*)
			break ;;
	esac

	shift
done

TARGET="$*"

declare -i DEPCOUNT=0
for DEP in eject mkfifo ffmpeg mplayer; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

[ "$TARGET" ] || Err 1 $LINENO "You need to provide a filename."
[ "$TITLE" ] || Err 1 $LINENO "Which title do you want to rip?"
[ "$DEVICE" ] || DEVICE="/dev/sr0"

[ "$BEQUIET" == 'true' ] && exec > /dev/null
[ "$DEBUGME" == 'true' ] && set -x

FIFO="/tmp/stream_${$}.dump"
MPARGS1="$AID $ASID $ALANG -nosub -really-quiet -nolirc -nocache -vo x11 -zoom"
MPARGS2="-dumpstream -dumpfile "$FIFO" dvd://$TITLE/$DEVICE"
declare -i SECONDS=0

[ "$START_COMMAND" ] && ($START_COMMAND)

mkfifo "$FIFO"

if [ "$COMBINE" == 'true' ]; then
	if ! [ "$ALANG" -a "$AID" ]; then
		Err 1 $LINENO "The --combine argument requires -alang or -aid."
	fi

	mplayer $MPARGS1 -dumpaudio -dumpfile "/tmp/audio.dump"\
		dvd://$TITLE/$DEVICE > /dev/null 2>&1

	mplayer $MPARGS1 -dumpvideo -dumpfile "$FIFO"\
		dvd://$TITLE/$DEVICE > /dev/null 2>&1 & disown

	ffmpeg -loglevel fatal -stats -i /tmp/audio.dump -i "$FIFO" "$TARGET"
else
	mplayer $MPARGS1 $MPARGS2 > /dev/null 2>&1 & disown
	ffmpeg -loglevel fatal -stats -i "$FIFO" "$TARGET"
fi

if [ "$SUMMARY" == 'false' ]; then
	printf "\aJob on %s ran for %d seconds.\n" "$DEVICE" "$SECONDS"
fi

[ "$END_COMMAND" ] && ($END_COMMAND)

if [ "$EJECT" == 'true' ]; then
	eject $DEVICE
fi

