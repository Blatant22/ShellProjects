#!/bin/bash
#cito M:755 O:0 G:0 T:/usr/bin/bl
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/bl (blkid lite)
# Started On        - Thu 14 Sep 01:49:40 BST 2017
# Last Change       - Fri  6 Dec 22:46:24 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-12-06"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" >&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - BLKID Lite ($_VERSION_)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Much simpler, quicker version of blkid.

		SYNTAX:     $_PROJECT_ [OPTS] <DEV> ...

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --uuid|-U NAME          - Display only the UUID.
		            --label|-L NAME         - Display only the LABEL.

		EXAMPLE:    Display only the UUID for the following devices:

		              $_PROJECT_ -U=/dev/sda1 -U=/dev/sdb3

		            Display NAME,LABEL,UUID,FSTYPE,PARTUUID for devices:

		              $_PROJECT_ /dev/sdb1 /dev/sdg2 /dev/fd0

		NOTE:       While this small program certainly couldn't replace blkid's entire
		            suite of functionalities, $_PROJECT_ is perhaps enough for most who just need
		            a UUID or LABEL.
	EOF
}

LSBLK_FORMAT="name,label,uuid,fstype,partuuid"
declare -i A=0 # The number of short or long arguments.

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--debug|-D)
			DEBUGME='true'
			A+=1; ;;
		--uuid|-U)
			shift

			UFLAG_ACTIVE='true'
			PORNOT="-n"
			LSBLK_FORMAT="uuid"
			SHOWDEV="${SHOWDEV:-} $1"
			A+=1 ;;
		--label|-L)
			shift

			LFLAG_ACTIVE='true'
			PORNOT="-n"
			LSBLK_FORMAT="label"
			SHOWDEV="${SHOWDEV:-} $1"
			A+=1 ;;
		/dev/*)
			[ $A -eq 0 ] && SHOWDEV="${SHOWDEV:-} $1" ;;
		*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in sed lsblk; {
	if ! type -P "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

if [ "${UFLAG_ACTIVE:-}" == 'true' -a "${LFLAG_ACTIVE:-}" == 'true' ]; then
	Err 1 $LINENO "Unable to mix --uuid|-U and --label|-L flags."
elif [[ $LSBLK_FORMAT =~ ^(label|uuid)$ ]] && [ -z "$SHOWDEV" ]; then
	Err 1 $LINENO "Missing a block device name."
fi

[ "$DEBUGME" == 'true' ] && set -x

MAIN_FUNC(){
	LSBLK(){
		lsblk ${PORNOT:--P} -po $LSBLK_FORMAT ${SHOWDEV} 2> /dev/null
	}

	# Format the output appropriately based on how lsblk is called.
	case $LSBLK_FORMAT in
		uuid)
			LSBLK | sed 's/^UUID="\(.*\)"/\1/; /\(^$\|^[\t\s]\+$\)/d' ;;
		name)
			#TODO: Is this even used?
			LSBLK | sed 's/^LABEL="\(.*\)"/\1/; /\(^$\|^[\t\s]\+$\)/d' ;;
		*)
			LSBLK | sed -e 's/^NAME="\/dev\/\([[:alnum:]]\+\)"/\1:/'\
				-e 's/FSTYPE="/TYPE="/; /\(UUID=""\|FSTYPE=""\)/d'\
				-e 's/LABEL="" //; /\(^$\|^[\t\s]\+$\)/d' ;;
	esac
}

#TODO: Improve everything below and the use of the function above.

# To avoid recalling the same function.
MAIN_VAR=`MAIN_FUNC`

# Helps for those getting the exit status.
if [ -z "$MAIN_VAR" ]; then
	exit 2
else
	printf "%s\n" "$MAIN_VAR"
fi

