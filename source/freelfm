#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/source/freelfm
# Started On        - Fri 15 Sep 21:19:42 BST 2017
# Last Change       - Wed 27 Nov 15:54:14 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-11-27"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Download last.fm's free music into the current working directory.

		SYNTAX:     $_PROJECT_ [OPTS] <page#> <page#> <page#> . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --links-only            - Don't download, just save the true, direct
		                                      download links to a file. See FILES.
		            --suspend|-s            - Suspend the system after $_PROJECT_ finishes.
		            --shutdown|-S           - Shut the system down after $_PROJECT_ finishes.

		NOTE:       The current max page is 12. The total number is 220+ MP3 tracks.

		FILES:      The $_PROJECT_ files (except tracks) are saved in /tmp, for example:

		            STDOUT and STDERR are logged into this file.

		              ${_PROJECT_}_2017-09-01_21:25:47.log

		            Each page is downloaded and then parsed for download links.

		              ${_PROJECT_}_p2_2017-09-01_21:25:47.htm

		            If you choose the --links-only flag, they will be saved here.

		              ${_PROJECT_}_links_2017-09-01_21:25:47.txt

		SITE:       https://www.last.fm
	EOF
}

LINKSONLY='false'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--debug|-D)
			DEBUGME='true' ;;
		--suspend|-s)
			SUSPEND='true' ;;
		--shutdown|-S)
			SHUTDOWN='true' ;;
		--links-only)
			LINKSONLY='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in tee wget sync sleep sed grep mkdir; {
	if ! type -P "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -gt 0 ] && exit 1


if ! [ "$*" ]; then
	Err 1 $LINENO "One or more page numbers missing."
else
	PAGENUM="$@"
	for NUM in $PAGENUM; {
		if ! [[ $NUM == [0-9] ]]; then
			Err 1 $LINENO "Invalid page number at: $NUM"
		fi
	}
fi

# Newer versions of wget by default request unwanted server-side compression.
read -a WGET_VER_LINE <<< "$(wget --version)"
[ 0${WGET_VER_LINE[2]//[!0-9]} -ge 01192 ] && NOWARC="--no-warc-compression"

[ "$DEBUGME" == 'true' ] && set -x

DLDIR="./"
printf -v CURDATE "%(%F_%X)T" -1
SITEURL="https://www.last.fm/music/+free-music-downloads?page="
LINKSONLY_FILE="/tmp/${_PROJECT_}_links_${CURDATE}.txt"
LOGFILE="/tmp/${_PROJECT_}_${CURDATE}.log"

for PAGE in $PAGENUM; {
	SITETMP="/tmp/${_PROJECT_}_${PAGE}_${CURDATE}.htm"

	printf "%s\n" "PAGE: $PAGE"
	wget $NOWARC -q "${SITEURL}${PAGE}" -O "$SITETMP"

	TITLELINK=$(
		grep -e "title=\".* — .*\"" -oe "https://.*\.mp3" "$SITETMP"\
			| sed 's/\s/_/g; s/&amp\;/\&/g; s/—/-/g'
	)

	for LINK in $TITLELINK; {
		if [[ $LINK == title=* ]]; then
			TITLE=$(
				printf "%s\n" "${LINK//_/ }"\
					| sed -e s/\&amp\;/\&/ -e s/^title=//\
						   -e s/\"//g -e s/\&\#39\;/\'/g
			)
		else
			if ! [ "$LINKSONLY" == 'true' ]; then
				printf "%s\n" "FILE: ${TITLE}.mp3"
				wget -qc --no-cookies $NOWARC \
					"$LINK" -O "$DLDIR/${TITLE//\"}.mp3" || {
					Err 0 $LINENO "Track '${TITLE}.mp3' failed."
				}
			else
				printf "%s\n" "LINK: ${TITLE}.mp3"
				printf "%s\n" "$LINK" >> "$LINKSONLY_FILE"
			fi
		fi
	}
} |& tee "$LOGFILE"

if [ "$SHUTDOWN" == 'true' ]; then
	shutdown +3 > /dev/null 2>&1
	printf "%s\n" "Shutting down in 3 minutes..."
	MSG="Type 'C' to cancel, or 'N' to shutdown now: "
	read -n 1 -e -p "$MSG" SHUTDOWN_PROMPT
	case ${SHUTDOWN_PROMPT:-EMPTY} in
		[Cc])
			shutdown --no-wall -c
			exit 0 ;;
		[Nn])
			shutdown --no-wall now ;;
		EMPTY|*)
			printf "%s\n" "Incorrect response. Quitting." 1>&2
			exit 1 ;;
	esac
fi

if [ "$SUSPEND" == 'true' ]; then
	/bin/sync
	printf "%s\n" "System will suspend in 3s; type Ctrl+C to cancel."
	/bin/sleep 3

	if type -P systemctl > /dev/null 2>&1; then
		systemctl suspend
	elif type -P pm-suspend > /dev/null 2>&1; then
		pm-suspend
	else
		Err 1 $LINENO "Unable to find a supported suspend method."
	fi
fi

