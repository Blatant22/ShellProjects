#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - nts (Note to Self)
# Started On        - Sun 10 Nov 23:54:20 GMT 2019
# Last Change       - Wed 27 Nov 15:49:27 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Work in progress...
#----------------------------------------------------------------------------------

CurVer="2019-11-27"
Progrm=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

DOM="https://github.com"

Usage(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} - Note to Self ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Dummy description for this template.

		SYNTAX:     $Progrm [OPTS] NOTE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --update|-U             - Check for updates to $Progrm.
		            --debug|-D              - Enables the built-in bash debugging.
		            --make|-m NOTE          - Make note; saves for later reading.
		            --raw|-R                - Display notes as-is, without formatting.
		            --delete                - Irrevocably delete database file.

		SITE:       $DOM/terminalforlife/Extra
	EOF
}

Show='true'
Fancy='true'
ShowAll='true'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--quiet|-q)
			BEQUIET='true' ;;
		--update|-U)
			Update='true' ;;
		--debug|-D)
			DEBUGME='true' ;;
		--make|-m)
			shift; NOTE="$1"

			if [ -z "$NOTE" ]; then
				Err 1 $LINENO "Text missing while making note."
			fi ;;
		--raw|-R)
			Fancy="false" ;;
		--delete|-D)
			Delete='true' ;;
		*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
	esac
	shift
done

declare -i DepCount=0
for Dep in rm mkdir fold tput; {
	if ! type -fP "$Dep" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$Dep' not met."
		DepCount+=1
	fi
}

[ $DepCount -eq 0 ] || exit 1

if [ "$Update" == 'true' ]; then
	if ! type -fP wget > /dev/null 2>&1; then
		Err 1 $LINENO "Dependency 'wget' not met."
	fi

	VerURL="$DOM/terminalforlife/Extra/raw/master/versions"
	while IFS='=' read -a CurLine; do
		if  [ "${CurLine[0]}" == "$Progrm" ]; then
			NewVer="${CurLine[1]}"

			if [[ "${NewVer//-}" =~ ^[0-9]{8}$ ]]; then
				if [ ${NewVer//-} -gt ${CurVer//-} ]; then
					while read -r; do
						printf "%s\n" "$REPLY"
					done <<-EOF
						New version available:    $NewVer
						Current version:          $CurVer
					EOF
				fi
			else
				Err 1 $LINENO "Failed to check for available updates."
			fi
		fi
	done <<< "$(wget -q "$VerURL" -O -)"

	exit 0
fi

[ "$DEBUGME" == 'true' ] && set -x

MAIN_DIR="$HOME/.config/nts"
DB="$MainDir/db"

if ! [ -d "$MainDir" ]; then
	mkdir -p "$MainDir" || Err 1 $LINENO "Unable to make 'nts' directory."
fi

GENDB(){
	printf -v Date "%(%X %F)T"
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		# Generated NTS (Note to Self) database.
		# DATE:    $Date
		# USER:    $USER (UID: $UID)
		# HOST:    $HOSTNAME
	EOF
}

if [ "$Delete" == 'true' ]; then
	rm -v "$Database" || Err 1 $LINENO "Unable to delete the database."
	exit 0
else
	if ! [ -f "$Database" ]; then
		GENDB > "$Database" || Err 1 $LINENO "Unable to generate a database."
	else
		[ -r "$Database" ] || Err 1 $LINENO "Unable to read the database."
	fi
fi

# Arguments apply to formatting of the output.
ParseDB(){
	# Expected format: DATE~UID[USER]~HOSTNAME~NOTE
	while IFS='~' read -ra CurLine; do
		if ! [[ "${CurLine[0]}" == \#* ]] && [ -n "${CurLine[*]}" ]; then
			if [ "$ShowAll" == 'true' ]; then
				if [ "$Fancy" == 'true' ]; then
					printf "DATE:   %s\nUSER:   %s\nHOST:   %s\n\n%s\n\n"\
						"${CurLine[0]}" "${CurLine[1]}" "${CurLine[2]}"\
						"${CurLine[3]}" | fold -sw "${COLUMNS:-`tput cols`}"
				else
					printf "%s~%s~%s~%s\n" "${CurLine[0]}" "${CurLine[1]}"\
						"${CurLine[2]}" "${CurLine[3]}"
				fi
			fi
		fi
	done < "$Database"
}

if [ -n "$NOTE" ]; then
	HOSTNAME="${HOSTNAME//~/?}" # <-- Sanitize, just in-case.
	NOTE="${NOTE/$'\n'/\\n}" # <-- Sanitize, in-case the user enters a new line.
	printf "%(%F_%X)T~%s~%s~%s\n" -1 "${UID:-N/A}[${USER:-N/A}]"\
		"${HOSTNAME:-N/A}" "${NOTE:-N/A}" >> "$Database"
	exit 0
fi

ParseDB
