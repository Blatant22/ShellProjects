#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/bdl
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/bdl
# Started On        - Sat 16 Sep 22:34:12 BST 2017
# Last Change       - Sat 14 Mar 14:54:42 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libtflbp-sh (>= 2019-12-10)
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-03-14'
Progrm=${0##*/}

Usage(){
	while read -r CurLine; do
		printf "%b\n" "$CurLine"
	done <<-EOF
		\r            BDL ($CurVer)
		\r            Written by terminalforlife <terminalforlife@yahoo.com>

		\r            Bourne POSIX solution to batch-downloading files.

		\rSYNTAX:     $Progrm [OPTS]

		\rOPTS:       --help|-h|-?            - Display this help information.
		\r            --version|-v            - Output the version datestamp.
		\r            --clear|-C              - Empty download queue, entirely.
		\r            --dest|-d PATH          - Download to PATH directory.
		\r            --editor|-E CMD         - Use CMD as the text editor.
		\r            --edit|-e               - Edit queue with text editor.
		\r            --insert|-I URL         - Append URL to download queue.
		\r            --notify|-N             - Notify of $Progrm completion.
		\r            --shutdown|-S           - Shut system down when finished.
		\r            --suspend|-s            - Suspend system when finished.

		\rFILE:       ~/.config/$Progrm/editor
		\r            ~/.config/$Progrm/queue
	EOF
}

MainDir="$HOME/.config/$Progrm"
EdFile="$MainDir/editor"
BDLFile="$MainDir/queue"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--insert|-I)
			[ -z "$2" ] && Err 1 "Option '$1' requires an argument."

			DoInsert=$2
			shift ;;
		--dest|-d)
			[ -z "$2" ] && Err 1 "Option '$1' requires an argument."
			[ -d "$2" ] || Err 1 'Destination directory unavailable.'

			DL_DIR=$1
			shift ;;
		--editor|-E)
			[ -z "$2" ] && Err 1 "Option '$1' requires an argument."

			ChangeEd=$2
			shift ;;
		--edit|-e)
			EditFlag='true' ;;
		--clear|-C)
			Clear='true' ;;
		--notify|-N)
			DoNotify='true' ;;
		--suspend|-s)
			DoSuspend='true' ;;
		--shutdown|-S)
			DoShutdown='true' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

if [ -n "$ChangeEd" ]; then
	printf '%s\n' "$ChangeEd" > "$EdFile"
	exit 0
fi

if ! [ -f "$EdFile" ] && ! [ -s "$EdFile" ]; then
	Err 1 "Please choose an editor -- see: $Progrm -h"
else
	read QueueEd < "$EdFile"
fi

if [ "$EditFlag" = 'true' ]; then
	if command -v "$QueueEd" 1> /dev/null 2>&1; then
		$QueueEd "$BDLFile" 2> /dev/null
		exit 0
	else
		Err 1 "Unable to execute '$QueueEd' editor."
	fi
fi

ChkDep mv systemctl sleep sync mkdir

if [ "$Clear" = 'true' ]; then
	if ! [ -f "$BDLFile" ]; then
		Err 1 "File '$BDLFile' not found."
	else
		mv "$BDLFile" "$BDLFile.old"
		exit 0
	fi
elif [ -n "$DoInsert" ]; then
	printf "%s\n" "$DoInsert" 1>> "$BDLFile"
	exit 0
fi

if ! mkdir -p "$MainDir" 1> /dev/null 2>&1; then
	Err 1 "Unable to create '~${MainDir#$HOME}' directory."
fi

if [ -f "$BDLFile" ]; then
	while read URL Dest; do
		Output=${Dest:-./${URL##*/}}

		if command -v wget 1> /dev/null 2>&1; then
			wget -qc --show-progress -O "$Output" "$URL"
		elif command -v curl 1> /dev/null 2>&1; then
			curl -sC - --progress-bar -o "$Output" "$URL"
		else
			Err 1 "Neither 'wget' nor 'curl' are available."
		fi

		sync "$Output" # <-- Avoid data loss.
	done < "$BDLFile"

	if [ "$DoNotify" = 'true' ]; then
		notify-send "Downloading with $Progrm is complete."
	fi

	if [ "$DoShutdown" = 'true' ]; then
		systemctl poweroff
	elif [ "$DoSuspend" = 'true' ]; then
		systemctl suspend
	fi
else
	printf 'Nothing to do -- quitting.\n'
fi
