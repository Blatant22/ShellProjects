#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/source/bdl (Batch Downloader)
# Started On        - Sat 16 Sep 22:34:12 BST 2017
# Last Change       - Wed 27 Nov 15:53:54 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-11-27"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - BATCH DOWNLOADER ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Easily and quickly download a batch of files using wget.

		SYNTAX:     $_PROJECT_ [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --insert|-I LINK        - Quickly append a link to the download list.
		            --dest|-d PATH          - Where PATH is the location to download.
		            --editor|-E CMD         - Where CMD is the command for your editor.
		            --suspend|-s            - Immediately suspend machine when finished.
		            --shutdown|-S           - Like above, but a shutdown after 1 minute.
		            --notify|-N             - Use notify-send to inform of $_PROJECT_ completion.
		            --edit|-e               - Change URL list with an available text editor.
		            --clear|-C              - Empty the $_PROJECT_ download list entirely.

		FILE:       All files are found in '\$HOME/.$_PROJECT_'.
	EOF
}

MAIN_DIR="$HOME/.$_PROJECT_"
LIST_EDITOR_FILE="$MAIN_DIR/editor.conf"
BDL_FILE="$MAIN_DIR/${_PROJECT_}_list.txt"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME='true' ;;
		--insert|-I)
			shift

			INSERT='true'
			printf "%s\n" "$1" >> "$BDL_FILE" ;;
		--dest|-d)
			shift

			[ -d "$1" ] || {
				Err 1 $LINENO "Destination directory unavailable."
			} && DL_DIR="$1" ;;
		--editor|-E)
			shift

			printf "%s\n" "$1" > "$LIST_EDITOR_FILE"
			exit 0 ;;
		--edit|-e)
			EDITFLAG='true' ;;
		--clear|-C)
			CLEAR='true' ;;
		--notify|-N)
			NOTIFY='true' ;;
		--suspend|-s)
			SUSPEND='true' ;;
		--shutdown|-S)
			SHUTDOWN='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
	esac
	shift
done

if ! [ -f "$LIST_EDITOR_FILE" -a -s "$LIST_EDITOR_FILE" ]; then
	Err 1 $LINENO "Please choose an editor. See --help for info."
else
	read LIST_EDITOR < "$LIST_EDITOR_FILE"
fi

if [ "$EDITFLAG" == 'true' ]; then
	if [ -x "$LIST_EDITOR" ]; then
		$LIST_EDITOR "$BDL_FILE" 2> /dev/null
		exit 0
	else
		Err 1 $LINENO "Unable to execute: $LIST_EDITOR"
	fi
fi

declare -i DEPCOUNT=0
for DEP in wget shutdown mv systemctl sleep sync mkdir; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -gt 0 ] && exit 1

[ "$DEBUGME" == 'true' ] && set -x

if [ "$CLEAR" == 'true' ]; then
	mv "$BDL_FILE"{,.old}
	exit 0
fi

#TODO - Why won't this directory be created on Ubuntu 18.04? There's no Err(), it
#       just refuses to create the directory, so the following test breaks.
if ! [ -d "$MAIN_DIR" ] && ! mkdir "$MAIN_DIR" > /dev/null 2>&1; then
	Err 1 $LINENO "Unable to create $HOME/.$_PROJECT_ directory."
fi

[ -f "$BDL_FILE" ] || > "$BDL_FILE"

INIT_MAIN(){
	while read -a LINE; do
		if ! [[ ${LINE[0]} =~ ^#+ ]]; then
			WARGS="-qc $NOWARC --show-progress"
			wget $WARGS "${LINE[0]}" -O "./${LINE[0]//*\/}"
			sync "./${LINE[0]//*\/}"
		fi
	done < "$BDL_FILE"

	if [ "$NOTIFY" == 'true' ]; then
		notify-send "Downloading with $_PROJECT_ is completed."
	fi

	if [ "$SHUTDOWN" == 'true' ]; then
		notify-send "System shutdown in one minute."\
			-i warning -u critical

		shutdown --no-wall +1
	elif [ "$SUSPEND" == 'true' ]; then
		notify-send "System will suspend in ten seconds."\
			-i warning -u critical

		sleep 10s
		systemctl suspend
	fi
}

[ "$INSERT" == 'true' ] && exit 0
if [ "$SHUTDOWN" == 'true' ]; then
	INIT_MAIN SHUTDOWN
else
	INIT_MAIN
fi

