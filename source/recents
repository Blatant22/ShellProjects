#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/recents
#------------------------------------------------------------------------------
# Project Name      - Extra/source/recents
# Started On        - Fri  2 Jun 00:15:00 BST 2023
# Last Change       - Sat  3 Jun 13:39:20 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Portable tool written purely in BASH to list and pretty-print recently opened
# files ('file://' URIs), per the '~/.recently-used.xbel' file.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.0)
#------------------------------------------------------------------------------

CurVer='2023-06-03'
Progrm=${0##*/}

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --sort=TYPE              - Sort by TYPE 'asc', 'desc', or 'never'.
		  -C, --nocolor            - Disable ANSI color escape sequences.
		  -f, --file FILE          - Override default locations with FILE.
		  -n, --number             - Include line number of each URI.

		  The use of '-' to instead read from STDIN is supported.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Number='False'
StandardIn='False'
File="$HOME/.recently-used.xbel"
Sort='never'
NoColor='True'

Green=$'\e[32m'
Red=$'\e[31m'
Reset=$'\e[0m'

Args=()
while [[ -n $1 ]]; do
	case $1 in
		-[^-]*)
			Str=${1#-}
			Len=${#Str}
			for (( Index = 0; Index < Len; Index++ )); {
				Args+=(-"${Str:Index:1}")
			} ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

while [[ -n $1 ]]; do
	case $1 in
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--sort=*)
			Flag=${1%%=*}
			Arg=${1#*=}
			case ${Arg,,} in
				asc|desc|never)
					Sort=$Arg ;;
				'')
					Err 1 "Option '$Flag' requires an argument." ;;
				*)
					Err 1 "Option '$Flag' given an invalid argument." ;;
			esac ;;
		--nocolor|-C)
			Green=
			Red=
			Reset= ;;
		--file|-f)
			ArgFile=$1
			shift

			if [[ -z $1 ]]; then
				Err 1 "Option '$ArgFile' requires an argument."
			else
				File=$1
			fi ;;
		--number|-n)
			Number='True' ;;
		-)
			StandardIn='True' ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

if [[ $StandardIn == True && -n $ArgFile ]]; then
	Err 1 "OPT '$ArgFile' unavailable when reading from STDIN."
fi

#-------------------------------------------------------------Primary Functions

Quote() {
	case $1 in
		'"'|"'")
			return 0 ;;
		''|*)
			return 1 ;;
	esac
}

Compare() {
	case $Sort in
		asc)
			[[ $1 > $2 ]] && return 0 ;;
		desc)
			[[ $1 < $2 ]] && return 0 ;;
	esac

	return 1
}

#-------------------------------------------------------------------Gather Data

if ! [[ -t 1 ]]; then
	Green=
	Red=
	Reset=
fi

if [[ $StandardIn == True ]]; then
	File='/dev/stdin'
else
	if ! [[ -f $File ]]; then
		Err 1 "File '${File/$HOME/\~}' not found."
	elif ! [[ -r $File ]]; then
		Err 1 "File '${File/$HOME/\~}' unreadable."
	fi
fi

Files=()
LineNr=0
while read; do
	(( LineNr++ ))

	Start=
	Quote=
	Match=
	Buffer=
	Len=${#REPLY}
	for (( Index = 0; Index < Len; Index++ )); {
		Char=${REPLY:Index:1}
		if [[ $Start == True ]]; then
			if [[ $Match == bookmark\ href= ]]; then
				if [[ $Quote == True ]]; then
					if Quote "$Char"; then
						Match=
						Len=${#Buffer}
						for (( Index = 0; Index < Len; Index++ )); {
							Char=${Buffer:Index:1}
							if [[ $Match == file:// ]]; then
								Files+=("$LineNr:${Buffer#file://}")
								MaxLen=${#LineNr}

								break
							else
								Match+=$Char
							fi
						}

						break
					fi

					Buffer+=$Char
				elif Quote "$Char"; then
					Quote='True'
				fi
			else
				Match+=$Char
			fi
		elif [[ $Char != [[:space:]] ]]; then
			Start='True'
		fi
	}
done < "$File"

#------------------------------------------------------------------Sort Results

# This breaks in < BASH 4.0.
if [[ $Sort != never ]]; then
	Len=${#Files[@]}
	for (( Index = 1; Index < Len; Index++ )); {
		Cur=${Files[Index]}
		Pos=$Index

		while (( Pos > 0 )) && Compare "${Files[Pos - 1]%%:*}" "${Cur%%:*}"; do
			Files[Pos--]=${Files[Pos - 1]}
		done

		Files[Pos]=$Cur
	}
fi

#---------------------------------------------------------------Display Results

for File in "${Files[@]}"; {
	LineNr=${File%%:*}
	File=${File#*:}

	FileColor=
	if ! [[ -f $File ]]; then
		FileColor=$Red
	fi

	if [[ $Number == True ]]; then
		printf '%s%*d%s %s%s%s\n' "$Green" $MaxLen $LineNr\
				"$Reset" "$FileColor" "${File/$HOME/\~}" "$Reset"
	else
		printf '%s%s%s\n' "$FileColor" "${File/$HOME/\~}" "$Reset"
	fi
}
