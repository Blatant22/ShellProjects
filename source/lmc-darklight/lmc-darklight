#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/lmc-darklight
#------------------------------------------------------------------------------
# Project Name      - Extra/source/lmc-darklight
# Started On        - Wed 23 Feb 21:40:31 GMT 2022
# Last Change       - Sat 26 Feb 03:19:51 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# This seems to be an oft-requested feature in Linux Mint, so I thought I'd
# have a bash (pun intended) at writing something which will effectively work
# as a daemon to auto-set values based on the time of day.
#
# This is strictly for Linux Mint Cinnamon.
#
# Features:
#
#TODO: Add original values to a file. Currently, it's output only.
#TODO: If configuration key is equal to null, ignore it.
#TODO: Don't exit out of main loop of errors.
#TODO: Incorporate notify-send(1).
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.4.20)
#   coreutils (>= 8.28)
#   libglib2.0-bin (>= 2.56.4)
#------------------------------------------------------------------------------

CurVer='2022-02-26'
Progrm='lmc-darklight'
ProgrmFancy='LMC-DarkLight'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --genconfig              - Generate new configuration file.
		  -f, --force              - Bypass LSB and DE detection.
		  -o, --once               - Only run $ProgrmFancy once.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

MainDir="$HOME/.config/$Progrm"
Config="$MainDir/config"
OldValues="$MainDir/old_values"

ValidKeys=(
		LightCursor LightDesktop DarkBorders DarkIcons DarkControls\
		Interval LightTime DarkTime LightBorders LightIcons LightControls\
		DarkCursor DarkDesktop LightBG DarkBG
)

while [[ -n $1 ]]; do
	case $1 in
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--force|-f)
			Force='True' ;;
		--genconfig)
			NewConfig='True' ;;
		--once|-o)
			Once='True' ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

(( UID == 0 )) && Err 1 "Do not run as 'root' user."

for Dep in mkdir gsettings sleep; do
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
done

(( DepCount > 0 )) && exit 1

[[ -d $MainDir ]] || mkdir -p "$MainDir"

#-------------------------------------------------Check for Linux Mint Cinnamon

if [[ $Force != True ]]; then
	OSRelease='/etc/os-release'
	if [[ -f $OSRelease && -r $OSRelease ]]; then
		while IFS='=' read Key Value; do
			if [[ $Key == NAME ]]; then
				if [[ $Value == '"Linux Mint"' ]]; then
					MintFound='True'
					break
				fi
			fi
		done < "$OSRelease"

		if [[ $MintFound != True ]]; then
			Err 0 'Unable to detect a running Linux Mint system.'
			(( SysErr++ ))
		fi

		if ! type -P cinnamon &> /dev/null; then
			Err 0 'Unable to detect the Cinnamon desktop environment.'
			(( SysErr++ ))
		fi
	else
		Err 1 'Unable to determine distribution.'
	fi

	(( SysErr > 0 )) && exit 1
fi

#-----------------------------------------------Generate New Configuration File

if [[ $NewConfig == True ]]; then
	read -d '' <<-EOF
		# $ProgrmFancy configurations for Linux Mint Cinnamon.

		# How often to check the time and set the themes.
		Interval=60

		# The time to start light/dark theme. Time is in 24hr. Do not zero-pad the
		# numbers. 6am is 600 not 0600 or 06:00. Do not include the colon.
		LightTime=600
		DarkTime=2000

		# Dark and light themes, relative to \`cinnamon-settings startup\`.
		LightBorders='Mint-Y'
		LightIcons='Mint-Y-Blue'
		LightControls='Mint-Y'
		LightCursor='DMZ-White'
		LightDesktop='Mint-Y'
		DarkBorders='Mint-Y'
		DarkIcons='Mint-Y-Dark-Red'
		DarkControls='Mint-Y-Dark-Red'
		DarkCursor='DMZ-Black'
		DarkDesktop='Mint-Y-Dark-Red'

		# Absolute paths to the light and dark backgrounds.
		LightBG='/usr/share/backgrounds/linuxmint/sele_ring_green.jpg'
		DarkBG='/usr/share/backgrounds/linuxmint/default_background.jpg'
	EOF

	printf '%s' "$REPLY" > "$Config"
	exit 0
fi

#-------------------------------------------------Fetch the Current Theme Names

Get() {
	read <<< "$(gsettings get "$2" "$3")"
	if [[ $3 == picture-uri ]]; then
		REPLY="'${REPLY#\'file:\/\/}"
	fi

	printf '%s=%s\n' "$1" "$REPLY"
}

printf 'Current values...\n'
Get Borders org.cinnamon.desktop.wm.preferences theme
Get Icons org.cinnamon.desktop.interface icon-theme
Get Controls org.cinnamon.desktop.interface gtk-theme
Get Cursor org.cinnamon.desktop.interface cursor-theme
Get Desktop org.cinnamon.theme name
Get BG org.cinnamon.desktop.background picture-uri

#------------------------Process the Configuration File and Begin the Main Loop

Info() {
	printf "Setting %b ... " "$1"

	IFS="'" read _ Value _ <<< "$(gsettings get ${1/\// })"
	if [[ $2 == $Value ]]; then
		printf '[\e[92mOK\e[0m]\n'
	else
		printf '[\e[91mERR\e[0m]\n'
	fi
}

ChkTime() {
	[[ $1 == 0* ]] && return 1
	[[ $1 =~ ^[[:digit:]]{3,4}$ ]] || return 1
}

Set() {
	gsettings set org.cinnamon.theme name "$1"
	Info 'org.cinnamon.theme/name' "$1"

	gsettings set org.gnome.desktop.interface gtk-theme "$1"
	Info 'org.gnome.desktop.interface/gtk-theme' "$1"

	gsettings set org.cinnamon.desktop.interface gtk-theme "$2"
	Info 'org.cinnamon.desktop.interface/gtk-theme' "$2"

	gsettings set org.gnome.desktop.interface icon-theme "$3"
	Info 'org.gnome.desktop.interface/icon-theme' "$3"

	gsettings set org.cinnamon.desktop.interface icon-theme "$3"
	Info 'org.cinnamon.desktop.interface/icon-theme' "$3"

	gsettings set org.cinnamon.desktop.interface cursor-theme "$4"
	Info 'org.cinnamon.desktop.interface/cursor-theme' "$4"

	gsettings set org.gnome.desktop.interface cursor-theme "$4"
	Info 'org.gnome.desktop.interface/cursor-theme' "$4"

	gsettings set org.cinnamon.desktop.wm.preferences theme "$5"
	Info 'org.cinnamon.desktop.wm.preferences/theme' "$5"

	gsettings set org.gnome.desktop.wm.preferences theme "$5"
	Info 'org.gnome.desktop.wm.preferences/theme' "$5"

	gsettings set org.cinnamon.desktop.background picture-uri "file://$6"
	Info 'org.cinnamon.desktop.background/picture-uri' "file://$6"
}

while :; do
	printf 'Loop #%d ...\n' $(( ++Iter ))

	# Read and verify the configuration file.
	VErrs=0
	InvalidKeys=0
	if ! [[ -f $Config ]]; then
		Err 0 "File '$Config' not found."
	elif ! [[ -r $Config ]]; then
		Err 0 "File '$Config' unreadable."
	else
		VErr() {
			Err 0 "$1"
			(( VErrs++ ))
		}

		while IFS='=' read Key Value; do
			[[ $Key == \#* || -z $Key ]] && continue
			Value=${Value//[\"\']}

			Found='False'
			for Valid in "${ValidKeys[@]}"; {
				if [[ $Key == $Valid ]]; then
					Found='True'
					break
				fi
			}

			if [[ $Found == True ]]; then
				printf "Found key: %s\n" "$Key"
				declare $Key="$Value"
			else
				Err 0 "Key '$Key' invalid."
				(( InvalidKeys++ ))
			fi
		done < "$Config"

		ChkTime "$LightTime" || VErr "Value for 'LightTime' invalid."
		ChkTime "$DarkTime" || VErr "Value for 'DarkTime' invalid."

		for Value in {Light,Dark}{Desktop,Controls,Icons,Cursor,Borders,Time,BG}; {
			[[ -z ${!Value} ]] && VErr "Value for '$Value' not set."
		}

		if ! [[ -f $LightBG ]]; then
			VErr "File for key 'LightBG' not found."
		elif ! [[ -r $LightBG ]]; then
			VErr "File for key 'LightBG' unreadable."
		fi

		if ! [[ -f $DarkBG ]]; then
			VErr "File for key 'DarkBG' not found."
		elif ! [[ -r $DarkBG ]]; then
			VErr "File for key 'DarkBG' unreadable."
		fi
	fi

	# Begin the main loop.
	if (( VErrs == 0 && InvalidKeys == 0 )); then
		printf -v Time '%(%k%M)T' -1
		if (( Time >= LightTime && Time < DarkTime )); then
			Set "$LightDesktop" "$LightControls" "$LightIcons"\
				"$LightCursor" "$LightBorders" "$LightBG"
		elif (( Time >= DarkTime || Time < LightTime )); then
			Set "$DarkDesktop" "$DarkControls" "$DarkIcons"\
				"$DarkCursor" "$DarkBorders" "$DarkBG"
		fi
	fi

	[[ $Once == True ]] && exit 0

	sleep ${Interval}s
done
