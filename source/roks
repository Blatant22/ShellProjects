#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/roks
#------------------------------------------------------------------------------
# Project Name      - Extra/source/roks (inspired by purge-old-kernels)
# Started On        - Sun 17 Sep 23:32:47 BST 2017
# Last Change       - Thu 16 Dec 00:06:33 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   apt (>= 1.6.12)
#   bash (>= 4.3-14)
#   coreutils (>= 8.28)
#   linux-base (>= 4.5)
#------------------------------------------------------------------------------

CurVer='2021-12-16'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -p, --purge              - Don't just remove, but purge the kernels.
		  -t, --type [TYPE]        - Work with TYPE kernels. Any by default.
		  -k, --keep [INT]         - Keep INT number of kernels, instead of 1.

		  Written as an improvement over the now-deprecated script called
		  'purge-old-kernels' found in the byobu package. This small program
		  will clear out your system of old kernel versions on an Ubuntu- or
		  Debian-based system.

		  Unrecognised short or long flags will be passed to apt or apt-get.

		  As of 2019-03-31, $Progrm no longer supports handling older kernel
		  versions in Debian- or Ubuntu-based systems. I recommend taking extra
		  care when using $Progrm on systems with kernels older than 4.15; it
		  might work, but not necessarily as intended.
	EOF
}

Err(){
	printf 'Err: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

declare -i KernKeep=2

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"
			exit 0 ;;
		--keep|-k)
			shift

			if [[ $1 =~ ^[0-9]+$ ]]; then
				if [ $1 -eq 0 ]; then
					Err 1 'Invalid number of kernels selected.'
				else
					KernKeep=$1
				fi
			else
				Err 1 'Invalid expression specified.'
			fi ;;
		--type|-t)
			shift; KernType="-$1" ;;
		--purge|-p)
			DoPurge='--purge' ;;
		-*|--*)
			AptGetOpts+=" $1" ;;
		*)
			Err 1 "Incorrect argument(s) provided." ;;
	esac
	shift
done

declare -i DepCount=0
for CurDep in uname apt-get linux-version; {
	if ! type -P "$CurDep" > /dev/null 2>&1; then
		Err 0 "Dependency '$CurDep' not met."
		DepCount+=1
	fi
}

[ $DepCount -eq 0 ] || exit 1

[ "$DebugMe" == 'true' ] && set -x

if [ -f /proc/version -a -r /proc/version ]; then
	read -a VerStr < /proc/version
	CurKern="${VerStr[2]}"
elif ! type -P uname > /dev/null 2>&1; then
	CurKern=`uname -r`
else
	Err 1 "Unable to determine current kernel version."
fi

if ! [ $UID -eq 0 ]; then
	Err 1 "Root access is required for system-wide changes."
fi

KernKeep+=2
KernList=`linux-version list`
if ! [ "$KernList" ]; then
	Err 1 "No kernels were found."
elif ! [ "$KernList" ]; then
	Err 1 "No kernels were selected for removal."
else
	declare -a KernRemove=()
	for CurIter in $KernList; {
		if ! [ "$CurIter" == "$CurKern" ]; then
			KernRemove+=" ${CurIter%-*}$KernType "
		fi
	}

	apt-get $AptGetOpts -o Dpkg::Progress=true\
		-o Dpkg::Progress-Fancy=true remove $DoPurge ${KernRemove[@]}

	if [ $? -ne 0 ]; then
		Err 1 'Non-zero exit status while removing old kernels.'
	fi
fi
