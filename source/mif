#!/bin/bash
#cito M:755 O:0 G:0 T:/usr/bin/mif
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/mif (Movie Index Filter)
# Started On        - Fri 13 Oct 13:21:13 BST 2017
# Last Change       - Fri  6 Dec 22:52:20 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-12-06"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

DOM="https://github.com"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - Movie Index Filter ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Shell program to filter films by year and whether seen or not.

		SYNTAX:     $_PROJECT_ [OPTS] [YEAR]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --file|-f FILE          - Use FILE path instead of the saved path.
		            --seen|-s               - Filter by movies marked as seen.
		            --unseen|-u             - The default. Works opposite to the above.
		            --all|-a                - Display all films; disregard filters.
		            --total|-t              - Output the total number of matches.
		            --mark M                - Where M is - or + for whether seen or not.
		            --organize|-O           - Organise files in the CWD by year. This
		                                      This has the potential to be destructive!
		            --mklist|-M[:N]         - Output a ${_PROJECT_}-usable movie list from CWD.
		                                      If :N is appended, then omit [+] and [-].

		NOTE:       The file which $_PROJECT_ parses must be in a strict layout in order for
		            $_PROJECT_ to work correctly. An example of such a file's contents:

		              # Comment lines will be ignored.
		              1972[+]: The Godfather
		              1974[+]: The Godfather - Part II
		              1974[+]: Dog Day Afternoon
		              1992[+]: Alien 3
		              1993[+]: Carlito's Way
		              1993[-]: The Fugitive
		              1994[+]: Clear and Present Danger
		              1994[+]: Jack Dee: Live at the London Palladium

		            Where + is unseen (new) and - is seen.

		FILE:       Default is $HOME/.$_PROJECT_ but use --file|-f FILE to specify your own.

		SITE:       $DOM/terminalforlife/Extra
	EOF
}

if [ "${BASH_VERSINFO[0]}" -ge 4 ]; then
	shopt -s extglob globstar
else
	Err 1 $LINENO "Bash version 4.0 or greater is required."
fi

INDEX="$HOME/.$_PROJECT_"
SEEN='false'
TTL='false'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--debug|-D)
			DEBUGME='true' ;;
		--mklist|-M)
			shift; MAKE_LIST_OPT=":[+]" ;;
		--mklist:N|-M:N)
			shift; MAKE_LIST_OPT=":" ;;
		--file|-f)
			shift; INDEX="$1" ;;
		--all|-a)
			SEEN="all" ;;
		--mark)
			shift; MARK="$1" ;;
		--organize|-O)
			ORGANIZE='true' ;;
		--total|-t)
			TTL='true' ;;
		--seen|-s)
			SEEN='true' ;;
		--unseen|-u)
			SEEN='false' ;;
		*)
			break ;;
	esac
	shift
done

declare -i DEPCOUNT=0
for DEP in mkdir mv; {
	if ! type -fP "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

if [[ $MAKE_LIST_OPT =~ (:|:\[+\]) ]]; then
	for FILE in **; {
		[ -f "$FILE" ] || continue
		IFS="/" read -a X <<< "${FILE% (*}"
		printf "%s%s: %s\n" "${X[0]}" "${MAKE_LIST_OPT#:}" "${X[1]}"
	}

	exit 0
fi

if ! [ "$ORGANIZE" == 'true' ]; then
	if [[ $1 =~ ^[0-9]+$ ]]; then
		YEAR="$1"; shift
	else
		if ! [ "$SEEN" == "all" ]; then
			Err 1 $LINENO "Invalid year specified."
		fi
	fi
fi

[ "$*" ] && Err 1 $LINENO "Incorrect argument(s) specified."

[ "$DEBUGME" == 'true' ] && set -x

if [ "$ORGANIZE" == 'true' ]; then
	for X in *; {
		Y=${X//*\(}

	 [[ ${Y%\)*} =~ ^[0-9]+$ ]] || continue

		if mkdir "${Y%\)*}"; then
			printf "%s\n" "MAKE: ${Y%\)*}"
		else
			printf "%s\n" "Err: ${Y%\)*}"
		fi

		if mv "$X" ${Y%\)*}/; then
			printf "%s\n" "MOVE: ${Y%\)*}/${X//*\/}"
		else
			printf "%s\n" "Err: ${Y%\)*}/${X//*\/}"
		fi
	}

	exit 0
fi

[ -f "$INDEX" ] || Err 1 $LINENO "Index file '$INDEX' not found."

declare -i LINE=0
while read -r; do
	{ [[ $REPLY == +(#)* ]] || [ -z "$REPLY" ]; } && continue
	if [ "$SEEN" == 'false'  ]; then
		if [[ $REPLY == $YEAR\[\+\]:\ * ]]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	elif [ "$SEEN" == 'true'  ]; then
		if [[ $REPLY == $YEAR\[\-\]:\ * ]]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	elif [ "$SEEN" == "all"  ]; then
		printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
		LINE+=1
	fi
done < "$INDEX"

[ $LINE -eq 0 ] && Err 1 $LINENO "Unable to find year $YEAR."
[ "$TTL" == 'true' ] && printf "\nTotal: %d\n" "$LINE"

