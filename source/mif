#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/mif
#------------------------------------------------------------------------------
# Project Name      - ShellProjects/source/mif
# Started On        - Fri 13 Oct 13:21:13 BST 2017
# Last Change       - Mon 19 Jun 23:34:57 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------

CurVer='2023-06-15'
Progrm=${0##*/}

Usage(){
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [YEAR]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  --mklist[:{+|-}]         - Output a ${Progrm^^}-usable list from CWD.
		  -O, --organize           - Attempt to organise files in CWD by year.
		  -a, --all                - Display films; disregard filters.
		  -f, --file FILE          - Override saved path with FILE.
		  -s, --seen               - Filter by movies marked as seen.
		  -t, --total              - Output total number of matches.
		  -u, --unseen             - Default. Works opposite to above.

		  The file which $Progrm parses must be in a strict layout in order for
		  $Progrm to work correctly. An example of such a file's contents:

		    # Comment lines will be ignored.
		    1972[+]: The Godfather
		    1992[+]: Alien 3
		    1994[+]: Clear and Present Danger
		    1994[+]: Jack Dee: Live at the London Palladium

		  Default index file is '~/.$Progrm', but can be easily overridden.
	EOF

	printf '%s' "$REPLY"
}

Err(){
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

if (( ${BASH_VERSINFO[0]} >= 4 )); then
	shopt -s extglob globstar
else
	Err 1 "Bash version 4.0 or greater is required."
fi

MovieIndex="$HOME/.$Progrm"
Seen='False'
Total='False'

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--mklist|-M)
			shift; MakeListOpt=':[+]' ;;
		--mklist:N|-M:N)
			shift; MakeListOpt=':' ;;
		--file|-f)
			shift; MovieIndex=$1 ;;
		--all|-a)
			Seen='all' ;;
		--organize|-O)
			Organise='True' ;;
		--total|-t)
			Total='True' ;;
		--seen|-s)
			Seen='True' ;;
		--unseen|-u)
			Seen='False' ;;
		*)
			break ;;
	esac
	shift
done

DepCount=0
for Dep in mkdir mv; {
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
}

(( DepCount == 0 )) || exit 1

case $MakeListOpt in
	:|:\[+\])
		for FILE in **; {
			[[ -f $FILE ]] || continue
			IFS='/' read -a X <<< "${FILE% (*}"
			printf '%s%s: %s\n' "${X[0]}" "${MakeListOpt#:}" "${X[1]}"
		}

		exit 0 ;;
esac

if [[ $Organise != True ]]; then
	if [[ $1 =~ ^[[:digit:]]+$ ]]; then
		Year=$1; shift
	else
		if ! [[ $Seen == all ]]; then
			Err 1 "Invalid year specified."
		fi
	fi
fi

(( $# > 0 )) && Err 1 "Incorrect argument(s) specified."

if [[ $Organise == True ]]; then
	for X in *; {
		Y=${X//*\(}

		[[ ${Y%\)*} == +([[:digit:]]) ]] || continue

		if mkdir "${Y%\)*}"; then
			printf '%s\n' "MAKE: ${Y%\)*}"
		else
			printf '%s\n' "Err: ${Y%\)*}"
		fi

		if mv "$X" ${Y%\)*}/; then
			printf '%s\n' "MOVE: ${Y%\)*}/${X//*\/}"
		else
			printf '%s\n' "Err: ${Y%\)*}/${X//*\/}"
		fi
	}

	exit 0
fi

[[ -f $MovieIndex ]] || Err 1 "Index file '$MovieIndex' not found."

declare -i Line=0
while read -r; do
	{ [[ $REPLY == +(#)* ]] || [ -z "$REPLY" ]; } && continue

	if [[ $Seen == False  ]]; then
		if [[ $REPLY == $Year\[\+\]:\ * ]]; then
			printf '%s\n' "${REPLY/+([[:digit:]])\[?\]: }"
			Line+=1
		fi
	elif [[ $Seen == True ]]; then
		if [[ $REPLY == $Year\[\-\]:\ * ]]; then
			printf '%s\n' "${REPLY/+([[:digit:]])\[?\]: }"
			Line+=1
		fi
	elif [[ $Seen == all ]]; then
		printf '%s\n' "${REPLY/+([[:digit:]])\[?\]: }"
		Line+=1
	fi
done < "$MovieIndex"

[[ $Line -eq 0 ]] && Err 1 "Unable to find year $Year."

if [[ $Total == True ]]; then
	printf '\nTotal: %d\n' "$Line"
fi
