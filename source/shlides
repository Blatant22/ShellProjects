#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/shlides
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/shlides
# Started On        - Sun 17 Nov 16:27:40 GMT 2019
# Last Change       - Sat 21 Dec 18:47:13 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Some fonts which work well with shlides are FreeMono, Monospace, and Oxygen Mono.
#----------------------------------------------------------------------------------

CurVer='2019-12-21'
Progrm=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -gt 0 ] && exit $1
}

Domain="https://github.com"

Usage(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Present a project on your terminal via formatted slides.

		SYNTAX:     $Progrm [OPTS] FILE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --update|-U             - Check for updates to $Progrm.
		            --debug|-D              - Enables the built-in bash debugging.
		            --interactive|-i        - Wait for the user to press a key.
		            --no-header             - Omit the header from each slide.
		            --no-footer             - Omit the footer from each slide.
		            --effect|-e             - Apply a downward sweeping effect.
		            --espeed|-S N           - Change the speed of the effect to N.
		            --borders|-b            - Pretty borders around the header.
		            --bstyle|-B STYLE       - Select the border STYLE to use.
		            --ascii|-A              - Interface uses only ASCII characters.
		            --wait|-w INT           - Wait INT second(s) between slides.
		            --skip-start|-s         - Skip the message at project start.

		BORDER:     The border styles, shown using ASCII, currently available:

		              'default'

		                 +-------------------------------------------------------+
		                 |                       'header'                        |
		                 +-------------------------------------------------------+

		                 +-------------------------------------------------------+
		                 | footer left                              footer right |
		                 +-------------------------------------------------------+

		              'oneline'

		                 ----------------------| 'header' |-----------------------

		                 --| footer left |----------------------| footer right |--

		            Border styles do not impact the position of the slide body, in
		            order to keep things as consistent as possible.

		NOTE:       The '--espeed|-S' option supports floating-point numbers, -
		            should you want a finer adjustment. Set to 0.03, by default.

		SITE:       $Domain/terminalforlife/Extra
	EOF
}

#		            --escape|-E             - Allow terminal escape sequences.

BorderStyle='default'
WaitTime=1
EffectDelay=0.03

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--update|-U)
			DoUpdate='true' ;;
		--debug|-D)
			DebugMe='true' ;;
		--interactive|-i)
			Interactive='true' ;;
		--no-header)
			NoHeader='true' ;;
		--no-footer)
			NoFooter='true' ;;
		--effect|-e)
			DoEffect='true' ;;
		--espeed|-S)
			shift

			if [[ $1 =~ ^([0-9]+|[0-9]+\.[0-9]+)$ ]]; then
				EffectDelay=$1
			else
				Err 1 $LINENO "Specified effect speed is invalid."
			fi ;;
		--borders|-b)
			Borders='true' ;;
		--bstyle|-B)
			shift

			case $1 in
				default|oneline) BorderStyle=$1 ;;
				*) Err 1 $LINENO "Unrecognised border style." ;;
			esac ;;
		--ascii|-A)
			DoASCII='true' ;;
		--wait|-w)
			shift

			if [[ $1 =~ ^([0-9]+|[0-9]+\.[0-9]+)$ ]]; then
				WaitTime=$1
				DoWait='true'
			else
				Err 1 $LINENO "Specified wait time is invalid."
			fi ;;
		--skip-start|-s)
			SKIPSTART='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

#		--escape|-E)
#			ESCAPE='true' ;;

if [ "$DoWait" == 'true' -a "$Interactive" == 'true' ]; then
	Err 1 $LINENO "Either '--wait|-w' or '--interactive|-i', not both."
elif [ "$Borders" == 'true' ]; then
	if [ "$NoHeader" == 'true' -a "$NoFooter" == 'true' ]; then
		Err 1 $LINENO "Option '--borders|-b' used but header and footer disabled."
	fi
fi

if ! type -fP tput > /dev/null 2>&1; then
	Err 0 $LINENO "Dependency 'tput' not met."
else
	if [ -t 1 ]; then
		declare -i NumberofColors=`tput colors`
		[ ${NumberofColors:-0} -gt 8 ] && ColorsSupported='true'
	fi
fi

if [ "$DoUpdate" == 'true' ]; then
	if ! type -fP wget > /dev/null 2>&1; then
		Err 1 $LINENO "Dependency 'wget' not met."
	fi

	VerURL="$Domain/terminalforlife/Extra/raw/master/versions"
	while IFS='=' read -a CurLine; do
		if [ "${CurLine[0]}" == "$Progrm" ]; then
			NewVer=${CurLine[1]}
			if [[ ${NewVer//-} =~ ^[0-9]{8}$ ]]; then
				if [ ${NewVer//-} -gt ${CurVer//-} ]; then
					while read -r; do
						printf "%s\n" "$REPLY"
					done <<-EOF
						New version available:    $NewVer
						Current version:          $CurVer
					EOF
				fi
			else
				Err 1 $LINENO "Failed to check for available updates."
			fi
		fi
	done <<< "$(wget -q "$VerURL" -O -)"

	exit 0
fi

if [ -z "$1" ]; then
	Err 1 $LINENO "A project file wasn't provided."
elif [ -f "$1" ] && [ -r "$1" ]; then
	ProjectFile=$1; shift

	[ $# -gt 0 ] && Err 1 $LINENO "Only one project may run at a time."
else
	Err 1 $LINENO "Project file missing or unreadable."
fi

[ "$DebugMe" == 'true' ] && set -x

tput smcup
tput civis

trap 'tput rmcup; tput cnorm; exit 130' ABRT QUIT INT EXIT STOP

# This is more of a placeholder for future use, but is somewhat used.
if [ "$ColorsSupported" == 'true' ]; then
	CRed=`tput setaf 1`; CGreen=`tput setaf 2`; CBold=`tput bold`
	CWhite=`tput setaf 7`; CYellow=`tput setaf 3`; CGrey=`tput setaf 0`
	CNorm=`tput cnorm`
fi

if ! [ "$DoASCII" == 'true' ]; then
	BP='⟐' # <-- Non-ASCII Bullet Point.
	SBL='│' # <-- Non-ASCII Side Border. (Left-Lean)
	SBR='│' # <-- Non-ASCII Side Border. (Right-Lean)
	UL='┌' # <-- Non-ASCII Upper-left corner.
	UR='┐' # <-- Non-ASCII Upper-right corner.
	LL='└' # <-- Non-ASCII Lower-left corner.
	LR='┘' # <-- Non-ASCII Lower-right corner.
	NB='─' # <-- Non-ASCII Normal Bar.
else
	BP='*' # <-- ASCII Bullet Point.
	SBL='|' # <-- Non-ASCII Side Border. (Left-Lean)
	SBR='|' # <-- Non-ASCII Side Border. (Right-Lean)
	UL='+' # <-- ASCII Upper-left corner.
	UR='+' # <-- ASCII Upper-right corner.
	LL='+' # <-- ASCII Lower-left corner.
	LR='+' # <-- ASCII Lower-right corner.
	NB='-' # <-- ASCII Normal Bar.
fi

PAKtoC(){
	read -sn 1
	printf "\n"
}

WinWinch(){
	Cols=`tput cols`
	Lines=`tput lines`
}

WinWinch

# Ensure column and line counts are updated, even after window resizing.
trap 'WinWinch' WINCH

LongLine(){
	printf "%s" "$1"
	for ((I=3; I<=Cols; I++)); { printf "%s" "$2"; }
	printf "%s" "$3"
}

Header(){
	Title="'${2//_/ }'"

	if [ "$Borders" == 'true' ]; then
		if [ "$BorderStyle" == 'oneline' ]; then
			tput cup 1 0
			for ((I=0; I<Cols; I++)); {
				printf "%s" "$NB"
			}

			Title="$SBL '${2//_/ }' $SBR"
		fi
	fi

	TitleTest=${2//_/ }

	if [ -n "$TitleTest" ]; then
		TitleHalf=$[${#Title} / 2]
		if [ "$Borders" == 'true' ]; then
			if [ "$BorderStyle" == 'default' ]; then
				tput home
				LongLine "$UL" "$NB" "$UR"

				tput cup 1 0
				printf "%s" "$SBL"

				tput cup 1 3
				printf "%*s" $[((Cols / 2) + TitleHalf) - 4] "$Title"

				tput cup 1 $[Cols - 1]
				printf "%s" "$SBR"

				tput cup 2 0
				LongLine "$LL" "$NB" "$LR"
			elif [ "$BorderStyle" == 'oneline' ]; then
				tput cup 1 $[((Cols / 2) - TitleHalf) - 1]
				printf "%s" "$Title"
			fi
		else
			tput cup 1 $[(Cols / 2) - $[TitleHalf + 2]]
			printf "%s" "$Title"
		fi
	else
		tput ed; tput rmcup; printf "\n"
		Err 1 $LINENO "Slide #${SlideNumber:-?} has no header title."
	fi
}

CursorDown(){ tput cup ${1:-$Lines} ${2:-$Cols}; }

Footer(){
	if [ "$Borders" == 'true' ]; then
		if [ "$Borders" == 'true' ]; then
			if [ "$BorderStyle" == 'default' ]; then
				FooterTextLeft="FILE: '${ProjectFile##*/}' $BP SLIDE: $SlideNumber"
				FooterTextRight="TERM: L$Lines C$Cols $BP HOST: $HOSTNAME"

				if [ $[${#FooterTextLeft} + ${#FooterTextRight}] -lt $[Cols - 10] ]; then
					tput cup $[Lines - 3] 0
					LongLine "$UL" "$NB" "$UR"

					tput cup $[Lines - 2] 0
					printf "%s" "$SBL"

					tput cup $[Lines - 2] 2
					printf "$FooterTextLeft"

					tput cup $[Lines - 2] $[Cols - (${#FooterTextRight} + 2)]
					printf "$FooterTextRight"

					tput cup $[Lines - 2] $[Cols + 2]
					printf "%s" "$SBR"

					tput cup $Lines 0
					LongLine "$LL" "$NB" "$LR"
				else
					tput ed; tput rmcup; printf "\n"
					Err 1 $LINENO "Insufficent space for the footer."
				fi
			elif [ "$BorderStyle" == 'oneline' ]; then
				tput cup $[$Lines - 2] 0
				for ((I=0; I<Cols; I++)); {
					printf "%s" "$NB"
				}

				FooterTextLeft="$SBL FILE: '${ProjectFile##*/}' $BP SLIDE: $SlideNumber $SBR"
				FooterTextRight="$SBL TERM: L$Lines C$Cols $BP HOST: $HOSTNAME $SBR"

				if [ $[${#FooterTextLeft} + ${#FooterTextRight}] -lt $[Cols - 10] ]; then
					tput cup $[$Lines - 2] 2
					printf "$FooterTextLeft"
					tput cup $[$Lines - 2] $[(Cols - ${#FooterTextRight}) - 2]
					printf "$FooterTextRight"
				else
					tput ed; tput rmcup; printf "\n"
					Err 1 $LINENO "Insufficent space for the footer."
				fi

			fi
		fi
	else
		FooterTextLeft="FILE: '${ProjectFile##*/}' $BP SLIDE: $SlideNumber"
		FooterTextRight="TERM: L$Lines C$Cols $BP HOST: $HOSTNAME"

		if [ $[${#FooterTextLeft} + ${#FooterTextRight}] -lt $[Cols - 10] ]; then
			tput cup $[$Lines - 2] 2
			printf "$FooterTextLeft"

			tput cup $[$Lines - 2] $[(Cols - ${#FooterTextRight}) - 2]
			printf "$FooterTextRight"
		else
			tput ed; tput rmcup; printf "\n"
			Err 1 $LINENO "Insufficent space for the footer."
		fi
	fi
}

tput clear

# Short, optional introduction of shlides.
if ! [ "$SKIPSTART" == 'true' ]; then
	tput cup $[(Lines / 2) - 2]
	Text="Presentation created with $Progrm, version $CurVer."
	printf "${CRed}%*s${CWhite}" $[(Cols / 2) + (${#Text} / 2)] "$Text"

	tput cup $[(Lines / 2) - 1]
	Text="Written by 'terminalforlife', also known as 'Learn Linux'."
	printf "${CYellow}%*s${CWhite}" $[(Cols / 2) + (${#Text} / 2)] "$Text"

	tput cup $[(Lines / 2) + 0]
	Text="Licensed under the 'GNU General Public License v3.0'."
	printf "${CYellow}%*s${CWhite}" $[(Cols / 2) + (${#Text} / 2)] "$Text"

	tput cup $[(Lines / 2) + 2]
	Text="https://github.com/terminalforlife"
	printf "${CWhite}%*s${CWhite}" $[(Cols / 2) + (${#Text} / 2)] "$Text"
fi

# Output and parse lines of body.
FirstLineFromBuffArr='false'
readarray BuffArr < "$ProjectFile"
for L in "${BuffArr[@]%$'\n'}"; {
	WinWinch

	if [ "$DoSkipSlide" == 'true' ] || [[ $L == \#\ * ]]; then
		continue
	elif [[ $L =~ ^###\  ]]; then
		if [ "$FirstLineFromBuffArr" == 'true' ]; then
			FirstLineFromBuffArr='true'
		else
			CursorDown
			unset FirstLineFromBuffArr
		fi

		if [ -n "$OldLine" ]; then
			tput ed; tput rmcup; printf "\n"
			Err 1 $LINENO "Line '$BodyLines' is non-empty."
		fi

		if [ "$Interactive" == 'true' ]; then
			PAKtoC
		else
			sleep ${WaitTime}s
		fi

		tput clear

		MainLines=1
		BodyLines=0
	fi

	#printf "M%d:" "$MainLines"
	if [ $MainLines -eq 1 ]; then
		# Gather header commands (key=value), and catch errors.
		FieldCount=0
		for Field in $L; {
			let FieldCount++

			if [ ! "$HeaderPrefixFound" == 'true' -a "$Field" == '###' ]; then
				HeaderPrefixFound='true'
				continue
			elif [ "$HeaderPrefixFound" == 'true' -a "$Field" == '###' ]; then
				tput ed; tput rmcup; printf "\n"
				Err 1 $LINENO "Only one header prefix is required."
			else
				unset HeaderPrefixFound
			fi

			if [[ $Field == *=* ]]; then
				IFS='=' read -a FieldArray <<< "$Field"

				if [ "${FieldArray[0]}" == "SLIDE" ]; then
					SlideNumber=${FieldArray[1]}
				elif [ "${FieldArray[0]}" == "TITLE" ]; then
					SlideTitle=${FieldArray[1]//\"}
				else
					tput ed; tput rmcup; printf "\n"
					Err 1 $LINENO "Invalid header command at field $FieldCount."
				fi
			else
				tput ed; tput rmcup; printf "\n"
				Err 1 $LINENO "Invalid header field at position $FieldCount."
			fi
		}

		# Actually display the header, based on `*.shl` header commands.
		if [ "$NoHeader" == 'true' ]; then
			# If disabled, just ensure a blank line for tidiness.
			printf "\n"
		else
			Header $SlideNumber "$SlideTitle"
		fi

		[ "$NoFooter" == 'true' ] || Footer
		CursorDown 4 0
	elif [ $MainLines -eq 2 ]; then
		if [ -n "$L" ]; then
			tput ed; tput rmcup; printf "\n"
			Err 1 $LINENO "Line 2 is non-empty."
		fi
	elif [ $MainLines -gt 2 ]; then
		# Display the body of the current slide.
		if ! [ ${#L} -gt $[Cols - 5] ]; then
			if [ $BodyLines -gt $[Lines - 9] ]; then
				tput ed; tput rmcup
				Err 1 $LINENO "Line overflow detected on slide #$SlideNumber."
			fi

			[ "$DoEffect" == 'true' ] && sleep $EffectDelay

			# Need both values for comparison to compensate for weird alignment
			# when escape sequences are used (at least for color). This mainly or
			# only affects the center alignment.
			#printf -v LNoTrail "%b" "${L%%[[:space:]]}"
			#declare -i LNoTrailLen_B=${#LNoTrail}
			printf -v LNoTrail "%s" "${L%%[[:space:]]}"
			#declare -i LNoTrailLen_S=${#LNoTrail}
			#declare -i EscDiff=$[LNoTrailLen_S - LNoTrailLen_B]

			LNoSpace=${LNoTrail##[[:space:]]}
			LHalf=$[${#LNoSpace} / 2]

			#if [ "$ESCAPE" == 'true' ]; then
			#	if [ "${LNoSpace:0:3}" == '<C>' ]; then
			#		tput cuf $[(Cols / 2) - LHalf]
			#		printf "%b\n" "${LNoTrail##<C>}"
			#	elif [ "${LNoSpace:0:3}" == '<R>' ]; then
			#		tput cuf $[Cols - ${#LNoTrail}]
			#		printf "%b\n" "${LNoTrail##<R>}"
			#	else
			#		tput cuf 2
			#		printf "%b\n" "$LNoTrail"
			#	fi
			#else
				if [ "${LNoSpace:0:3}" == '<C>' ]; then
					tput cuf $[(Cols / 2) - (LHalf - 1)]
					printf "%s\n" "${LNoTrail##<C>}"
				elif [ "${LNoSpace:0:3}" == '<R>' ]; then
					tput cuf $[Cols - ${#LNoTrail}]
					printf "%s\n" "${LNoTrail##<R>}"
				else
					tput cuf 2
					printf "%s\n" "$LNoTrail"
				fi
			#fi

			# Show the length of each line, for debugging.
			#printf "${CRed}%-3.d${CWhite}\n" ${#LNoTrail}

			let BodyLines++
			OldLine=$L
		else
			tput ed; tput rmcup; printf "\n"
			Err 1 $LINENO "Line $BodyLines of slide #$SlideNumber is too long."
		fi
	fi

	let MainLines++
}

CursorDown

if [ "$Interactive" == 'true' ]; then
	PAKtoC
else
	sleep ${WaitTime}s
fi
