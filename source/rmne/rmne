#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/rmne
#------------------------------------------------------------------------------
# Project Name      - Extra/source/rmne
# Started On        - Fri  6 Apr 21:27:34 BST 2018
# Last Change       - Tue 11 Feb 03:38:14 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# This program was written (as of 2019-12-03) with Bourne POSIX-compliance in
# mind. Why? For portability and speed -- rmne is at least 3x faster now!
#
# Dependencies:
#
#   apt (>= 1.2.32)
#   coreutils (>= 8.25-2)
#   libtflbp-sh (>= 2019-12-10)
#------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-02-11'
Progrm=${0##*/}

StatusFile='/var/lib/dpkg/status'
AvailFile='/var/lib/dpkg/available'

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\rUsage: $Progrm [OPTS] [PKG_1 [PKG_2] ...]

		\r  -h, --help               - Display this help information.
		\r  -v, --version            - Output the version datestamp.
		\r  --afile PATH             - Override 'available' file.
		\r  --no-purge               - Don't purge remaining files.
		\r  --sfile PATH             - Override 'status' file.
		\r  -l, --list               - List would-be-removed packages.

		\rWhere 'PKG' is one or more packages to hold back.
	EOF
}

Purge='--purge'

ChkDep apt-get && DoAptGet='true'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"
			exit 0 ;;
		--no-purge)
			unset Purge ;;
		--list|-l)
			unset DoAptGet ;;
		--sfile)
			shift; StatusFile=$1 ;;
		--afile)
			shift; AvailFile=$1 ;;
		-*)
			Err 1 "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

if ! [ -f "$StatusFile" -a -r "$StatusFile" ]; then
	Err 1 "File '$StatusFile' missing or inaccessible."
elif ! [ -f "$AvailFile" -a -r "$AvailFile" ]; then
	Err 1 "File '$AvailFile' missing or inaccessible."
elif [ ${UID:-`id -u`} -ne 0 -a "$DoAptGet" = 'true' ]; then
	Err 1 "Root access required for system-wide changes."
fi

if [ "$DoAptGet" = 'true' ]; then
	while read -r CurLine; do
		printf "%b\n" "$CurLine"
	done <<-EOF
		\rWARNING +---------------------------------------------------+ WARNING

		\rThis is a small but dangerous program for the sole purpose of tearing
		\rdown the non-essential packages, for educational, fun, or other
		\rpurposes, such as setting up a specific type of installation.

		\rThis program is ONLY for Debian and Ubuntu, or distributions based
		\rthereon. You'll pretty much be left with just the Debian
		\ressentials, unless your distribution has set some odd packages as
		\ressential, such as in Linux Lite and Linux Mint.

		\rNOTE: You may now wish to download some DEB packages in preperation
		\r      for setting up the system how you want, in-case you're left
		\r      without an Internet connection.

		\rThere is no 'undo' for this action, so it's worth making a backup
		\rbeforehand.

		\rSpecifically, packages to be removed must not:

		\r  1. Have the priority of standard, important, or required.
		\r  2. Be those which are specified as command arguments.
		\r  3. Be part of the minimal task.

		\rWARNING +---------------------------------------------------+ WARNING

	EOF

	printf "[C]ontinue, despite the impending doom, or [q]uit? "
	read Answer
	printf "\n"

	case $Answer in
		[Cc]|[Cc][Oo][Nn][Tt][Ii][Nn][Uu][Ee])
			;;
		[Qq]|[Qq][Uu][Ii][Tt])
			printf "No action taken -- quitting.\n"
			exit 0 ;;
		'')
			printf "No response -- quitting.\n"
			exit 1 ;;
		*)
			printf "Unrecognised response -- quitting.\n"
			exit 1 ;;
	esac
fi

# Fetch a list of packages whose 'Task:' is marked as 'minimal'. (need these)
# This is thankfully not all that slow, unless this file becomes gigantic.
while read Key Value _; do
	case $Key in
		Package:)
			Package=$Value ;;
		Task:)
			[ "$Value" = 'minimal' ] && continue ;;
		''|*)
			continue ;;
	esac

	if ! [ "$Package" = "$OldPackage" ]; then
		Minimals=" $Minimals $Package "
	fi

	OldPackage=$Package
done < "$AvailFile"

# Gather a list of currently installed packages, check they're not set to be
# kept, check their priority is applicable, check they're not marked as being
# essential, and cross-check with prior loop's results to ensure non-minimals.
while read Key Value _; do
	case $Key in
		Package:)
			for CurKeep in "$@"; do
				[ "$Value" = "$CurKeep" ] && continue 2
			done

			Package=$Value ;;
		Essential:)
			[ "$Value" = 'yes' ] && continue ;;
		Status:)
			[ "$Value $_" = 'install ok installed' ] || continue ;;
		Priority:)
			case $Value in
				important|standard|required)
					continue ;;
				*)
					Priority=$Value ;;
			esac ;;
		''|*)
			continue ;;
	esac

	if ! [ "$Package" = "$OldPackage" ]; then
		for CurPKG in $Minimals; do
			[ "$CurPKG" = "$Package" ] && continue 2
		done

		List=" $List $Package "
	fi

	OldPackage=$Package
	unset Package
done < "$StatusFile"

if [ "$DoAptGet" = 'true' ]; then
	apt-get -q -o Dpkg::Progress-Fancy=true --show-progress\
		remove $Purge --autoremove $List
else
	printf "%s\n" $List
fi
