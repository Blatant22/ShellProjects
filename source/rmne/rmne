#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/rmne
#------------------------------------------------------------------------------
# Project Name      - Extra/source/rmne/rmne
# Started On        - Fri  6 Apr 21:27:34 BST 2018
# Last Change       - Fri  2 Jun 18:06:17 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   apt (>= 1.2.32)
#   bash (>= 3.1)
#------------------------------------------------------------------------------

CurVer='2023-06-02'
Progrm='rmne'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [PATTERN [PATTERN] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --include=P[,P ...]      - Include packages of given priority.
		  --no-purge               - Don't purge remaining files.
		  --sfile PATH             - Override 'status' file.
		  -l, --list               - List would-be-removed packages.

		Where PATTERN is a glob pattern for one or more packages to keep. In
		order to specify such packages, the Architecture must be included or
		be taken into account within the pattern.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

StatusFile='/var/lib/dpkg/status'
KeepPriors=(important standard required)

if type -P apt-get &> /dev/null; then
	AptGetFound='True'
	Destroy='True'
fi

Args=()
while [[ -n $1 ]]; do
	case $1 in
		-[^-]*)
			Str=${1#-}
			Len=${#Str}
			for (( Index = 0; Index < Len; Index++ )); {
				Char=${Str:Index:1}
				Args+=(-"$Char")
			} ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

while [[ -n $1 ]]; do
	case $1 in
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--no-purge)
			Purge='remove' ;;
		--list|-l)
			Destroy='False' ;;
		--sfile)
			if [[ -z $2 ]]; then
				Err 1 "Option '$1' requires an argument."
			else
				StatusFile=$2
				shift
			fi ;;
		--include=*)
			IFS=',' read -a Priors <<< "${1#*=}"
			if (( ${#Priors[@]} == 0 )); then
				Err 1 "Option '${1%%=*}=' requires an argument."
			else
				for Priority in "${Priors[@]}"; {
					case $Priority in
						important)
							KeepPriors[0]= ;;
						standard)
							KeepPriors[1]= ;;
						required)
							KeepPriors[2]= ;;
						*)
							Err 1 "Priority '$Priority' invalid." ;;
					esac
				}
			fi ;;
		-*)
			Err 1 "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

if ! [[ -f $StatusFile && -r $StatusFile ]]; then
	Err 1 "File '$StatusFile' missing or inaccessible."
elif (( UID != 0 )) && [[ $Destroy == True ]]; then
	Err 1 "Root access required for system-wide changes."
fi

if [[ $Destroy == True ]]; then
	read -d '' <<-EOF
		WARNING +-----------------------------------------------------+ WARNING

		This is a small but dangerous program for the sole purpose of tearing
		down the non-essential packages and their dependencies. Packages with a
		Priority of 'standard', 'important', or 'required' are ignored, unless
		otherwise specified.

		RMNE is strictly for Debian- and Ubuntu-based distributions of Linux.

		NOTE: You may now wish to prepare for setting up the system how you
		      want, as you will very likely be left without an Internet
		      connection, kernel, bootloader, APT, sudo(8), etc.

		WARNING +-----------------------------------------------------+ WARNING
	EOF

	printf '%s\n' "$REPLY"
	while :; do
		read -p '[C]ontinue, despite the impending doom, or [q]uit? '
		case ${REPLY,,} in
			c|continue)
				break ;;
			q|quit)
				exit 0 ;;
			'')
				Err 0 'Response required -- try again.' ;;
			*)
				Err 0 'Invalid response -- try again.' ;;
		esac
	done
fi

# Gather a list of currently installed packages, check they're not set to be
# kept, check their priority is applicable, check they're not marked as being
# essential, and cross-check with prior loop's results to ensure non-minimals.
while IFS=':' read Key Value; do
	Value=${Value# }
	case $Key in
		Package)
			Essential='False'
			Package=$Value ;;
		Essential)
			[[ $Value == yes ]] && Essential='True' ;;
		Status)
			Status=$Value ;;
		Priority)
			Priority=$Value ;;
		Architecture)
			if [[ $Status == install\ ok\ installed ]]; then
				[[ $Essential == True ]] && continue

				SkipPrior='False'
				for KeepPrior in "${KeepPriors[@]}"; {
					if [[ $KeepPrior == $Priority ]]; then
						SkipPrior='True'
						break
					fi
				}

				# We want to keep packages with a given priority. However, the
				# user can choose to include the destruction of packages of a
				# priority of 'standard', 'important', or 'required'; that's
				# why this and the above `for` loop is here.
				[[ $SkipPrior == True ]] && continue

				Package="$Package:$Value"

				for KeepPKG in "$@"; {
					[[ $Package == $KeepPKG ]] && continue 2
				}

				[[ $FoundKeep == True ]] || List+=("$Package")
			fi ;;
	esac
done < "$StatusFile"

# Sort array. Using Insertion Sort algorithm as a fallback, in-case the user
# somehow removed the Essential 'coreutils' package containing sort(1).
if type -P sort &> /dev/null; then
	List=(`printf '%s\n' "${List[@]}" | sort`)
else
	Len=${#List[@]}
	for (( Index = 1; Index < Len; Index++ )); {
		Cur=${List[Index]}
		Pos=$Index

		while (( Pos > 0 )) && [[ ${List[Pos - 1]} > $Cur ]]; do
			List[Pos--]=${List[Pos - 1]}
		done

		List[Pos]=$Cur
	}
fi

if [[ $Destroy == True ]]; then
	if [[ $AptGetFound == True ]]; then
		apt-get -q -o Dpkg::Progress-Fancy=true --show-progress\
			${Purge:-purge} --autoremove "${List[@]}"
	else
		Err 1 "Dependency 'apt-get' not met."
	fi
else
	printf '%s\n' "${List[@]}"
fi
