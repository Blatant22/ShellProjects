#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/snotes
#------------------------------------------------------------------------------
# Project Name      - Extra/source/snotes (Search Notes)
# Started On        - Fri  9 Feb 00:07:19 GMT 2018
# Last Change       - Sun 22 Nov 17:26:40 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Fix clash between snotes' arguments and those found in the notes file.
#
#      Also, --edit/-e CMD is not working.
#
# To use your own comment character, change the Comment variable. This feature
# will eventually be included into snotes properly.
#------------------------------------------------------------------------------

CurVer='2020-11-22'
Progrm=${0##*/}

Comment="#"

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [MATCH_1 [MATCH_2 ...]]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -C, --comment [STR]      - Where STR is a single comment character.
		  -f, --file [PATH]        - Specify & remember the notes file to use.

		  By default, the notes file saved in the $Progrm configuration file
		  will be the one used.

		  Regular expressions are used for MATCH. Comment lines are ignored. To
		  tell $Progrm when you wish to stop searching for MATCH, have a line
		  in the notes file which contains only:

		    ${Comment}END

		  The default comment character is '#'.
	EOF
}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

ProjConf="$HOME/.config/$Progrm.conf"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--comment|-C)
			shift; Comment=${1:0:1} ;;
		--file|-f)
			shift; NotesFile=$1 ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

if [ "$2" ]; then
	Err 1 $LINENO "Argument error -- is your match correct?"
fi

SnotesChk(){
	if ! [ -f "$NotesFile" ] || ! [ -r "$NotesFile" ]; then
		Err 1 $LINENO "Notes file inaccessible or not found."
	fi
}

if [ -f "$HOME/.config/$Progrm.conf" ]; then
	if [ -n "$NotesFile" ]; then
		SnotesChk
		read -n 1 -e -p "Notes file already set -- replace? "
		if ! [[ $REPLY == [Yy] ]]; then
			printf "No action taken -- quitting.\n"
			exit 0
		else
			if ! [ -d "$HOME/.config" ]; then
				if type -P mkdir > /dev/null 2>&1; then
					mkdir $HOME/.config
				else
					Err 1 $LINENO "Dependency 'mkdir' not met."
				fi
			fi

			printf "%q\n" "$NotesFile" > "$HOME/.config/$Progrm.conf"
		fi
	else
		NotesFile=$(< $HOME/.config/$Progrm.conf)
	fi
else
	printf "$NotesFile\n" > "$HOME/.config/$Progrm.conf"
fi

SnotesChk
Match=$1
declare -i LineCount=0
while read -r CurLine; do
	CurLineCount+=1
	[ "$CurLine" == "${Comment}END" ] && break
	if [[ $CurLine =~ ^(|${Comment}.*)$ ]]; then
		continue
	elif [[ $CurLine =~ "$Match" ]]; then
		if [ "$CurLineNums" == 'true' ]; then
			printf "%4d  %s\n" "$CurLineCount" "$CurLine"
		else
			printf "%s\n" "$CurLine"
		fi
	fi
done < "$NotesFile"
