#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/snotes
#------------------------------------------------------------------------------
# Project Name      - Extra/source/snotes
# Started On        - Fri  9 Feb 00:07:19 GMT 2018
# Last Change       - Tue  1 Mar 00:49:11 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# To use your own comment character, change the Comment variable. This feature
# will eventually be included into snotes properly.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.4.20)
#   coreutils (>= 8.28)
#------------------------------------------------------------------------------

CurVer='2022-03-01'
Progrm='snotes'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [MATCH]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -C, --comment STR        - Use STR as the single comment character.
		  -f, --file PATH          - Specify & remember the notes file to use.

		  The location of the file read by ${Progrm^} is saved here:

		    ~${SnotesFile##*$HOME}

		  Regular expressions are used for MATCH. Comment lines are ignored. To
		  tell $Progrm when you wish to stop searching for MATCH, have a line
		  in the notes file which contains only:

		    ${Comment}END

		  The default comment character is '$Comment'.

		  The use of '--' to ignore proceeding flags is supported.
	EOF

	printf '%' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Comment='#'
SnotesFile="$HOME/.config/$Progrm.conf"

while [[ -n $1 ]]; do
	case $1 in
		--)
			shift
			break ;;
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--comment|-C)
			ArgComment=$1
			if [[ -z $2 ]]; then
				Err 1 "Option '$ArgComment' requires an argument."
			else
				Comment=$2
				shift
			fi ;;
		--file|-f)
			ArgFile=$1
			if [[ -z $2 ]]; then
				Err 1 "Option '$ArgFile' requires an argument."
			else
				NotesFile=$2
				shift
			fi ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if ! type -P mkdir &> /dev/null; then
	Err 1 "Dependency 'mkdir' not met."
fi

(( $# > 1 )) && Err 1 'Multiple matches not supported.'

#---------------------------------------------Process or Create the Snotes File

if [[ -n $NotesFile ]]; then
	ConfigDir=${SnotesFile%/*}
	[[ -d $ConfigDir ]] || mkdir -p "$ConfigDir"
	printf '%s\n' "$NotesFile" > "$SnotesFile"

	printf 'New location saved.\n'
	exit 0
fi

[[ -r $SnotesFile ]] || Err 1 "File '$SnotesFile' unreadable."
NotesFile=$(< "$SnotesFile")

#--------------------------------------------------------Parse and Display Data

if ! [[ -f $NotesFile ]]; then
	Err 1 'Notes file not found.'
elif ! [[ -r $NotesFile ]]; then
	Err 1 'Notes file unreadable.'
fi

while read -r CurLine; do
	(( LineCount++ ))

	[[ $CurLine == ${Comment}END ]] && break
	if [[ $CurLine =~ ^($|$Comment) ]]; then
		continue
	elif [[ $CurLine =~ $1 ]]; then
		LineCountLen=${#LineCount}
		if (( LineCountLen > LineCountLenMax )); then
			LineCountLenMax=$LineCountLen
		fi

		FinalLines+=("$LineCount:$CurLine")
	fi
done < "$NotesFile"

for Line in "${FinalLines[@]}"; {
	# Colorize the match, Ã  la grep(1). Need to use the $'' syntax to use
	# escape sequences properly, otherwise it won't work.
	Line=${Line//$1/$'\e[91m'$1$'\e[0m'}

	printf '\e[2;37m%*d\e[0m  %s\n' $LineCountLenMax ${Line%%:*} "${Line#*:}"
}
