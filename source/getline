#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/getline
#------------------------------------------------------------------------------
# Project Name      - Extra/source/getline
# Started On        - Tue 19 Sep 20:57:01 BST 2017
# Last Change       - Mon 13 Sep 10:57:04 BST 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Add ranges to 'line' action, like: line 2-50,57-59,70-74
#TODO: Finish 'start' action.
#TODO: Finish end action.
#TODO: Finish summary. Target: show sum of concatenated 'count' results.
#TODO: Improve performance of 'count' actions.
#
# Bugs:
#
#TODO: Does 'for CHAR in' line include spaces and/or tabs? Find out.
#
# Dependencies:
#
#   bash (>= 4.3-14)
#------------------------------------------------------------------------------

CurVer='2021-09-13'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [ACTION] [FILE_1 [FILE_2] ...]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -N, --names              - Show filenames with results.
		  -S, --sum                - Display total with 'count'.
		  -c, --nocolor            - Disable almost all color.
		  -n, --nums               - Line numbers when viewing files.
		  -t, --ttl                - Lotal numbers, without filename.

		  ccount                   - Count number of chars in FILE.
		  end N                    - Show last N number of lines.
		  field L:F                - Show only F field on L line.
		  gmatch GLOB              - Extended glob matching via GLOB.
		  lcount                   - Count number of lines in FILE.
		  line N[,N ...]           - Display Nth line(s) in FILE.
		  read                     - Output all contents of FILE.
		  read:N                   - Auto-scroll N number of seconds.
		  rmatch REGEX             - Grep-like REGEX matching.
		  start N                  - Show first N number of lines.
		  wcount                   - Count number of words in FILE.

		  Words, lines, and chars are determined in a shell-like way.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

declare -i AcountCount=0
ShowNames='false'
TotalOnly='false'
LineNumbers='false'
ColorMode='true'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--nums|-n)
			LineNumbers='true' ;;
		--ttl|-t)
			TotalOnly='true' ;;
		--nocolor|-c)
			ColorMode='false' ;;
		--names|-N)
			ShowNames='true' ;;
		--sum|-S)
			Err 1 'Feature not yet available.'
			ShowSum='true' ;;
		-*)
			Err 1 'Unrecognised option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

while [ "$1" ]; do
	case $1 in
		read)
			AcountCount+=1
			Instruct='read' ;;
		read:[1-9])
			AcountCount+=1
			Instruct="read:${1/*:}" ;;
		start)
			Err 1 'Feature not yet available.'

			shift

			AcountCount+=1
			Instruct='start'
			STARTNUM=$1

			if [[ $STARTNUM =~ [0-9]+ ]]; then
				Err 1 'Incorrect start number chosen.'
			fi ;;
		end)
			Err 1 'Feature not yet available.'

			shift

			AcountCount+=1
			Instruct='end'
			ENDNUM=$1

			if ! [[ $ENDNUM =~ ^[0-9]+$ ]]; then
				Err 1 'Incorrect end number chosen.'
			fi ;;
		line)
			shift

			AcountCount+=1
			Instruct="showline"

			for L in ${1//,/ }; {
				if ! [[ $L =~ ^[0-9]+$ ]]; then
					Err 1 "Incorrect line number: $L"
				fi

				# This is to ensure the user doesn't get confused
				# when they enter line 1, expecting line 1 as per
				# wc, yet see line 2, because arrays start at 0.
				let L--

				LineToShow+=" $L"
			} ;;
		field)
			shift

			AcountCount+=1
			Instruct='showfield'
			CutLine=$1

			if ! [[ $CutLine =~ [0-9]+:[0-9]+ ]]; then
				Err 1 'Incorrect cut line/field selected'
			fi ;;
		lcount)
			AcountCount+=1
			Instruct='lcount' ;;
		wcount)
			AcountCount+=1
			Instruct='wcount' ;;
		ccount)
			AcountCount+=1
			Instruct='ccount' ;;
		gmatch)
			shift
			AcountCount+=1
			Instruct="gmatch=$1" ;;
		rmatch)
			shift
			AcountCount+=1
			Instruct="rmatch=$1" ;;
		*)
			break ;;
	esac

	shift
done

if [ "$ColorMode" == 'true' ]; then
	C_Grey='\e[1;30m'
	C_Normal='\e[0m'
fi

if [ $AcountCount -gt 1 ]; then
	Err 1 'Only one action at a time may be specified.'
fi

[ "$DebugMe" == 'true' ] && set -x

if ! [ "$Instruct" ]; then
	Err 1 'Unrecognised or missing action(s).'
else
	[ "$*" ] && FileList+="$@ "
fi

if [ "$Instruct" == 'showfield' ]; then
	# As above, but with the f part in action show-field=l:f.
	CutField=${CutLine/*:}
	let CutField--

	[ $CutField -lt 0 ] && Err 1 'Incorrect field selected.'
fi

if ! [[ $Instruct == [wlc]count ]] && [ "$TotalOnly" == 'true'  ]; then
	Err 1 "Option '--ttl|-t' requires a paired option."
fi

# This function saves repetition when a line or lines need to be displayed. Use
# $1 for the variable which contains the line number, $2 for the actual file's
# data, and use $3 for the newline \n character, if desired.
LineNumFunc(){
	if [ "$LineNumbers" == 'false' ]; then
		printf "%s$3" "$2"
	else
		[ "$2" ] || continue
		printf "${C_Grey}%#6d$C_Normal  %s$3" "$1" "$2"
	fi
}

for File in $FileList; {
	# Initialize the variables used in this for loop. This is to ensure when
	# working with a new file in FileList, the variables don't carry over.
	CharCount=0; LineCount=0; WordCount=0; GetWords=

	if ! [[ $Instruct == [wlc]count ]] && [ "$ShowNames" == 'true' ]; then
		printf "FILE: %s\n" "$File"
	fi

	if ! [ "$File" ]; then
		Err 1 "No filename(s) specified."
	elif ! [ -f "$File" -a -r "$File" ]; then
		Err 1 "File missing or inaccessible: $File"
	fi

	if [ "$Instruct" == 'showline' ]; then
		readarray REPLY < "$File"
		for L in $LineToShow; {
			LineNumFunc "$LineToShow" "${REPLY[$L]}"
		}

		continue
	fi

	# For the current file, read each line and process it as follows. Needed to
	# use -r and IFS= to avoid formatting issues with the output.
	while IFS= read -r REPLY; do
		# Remove newline characters from the current line. This fixes the
		# issue whereby using \ in files (particularly code) to continue
		# a long command on the next line, would not display correctly.
		REPLY=${REPLY//}

		# Fixes issue whereby empty lines were being ignored. This converts
		# empty lines to a literal new line character. (\n doesn't work)
		[ -z "$REPLY" ] && REPLY+=""

		# Replace each character in the current line with a + followed by
		# a space, thus allowing the for loop to recognise each field and
		# so able to count each one, using let's increment.
		for CHAR in ${REPLY//?/+ }; { let CharCount++; }

		# Continue to the next line, ignoring what's left of the while loop
		# if all you want is the character count. Saves unnecessary
		# processing and likely conflicts.
		[ "$Instruct" == 'ccount' ] && continue

		let LineCount++

		if [ "$Instruct" == "showfield" ]; then
			# Check if on the right line for show-field.
			if [ ${CutLine%:*} -eq $LineCount ]; then
				read -a Array <<< "$REPLY"
				printf "%s\n" "${Array[$CutField]}"
				break
			fi
		fi

		# Process the results of each action listed here.
		case $Instruct in
			read)
				# Output the file, like cat.
				LineNumFunc "$LineCount" "$REPLY" "\\n" ;;
			read:[1-9])
				# Output the file, like cat, but autoscroll.
				LineNumFunc "$LineCount" "$REPLY" "\\n"

				# Sleep for n number of seconds before scrolling.
				sleep ${Instruct/*:}s ;;
			gmatch=*)
				# If the current line contains the match given by
				# the user and stored in Instruct=*. Uses globbing.
				if [[ $REPLY == ${Instruct/*=} ]]; then
					LineNumFunc "$LineCount" "$REPLY" "\\n"
				fi ;;
			rmatch=*)
				# As gmatch, but uses extended regex.
				if [[ $REPLY =~ ${Instruct/*=} ]]; then
					LineNumFunc "$LineCount" "$REPLY" "\\n"
				fi ;;
		esac
	done < "$File"

	# Saves repetition by calling this function for each following Instruct.
	# Supply the first positional parameter with the variable from which to get
	# the total. Easier to add to.
	TTLOutput(){
		if ! [ "$TotalOnly" == 'true' ]; then
			printf "%s %s\n" "$1" "$File"
		else
			printf "%s\n" "$1"
		fi
	}

	# Process the results of each action listed here.
	case $Instruct in
		lcount)
			# Display total number of lines.
			TTLOutput "$LineCount" ;;
		wcount)
			# Display total number of words.
			GetWords=$(for I in `< "$File"`; { printf "%s\n" "$I"; })
			for WORD in $GetWords; { let WordCount++; }
			TTLOutput "$WordCount" ;;
		ccount)
			# Display total number of characters.
			TTLOutput "$CharCount" ;;
	esac

	if [ "$ShowSum" == 'true' ]; then
		:
	fi
}
