#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/glkfu-changes
#------------------------------------------------------------------------------
# Project Name      - Extra/source/glkfu/glkfu-changes
# Started On        - Thu 18 Feb 15:32:07 GMT 2021
# Last Change       - Sun  1 May 00:42:45 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# GLKFU helper tool to view the full changelog of a given kernel.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 3.0)
#   coreutils (>= 8.28-1ubuntu1)
#   less (>= 487-0.1)
#   wget (>= 1.19.4-1) | curl (>= 7.58.0-2ubuntu3.10)
#------------------------------------------------------------------------------

CurVer='2022-05-01'
Progrm='glkfu-changes'

Usage(){
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] VERSION

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.

		  Where a valid kernel would be, for example '4.19.10' or '5.10'.
	EOF

	printf '%s' "$REPLY"
}

Err(){
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

KernOrgMirrs='https://mirrors.edge.kernel.org'

while [[ -n $1 ]]; do
	case $1 in
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if (( $# == 1 )); then
	if [[ $1 =~ ^[[:digit:].]+$ ]]; then
		Version=$1
	else
		Err 1 'Invalid kernel version.'
	fi
elif (( $# > 1 )); then
	Err 1 'Trailing arguments.'
else
	Err 1 'Missing kernel version.'
fi

DepCount=0
for Dep in less rm mktemp; {
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
}

(( DepCount > 0 )) && exit 1

SigHandler(){
	Status=$?
	rm "$OutFile" 2> /dev/null
	exit $Status
}

trap SigHandler HUP INT EXIT

URL="$KernOrgMirrs/pub/linux/kernel/v${Version%%.*}.x/ChangeLog-$Version"
OutFile=`mktemp`

if type -P curl &> /dev/null; then
	if ! curl -fso "$OutFile" "$URL" 2> /dev/null; then
		Err $? 'Downloading with curl(1) failed.'
	fi
elif type -P wget &> /dev/null; then
	if ! wget -qO "$OutFile" "$URL"; then
		Err $? 'Downloading with wget(1) failed.'
	fi
else
	Err 1 "Neither 'WGet' nor 'cURL' were found."
fi

while read; do
	if [[ ${Data[1]} == \<title\>404:\ * ]]; then
		Err 1 "Changelog for Linux v$Version not found."
	fi
done < "$OutFile"
less -F "$OutFile"
