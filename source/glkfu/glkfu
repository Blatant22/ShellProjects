#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/glkfu
#------------------------------------------------------------------------------
# Project Name      - ShellProjects/source/glkfu/glkfu
# Started On        - Sun  6 Dec 19:41:35 GMT 2020
# Last Change       - Mon 26 Jun 22:36:06 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# [G]et [L]atest [K]ernel [f]or [U]buntu. That said, this could probably work
# fine with Debian, and no doubt for distributions based thereon.
#
# Compile the latest kernel from source, using your current kernel's
# configuration file, then pack it all up into Debian packages for easy
# installation.
#
# Written and tested on a minimalistic, non-standard Ubuntu 18.04 installation.
#
# Features:
#
#TODO: Provide an option to reuse existing files extracted from archive.
#TODO: Ensure GLKFU supports EFI systems -- can anyone help with that?
#
# Bugs:
#
#TODO: Use of the -o flag(s) not working properly if unmet dependencies.
#
#      In this case, GLKFU is unable to determine whether the latest version is
#      newer or not, due to it being a generic Ubuntu kernel. I noticed this
#      bug in Pop! OS 20.04. Oddly, using `-o latest` and `-o current` work
#      perfectly fine.
#
#TODO: If we exit during `$Make bindeb-pkg`, SignalHandler() won't work; why?
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.28-1ubuntu1)
#   glkfu-changes (>= 2021-02-18)
#   glkfu-list (>= 2020-12-24)
#   gpg (>= 2.2.4-1)
#   make (>= 4.1-9.1ubuntu1)
#   tar (>= 1.29b-2)
#   wget (>= 1.19.4-1) | curl (>= 7.58.0-2ubuntu3.10)
#   xz-utils (>= 5.2.2-1.3)
#------------------------------------------------------------------------------

CurVer='2023-06-26'
Progrm='glkfu'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --changelog              - View kernel's changelog using less(1).
		  --no-color               - Disable ANSII color escape sequences.
		  -C, --config FILE        - Use FILE instead of newest available.
		  -D, --build-dir PATH     - Build in PATH instead of CWD.
		  -I, --ignore-deps        - Ignore compile & build dependencies.
		  -O, --override FILE      - Use FILE instead of the latest. See below.
		  -c, --cores INT          - Use INT CPU cores (jobs) for make(1).
		  -d, --just-download      - Just download the Linux Tar archive.
		  -i, --ignore-versions    - Bypass current to new version comparison.
		  -j, --just-check         - Just check kernel.org for a newer version.
		  -l, --list-kerns         - List all available kernel versions.
		  -o, --output TYPE        - Output one of TYPE, for use in scripts.
		  -s, --silent-make        - Tell make(1) not to be verbose.
		  -y, --assume-yes         - Assume user answers yes when prompted.

		  Refer to the glkfu(1) man page for information on valid TYPEs.

		  NOTE: Assuming yes will utilize \`localmodconfig\`, for a kernel
		        whose modules will only target the machine's current hardware.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

SilentMake=
Make="make -j ${Cores:-1}"
VerFile='/proc/version'
ProcInfoFile='/proc/cpuinfo'
StatusFile='/var/lib/dpkg/status'
KernOrg='https://www.kernel.org'
RSS_Feed='https://www.kernel.org/feeds/kdist.xml'
GPGPubKeys=('torvalds@kernel.org' 'gregkh@kernel.org')
KernOrgMirrs='https://cdn.kernel.org'
BuildDir='.'

ValidOutputs=(
    'current' 'current.split' 'current.maj' 'current.min' 'current.rev'
    'latest' 'latest.split' 'latest.maj' 'latest.min' 'latest.rev'
    'latest.tarball'
)

C_Red=$'\e[91m'
C_Green=$'\e[92m'
C_Yellow=$'\e[93m'
C_Reset=$'\e[0m'

# Packages required to build at least Linux v5.9.12.
ReqPKGs=(
	'bc' # - GNU bc arbitrary precision calculator language
	'bison' # - YACC-compatible parser generator
	'build-essential' # - Informational list of build-essential packages
	'fakeroot' # - tool for simulating superuser privileges
	'flex' # - fast lexical analyzer generator
	'libelf-dev' # - libelf1 development libraries and header files
	'libssl-dev' # - Secure Sockets Layer toolkit - development files
	'rsync' # - fast, versatile, remote (and local) file-copying tool
)

Args=()
while [[ -n $1 ]]; do
	case $1 in
		-[^-]*)
			Str=${1#-}
			Len=${#Str}
			for (( Index = 0; Index < Len; Index++ )); {
				Args+=(-"${Str:Index:1}")
			} ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

ArgOutput=
ArgJustCheck=
ArgIgnoreVers=
ArgJustDownload=
while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--override|-O)
			shift

			if [[ -z $1 ]]; then
				Err 1 'Missing tarball FILE with which to override.'
			else
				LatestTar=$1
			fi ;;
		--assume-yes|-y)
			AssumeYes='True' ;;
		--build-dir|-D)
			shift

			if [[ -z $1 ]]; then
				Err 1 'Build PATH not specified.'
			elif ! [[ -d $1 ]]; then
				Err 1 "Directory '$1' not found."
			else
				BuildDir=${1%/}
			fi ;;
		--ignore-deps|-I)
			IgnoreDeps='True' ;;
		--cores|-c)
			shift

			if [[ -z $1 ]]; then
				Err 1 'Unspecified number of cores for make(1) to use.'
			elif ! [[ $1 == +([[:digit:]]) ]]; then
				Err 1 'Invalid number of cores specified.'
			else
				Cores=$1
			fi ;;
		-i|--ignore-versions)
			ArgIgnoreVers=$1
			IgnoreVers='True' ;;
		--just-check|-j)
			ArgJustCheck=$1
			JustCheck='True' ;;
		--just-download|-d)
			ArgJustDownload=$1
			JustDownload='True' ;;
		--output|-o)
			ArgOutput=$1
			shift

			if [[ -z $1 ]]; then
				Err 1 "No TYPE provided for '$ArgOutput' OPT."
			else
				for CurOutput in "${ValidOutputs[@]}"; {
					if [[ $CurOutput == $1 ]]; then
						Found='True'
						break
					fi
				}

				if [[ $Found != True ]]; then
					Err 1 "Output TYPE not found -- see: $Progrm --help"
				fi

				Output=$1
			fi ;;
		--config|-C)
			shift

			if [[ -z $1 ]]; then
				Err 1 'Kernel configuration FILE not provided.'
			elif ! [[ -f $1 ]]; then
				Err 1 "File '$1' not found."
			else
				ConfigOverrideFile=$1
			fi ;;
		--list-kerns|-l)
			ListKerns='True' ;;
		--silent-make|-s)
			SilentMake='-s' ;;
		--changelog)
			ChangeLog='True' ;;
		--no-color|--no-colour)
			C_Red=
			C_Green=
			C_Yellow=
			C_Reset= ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

# Check for conflicting arguments -- tedious and noisy, but helpful.
Conflict() { Err 1 "OPTs '$1' and '$2' are incompatible."; }
if [[ $JustCheck == True ]]; then
	if [[ $JustDownload == True ]]; then
		Conflict "$ArgJustCheck" "$ArgJustDownload"
	elif [[ $IgnoreVers == True ]]; then
		Conflict "$ArgJustCheck" "$ArgIgnoreVers"
	elif [[ -n $Output ]]; then
		Conflict "$ArgJustCheck" "$ArgOutput"
	fi
fi

DepCount=0
for Dep in make tar rm cp gpg xz; do
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
done

(( DepCount > 0 )) && exit 1

if [[ $ListKerns == True ]]; then
	printf "* Looking for 'glkfu-list' ... "

	if type -P glkfu-list &> /dev/null; then
		printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
	else
		printf '[%s!%s]\n' "$C_Red" "$C_Reset"
		exit 1
	fi

	glkfu-list
	exit $?
elif [[ $AssumeYes == True ]]; then
	printf 'Assuming yes for %s-only prompts.\n' "${Progrm^^}"
fi

#----------------------------------------------------------------Main Functions

Get() {
	local DoStdIn Args

	# If downloading fails, then this will only exit the subshell, not GLKFU.
	# This is because, to capture the data Get() spits out, a subshell is
	# used via command substitution.
	if type -P curl &> /dev/null; then
		[[ $1 == - ]] || Progress='--progress-bar'

		curl ${Progress:-\-s} -o "$1" "$2" ||
			Err $? 'Downloading with curl(1) failed.'
	elif type -P wget &> /dev/null; then
		[[ $1 == - ]] || Progress='--show-progress'

		wget $Progress -qO "$1" "$2" ||
			Err $? 'Downloading with wget(1) failed.'
	else
		Err 1 "Neither 'wget' nor 'curl' were found."
	fi
}

Ask() {
	[[ $AssumeYes == True ]] && return 0

	while :; do
		read -ep "${C_Yellow}Q$C_Reset: $1 (Y/N) " Response

		case ${Response,,} in
			y|yes)
				return 0 ;;
			n|no)
				return 1 ;;
			'')
				Err 0 'Empty response -- try again.' ;;
			*)
				Err 0 'Unrecognised response -- try again.' ;;
		esac
	done
}

FileChk() {
	local FileChkErrs=0

	if ! [[ -f $1 ]]; then
		Err 0 "File '$1' not found."
		(( FileChkErrs++ ))
	fi

	if ! [[ -r $1 ]]; then
		Err 0 "File '$1' unreadable."
		(( FileChkErrs++ ))
	fi

	(( FileChkErrs > 0 )) && exit 1
}

JustOutput() {
	[[ -z $Output ]] && return 0
	[[ $Output == $1 ]] || return 0

	printf '%s\n' "$2"
	exit 0
}

#------------------------------------Determine the Latest Stable Kernel Version

case $Output in
	current|current.*)
		;;
	*)
		# Parse page data to get tarball filename of the latest stable kernel.
		if [[ -z $LatestTar ]]; then
			[[ -z $Output ]] && printf '* Finding latest kernel ... '

			Data=$(Get - "$RSS_Feed" 2>&1)
			Status=$?

			if [[ -z $Output ]]; then
				if (( Status > 0 )); then
					printf '[%s!%s]\n' "$C_Red" "$C_Reset"
					printf '* Attemting alternative method ... '
				else
					printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
				fi
			fi

			# Parse RSS feed. Assumes most recent versions are close to top.
			# This is much quicker than the old method (see below). This also
			# assumes the version numbers are the usual maj.min.patch. This, -
			# and the chance of the page being inaccessble, is why the fallback
			# is in place.
			if (( Status == 0 )); then
				Buffer=
				TagStart=
				ItemFound=
				while read -N 1 Char; do
					if [[ $TagStart == True ]]; then
						if [[ $InsideTag == True ]]; then
							Buffer+=$Char

							if [[ $Char == '<' ]]; then
								if [[ ${Buffer:0:6} == title\> ]]; then
									Buffer=${Buffer#*>}
									if [[ ${Buffer:0 - 7:-1} == stable ]]; then
										LatestTar="linux-${Buffer%:*}.tar.xz"

										break
									fi
								fi

								TagStart=
								Buffer=
							fi
						elif [[ $Char == '>' ]]; then
							InsideTag='True'
							Buffer=
						fi
					elif [[ $Char == '<' ]]; then
						TagStart='True'
					fi
				done <<< "$Data"
			fi

			# As of 2023-06-14, this is the old method, kept as fallback.
			Pattern='linux-+([[:digit:]]).+([[:digit:]]).+([[:digit:]]).tar.xz'
			if [[ -z $LatestTar || $LatestTar != $Pattern ]]; then
				while read; do
					if [[ $REPLY == +([[:space:]])'<td id="latest_link">' ]]; then
						FirstLineFound='True'
					elif [[ $FirstLineFound == True ]]; then
						IFS='/' read -a Buffer <<< "$REPLY"
						LatestTar=${Buffer[7]%%\"*}
						break
					fi
				done <<< "$(Get - "$KernOrg")"

				if [[ -z $Output ]]; then
					if [[ -z $LatestTar ]]; then
						printf '[%s!%s]\n' "$C_Red" "$C_Reset"
					else
						printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
					fi
				fi
			fi
		fi

		JustOutput 'latest.tarball' "$LatestTar"

		[[ -z $Output ]] && printf '* Verifying tarball filename ... '

		# Just in-case, check the resulting filename is valid.
		EmptyFileName=
		InvalidFileName=
		if [[ -z $LatestTar ]]; then
			# Indirectly addresses when there is no Internet connection
			# available, to avoid an empty string being quoted in what would be
			# the next condition's error.
			#
			# This is mainly here to compensate for BASH command substitutions
			# being executed within a subshell, thus exiting out of GLKFU from
			# Get() with a suitable error via Err() is not possible.
			EmptyFileName='True'
		elif ! [[ $LatestTar == linux-+([[:digit:]]).+([[:digit:].]).tar.xz ]]; then
			InvalidFileName='True'
		fi

		if [[ $EmptyFileName == True ]]; then
			[[ -z $Output ]] && printf '[%s!%s]\n' "$C_Red" "$C_Reset"

			Err 1 'Tarball filename empty.'
		elif [[ $InvalidFileName == True ]]; then
			[[ -z $Output ]] && printf '[%s!%s]\n' "$C_Red" "$C_Reset"

			Err 1 "Tarball filename '$LatestTar' not valid."
		else
			[[ -z $Output ]] && printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
		fi

		# From the tarball filename, store just the version string. Shouldn't
		# be a need to check the value here, as checking is done above.
		LatestVerBuffer=${LatestTar//[![:digit:].]/}
		LatestVer=${LatestVerBuffer%..}

		# Get the major number of the latest version.
		LatestVerMaj=${LatestVer%%.*}

		JustOutput 'latest' "$LatestVer"

		if [[ -z $Output && $JustDownload != True ]]; then
			printf 'Latest Linux version: %s%s%s\n'\
				"$C_Yellow" "$LatestVer" "$C_Reset"
		fi ;;
esac

#-----------------------------------Viewing the Changelog (via `glkfu-changes`)

if [[ $ChangeLog == True ]]; then
	printf "* Looking for 'glkfu-changes' ... "

	if type -P glkfu-changes &> /dev/null; then
		printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
	else
		printf '[%s!%s]\n' "$C_Red" "$C_Reset"
		exit 1
	fi

	glkfu-changes "$LatestVer"
	exit $?
fi

#---------------------Determine if the Latest is Newer than the Current Version

FileChk "$VerFile"

read -a Line < "$VerFile"
CurVer=${Line[2]}

JustOutput 'current' "${CurVer%.0}"

if [[ -z $Output && $JustDownload != True ]]; then
	printf 'Current Linux version: %s%s%s\n'\
		"$C_Yellow" "${CurVer%.0}" "$C_Reset"
fi

NewVerAvail='False'
if [[ $IgnoreVers != True ]]; then
	if [[ $CurVer == +([[:digit:]\.])-* ]]; then
		printf 'Unable to determine if latest kernel is newer.\n' 1>&2

		if [[ $JustCheck == True ]]; then
			NewVerAvail='Error'
		else
			Ask "Continue with ${Progrm^^}?" || exit 3
		fi
	else
		if [[ -z $Output && $JustCheck != True ]]; then
			printf '* Comparing current to latest ... '
		fi

		# Split strings up by major, minor, and revision, then compare them.
		# Where C_* is for the current version, and L_* for the latest.
		read C_Maj C_Min C_Rev <<< "${CurVer//./ }"
		read L_Maj L_Min L_Rev <<< "${LatestVer//./ }"

		JustOutput 'current.split' "$C_Maj $C_Min $C_Rev"
		JustOutput 'latest.split' "$L_Maj $L_Min $L_Rev"
		JustOutput 'current.maj' "$C_Maj"
		JustOutput 'current.min' "$C_Min"
		JustOutput 'current.rev' "$C_Rev"
		JustOutput 'latest.maj' "$L_Maj"
		JustOutput 'latest.min' "$L_Min"
		JustOutput 'latest.rev' "$L_Rev"

		for Field in "$C_Maj:$L_Maj" "$C_Min:$L_Min" "$C_Rev:$L_Rev"; {
			Left=${Field%:*}; Right=${Field#*:}
			if (( ${Right:-0} > ${Left:-0} )); then
				NewVerAvail='True'
				break
			fi
		}

		if [[ -z $Output && $JustCheck != True ]]; then
			if [[ $NewVerAvail == True ]]; then
				printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
			else
				printf '[%s!%s]\n' "$C_Red" "$C_Reset"
			fi
		fi
	fi
else
	if [[ $JustDownload != True ]]; then
		printf 'Bypassing version comparison.\n'
	fi
fi

if [[ $JustCheck == True ]]; then
	if [[ $NewVerAvail == True ]]; then
		exit 0
	elif [[ $NewVerAvail == False ]]; then
		exit 2
	elif [[ $NewVerAvail == Error ]]; then
		exit 3
	fi

	exit 2 # <-- No new version is available.
fi

if [[ $IgnoreVers != True ]] && [[ $NewVerAvail == False ]]; then
	printf "Kernel appears up-to-date -- quitting.\n"
	exit 0
fi

#----------------------------------Look for Compilation & Building Dependencies

# Catch `Makefile:188`, for when build directory has spaces or colons.
if [[ $JustCheck != True && $ListKerns != True && $JustDownload != True ]]; then
	printf '* Checking build path ... '

	if [[ `realpath "$BuildDir" 2>&1` == *+([\ :])* ]]; then
		printf '[%s!%s]\n' "$C_Red" "$C_Reset"

		Err 1 'Build path must not contain whitespaces or colons.'
	fi

	printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
fi

if [[ $JustDownload != True && $IgnoreDeps != True ]]; then
	FileChk "$StatusFile"

	Packages=()
	II=' install ok installed'
	while IFS=':' read -a Line; do
		if [[ ${Line[0]} == Package ]]; then
			Package=${Line[1]// }
		elif [[ ${Line[0]} == Status && ${Line[1]} == $II ]]; then
			Packages+=("$Package")
		fi
	done < "$StatusFile"

	printf '* Looking for build packages ... '

	MissingDeps=()
	for DepPKG in "${ReqPKGs[@]}"; {
		Found='False'

		for StatusPKG in "${Packages[@]}"; {
			[[ $StatusPKG == initramfs-tools ]] && HaveInitramfsPKG='True'

			if [[ $DepPKG == $StatusPKG ]]; then
				Found='True'
				(( Count++ ))
			fi
		}

		[[ $Found == True ]] || MissingDeps+=("$DepPKG")
	}

	if (( ${#MissingDeps[@]} > 0 )); then
		printf '[%s!%s]\n' "$C_Red" "$C_Reset"
		for MissingDep in "${MissingDeps[@]}"; {
			printf "Dependency %sNOT%s met: '%s%s%s'\n"\
				"$C_Red" "$C_Reset" "$C_Yellow" "$MissingDep" "$C_Reset"
		}
	else
		printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
	fi

	type -P sudo &> /dev/null && HasSudo='True'

	# Instruct the user accordingly, if dependencies are missing.
	if (( Count != ${#ReqPKGs[@]} )); then
		Err 0 'One or more dependencies not met.'

		if [[ $HasSudo == True ]]; then
			printf 'Refer to the following command:\n'
			printf '\n$ sudo apt-get install '
		else
			printf '\n# apt-get install '
		fi

		for PKG in "${MissingDeps[@]}"; {
			printf '%s ' "$PKG"
		}

		printf '\n\nNothing to do -- quitting.\n'
		exit 1
	fi

	if [[ $HaveInitramfsPKG != True ]]; then
		if [[ $HasSudo == True ]]; then
			CMD='$ sudo apt-get install initramfs-tools'
		else
			CMD='# apt-get install initramfs-tools'
		fi

		read -d '' <<-EOF

			NOTE:      Before you install the Debian packages for at least the
			           'image' and 'headers', be sure that you install the
			           'initramfs-tools' package in order to have an 'initrd'
			           file generated for you.

			WARNING:   Failure to correctly generate an 'initrd' file for the
			           installed kernel will typically result in a kernel panic
			           when trying to boot from it.

			           Refer to the following command to remedy this:

			           $CMD

		EOF

		printf '%s' "$REPLY"
	fi
else
	[[ $JustDownload == True ]] || printf 'Told to ignore dependencies.\n'
fi

#-----------------------------------------------Determining Number of CPU Cores

if [[ $JustDownload != True ]]; then
	printf '* Determining CPU cores ... '

	if [[ -f $ProcInfoFile && -r $ProcInfoFile ]]; then
		while read -a Line; do
			if [[ "${Line[0]}${Line[1]}" == cpucores ]]; then
				TTLCores=${Line[3]}
				break
			fi
		done < "$ProcInfoFile"
	else
		TTLCores=`nproc`
	fi

	Cores=$TTLCores

	if ! [[ $TTLCores == +([[:digit:]]) ]]; then
		printf '[%s!%s]\n' "$C_Red" "$C_Reset"

		Err 0 'Unable to determine available number of CPU cores.'
		Ask 'Continue with just the 1 core/thread?'

		Cores=1
	else
		printf '[%sOK%s]\n' "$C_Green" "$C_Reset"
	fi

	printf 'Using %d/%d available CPU core(s).\n' $Cores $TTLCores
fi

#---------------------------------Download Applicable Tarball & Verify the File

if [[ $JustDownload != True ]]; then
	read -d '' <<-EOF

		${C_Red}CAUTION${C_Reset}: Compilation takes up several GBs of disk space. Depending on
		         the options selected, you may use over 20GB. If you don't have
		         enough disk space during compilation, it will fail and your
		         time will be wasted.

	EOF

	printf '%s' "$REPLY"
fi

if [[ $JustDownload != True && $BuildDir == . ]]; then
	Ask 'No build directory specified -- use CWD?' || exit 0
fi

if [[ -f "$BuildDir/$LatestTar" ]]; then
	ExistingTarball='Compressed'
elif [[ -f "$BuildDir/${LatestTar%.xz}" ]]; then
	ExistingTarball='Uncompressed'
fi

if [[ $JustDownload != True && -n $ExistingTarball ]]; then
	printf 'Found: %s%s%s%s\n' "$BuildDir/"\
		"$C_Yellow" "${LatestTar%.xz}" "$C_Reset"

	Ask "Use existing tarball found in build directory?" && Reuse='True'
fi

if [[ $Reuse != True ]]; then
	Ask "Begin downloading '$C_Yellow$LatestTar$C_Reset' tarball?" || exit 0

	printf 'Downloading tarball:\n'
	if [[ -w $BuildDir ]]; then
		URL="$KernOrgMirrs/pub/linux/kernel/v$LatestVerMaj.x/$LatestTar"
		Get "$BuildDir/$LatestTar" "$URL"
	else
		Err 1 'Build directory unwritable.'
	fi
fi

Ask 'Verify the GPG signature of the tarball?' && Verify='True'

if [[ $Verify == True ]]; then
	printf 'Importing GPG public keys:\n'
	gpg --locate-keys "${GPGPubKeys[@]}" ||
		Err 1 'Failed to import public keys with gpg(1).'

	printf 'Downloading GPG signature file\n'
	URL="$KernOrgMirrs/pub/linux/kernel/v$LatestVerMaj.x/${LatestTar%.xz}.sign"
	Get "$BuildDir/${LatestTar%.xz}.sign" "$URL"
fi

if [[ $JustDownload != True ]]; then
	if [[ $ExistingTarball != Uncompressed ]]; then
		printf 'Decompressing tarball\n'
		xz -d "$BuildDir/$LatestTar"
		(( $? > 1 )) && Err 1 'Non-zero exit status from xz(1).'
	fi

	if [[ $Verify == True ]]; then
		printf 'Verifying kernel signature\n'

		gpg --verify "$BuildDir/${LatestTar%.xz}.sign"

		if (( $? > 0 )); then
			Err 1 'Non-zero exit status when verifying download.'
		else
			printf 'File verified successfully.\n'
		fi

		rm "${BuildDir%/}/${LatestTar%.xz}.sign"
	fi
fi

[[ $JustDownload == True ]] && exit 0

#-----------------------------------------------Extract Contents of the Tarball

Ask 'Begin extracting tarball?' || exit 0

printf 'Extracting tarball\n'
tar -C "$BuildDir" -xvf "$BuildDir/${LatestTar%.xz}"

rm "$BuildDir/${LatestTar%.xz}"

#----------------------------------------------Copy Over Existing Configuration

if [[ -n $ConfigOverrideFile ]]; then
	printf "Using file: '%s'\n" "$ConfigOverrideFile"

	cp -v "$ConfigOverrideFile" "$BuildDir/${LatestTar%.tar.xz}/.config"
else
	printf 'Looking for suitable kernel configuration\n'

	TargetConfig="/boot/config-$CurVer"
	if [[ -f $TargetConfig ]]; then
		printf "File found: '%s'\n" "$TargetConfig"

		printf "Importing current kernel's configuration\n"
		cp -v "$TargetConfig" "$BuildDir/${LatestTar%.tar.xz}/.config"
	else
		Err 1 "Cannot find suitable configuration file -- see: $Progrm -h"
	fi
fi

#--------------------------------------------------------Process Configurations

cd "$BuildDir/${LatestTar%.tar.xz}"

if Ask 'Use default values for new CONFIG parameters?'; then
	while read; do
		if [[ $REPLY == .config:+([[:digit:]]):warning:\ unexpected\ data:* ]]; then
			UnexpectedData='True'
			printf '%s\n' "$REPLY"
		elif [[ $REPLY == .config:+([[:digit:]]):* ]]; then
			PossibleErrors='True'
			printf '%s\n' "$REPLY"
		fi
	done <<< "$($Make olddefconfig 2>&1)"

	if [[ $UnexpectedData == True ]]; then
		Err 1 "Unexpected data found in '.config' file."
	elif [[ $PossibleErrors == True ]]; then
		Err 0 "Possible errors found in '.config' file."
		Ask "Continue with potentially problematic '.config' file?" || exit 0
	fi
else
	$Make silentoldconfig
fi

if [[ $AssumeYes != True ]]; then
	read -d '' <<-EOF

		CAUTION: Removing unneeded kernel modules is only relevant to the system in
		         its current state, so if you currently or eventually will have
		         need of such a module, you will likely need to recompile the
		         kernel with the needed support.

	EOF

	printf '%s' "$REPLY"
fi

if Ask 'Strip unneeded modules for the current system?'; then
	$Make localmodconfig
	Exit=$?

	if (( Exit > 1 )); then
		Err 0 'Unexpected (non-zero) exit by make(1).'
		printf 'NOTE: You may need to start again.\n'
		exit $Exit
	fi
fi

#----------------------------------------------------The 'DEBUG_INFO' Parameter
# Thank you, YouTube user Daniel Olsson, for explaining this feature, without
# whom this feature probably would not have made its way to glkfu(1).
#------------------------------------------------------------------------------

if [[ $AssumeYes != True ]]; then
	read -d '' <<-EOF

		INFO: If you choose 'Y' to the following question, the resulting kernel
		      image will NOT include debugging info, resulting in a smaller kernel
		      image and speeding up compile-time.

		      If enabled, debug symbols will be added to the kernel and modules
		      (gcc -g), and is needed if you intend to use kernel crashdump or
		      binary object tools like crash, kgdb, LKCD, gdb, etc on the kernel.

		Choose 'N' only if you plan to debug the kernel.

	EOF

	printf '%s' "$REPLY"
fi

if Ask "Disable 'DEBUG_INFO' parameter?"; then
	scripts/config --disable DEBUG_INFO
	Exit=$?

	if (( Exit > 1 )); then
		Err 0 "Failed to disable 'DEBUG_INFO' in 'config'."
		exit $Exit
	fi
fi

#---------------------------------------Begin Compiling and Building the Kernel

Ask 'Compile kernel and build Debian packages?' || exit 0

read -d '' <<-EOF

	NOTE: This operation may take some time, depending on your system
	      performance and the options previously selected.

EOF

printf '%s' "$REPLY"

if Ask 'Omit source packages?'; then
	$Make $SilentMake bindeb-pkg
else
	$Make $SilentMake deb-pkg
fi

printf 'Attempting to compile kernel & build Debian packages.\n'

DebPKGExit=$?

#-----------------------------------------------------------------------Cleanup

if (( DebPKGExit == 0 )); then
	printf 'Kernel compilation and package building finished.\n'
else
	Err 0 "Non-zero exit status from make(1) after 'deb-pkg' operation."
fi

if Ask 'Delete kernel source files?'; then
	rm -r "../${LatestTar%.tar.xz}"
fi

printf 'Finished.\n'
