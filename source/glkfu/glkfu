#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/glkfu
#------------------------------------------------------------------------------
# Project Name      - Extra/source/glkfu
# Started On        - Sun  6 Dec 19:41:35 GMT 2020
# Last Change       - Wed 16 Dec 04:55:10 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# [G]et [L]atest [K]ernel [f]or [U]buntu. That said, this could probably work
# fine with Debian, and no doubt for distributions based thereon.
#
# Compile the latest kernel from source, using your current kernel's
# configuration file, then pack it all up into Debian packages for easy
# installation.
#
# Written and tested on a minimalistic, non-standard Ubuntu 18.04 installation.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: If we exit during `$Make deb-pkg`, SignalHandler() won't work; why?
#TODO: If prematurely exit before doing anything, existing files still go poof.
#
#      This only happens with, for example, an existing file by the same name
#      as the target Linux Tar archive. A workaround, if you must keep these
#      files, which would be overwritten by GLKFU anyway, would be to use one
#      of the `-k` or `--keep-files` flags.
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.28-1ubuntu1)
#   make (>= 4.1-9.1ubuntu1)
#   tar (>= 1.29b-2)
#   wget (>= 1.19.4-1) | curl (>= 7.58.0-2ubuntu3.10)
#------------------------------------------------------------------------------

CurVer='2020-12-16'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --config [FILE]      - Use FILE instead of newest available.
		  -D, --build-dir [PATH]   - Build in PATH instead of CWD.
		  -I, --ignore-deps        - Ignore compile & build dependencies.
		  -O, --override [FILE]    - Use FILE instead of the latest. See below.
		  -c, --cores [INT]        - Use INT CPU cores (jobs) for make(1).
		  -d, --just-download      - Just download the Linux Tar archive.
		  -i, --ignore-versions    - Disregard current & new version strings.
		  -j, --just-check         - Just check kernel.org for a newer version.
		  -k, --keep-files         - Keep files if $Progrm unexpectedly exits.
		  -o, --output [TYPE]      - Output TYPE, for scripting. See below.
		  -y, --assume-yes         - Assume user answers yes when prompted.

		  When specifying an alternative tarball FILE, ensure that you use the
		  same filename format as it normally is. Below is the REGEX for the
		  expected format:

		    '^linux-[0-9\\\.]+\\\.tar\\\.xz$'

		  Otherwise $Progrm will error out.

		  Available TYPEs to output:

		    current                - Current Linux version.
		    current.[maj|min|rev]  - Major, minor, or revision of 'current'.
		    current.split          - Current Linux version, split by spaces.
		    latest                 - Latest Linux version.
		    latest.[maj|min|rev]   - Major, minor, or revision of 'latest'.
		    latest.split           - Latest Linux version, split by spaces.
		    latest.tarball         - Filename of the latest tarball.

		  When just checking for a new kernel version, the following exit
		  statuses will be used by $Progrm:

		    3 = Unable to determine if the latest version is newer or not.
		    2 = No new version was found.
		    0 = A new version was (probably) found.

		  By default, $Progrm will use the maximum number of cores for make(1).
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

Make="make -j ${Cores:-1}"
VerFile='/proc/version'
ProcInfoFile='/proc/cpuinfo'
StatusFile='/var/lib/dpkg/status'
KernOrg='https://www.kernel.org'
KernOrgMirrs='https://mirrors.edge.kernel.org'
BuildDir='.'

ValidOutputs=(
    'current' 'current.split' 'current.maj' 'current.min' 'current.rev'
    'latest' 'latest.split' 'latest.maj' 'latest.min' 'latest.rev'
    'latest.tarball'
)

# Dependencies noted to be required in building Linux v5.9.12.
ReqPKGs=(
	'bc' # - GNU bc arbitrary precision calculator language
	'bison' # - YACC-compatible parser generator
	'build-essential' # - Informational list of build-essential packages
	'fakeroot' # - tool for simulating superuser privileges
	'flex' # - fast lexical analyzer generator
	'libelf-dev' # - libelf1 development libraries and header files
	'libssl-dev' # - Secure Sockets Layer toolkit - development files
	'rsync' # - fast, versatile, remote (and local) file-copying tool
)

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--override|-O)
			shift

			if [ -z "$1" ]; then
				Err 1 'Missing tarball FILE with which to override.'
			else
				LatestTar=$1
			fi ;;
		--assume-yes|-y)
			AssumeYes='True' ;;
		--build-dir|-D)
			shift

			if [ -z "$1" ]; then
				Err 1 "Build PATH not specified."
			elif ! [ -d "$1" ]; then
				Err 1 "Directory '$1' not found."
			else
				BuildDir=${1%/}
			fi ;;
		--ignore-deps|-I)
			IgnoreDeps='True' ;;
		--cores|-c)
			shift

			if [ -z "$1" ]; then
				Err 1 'Unspecified number of cores for make(1) to use.'
			elif ! [[ $1 =~ ^[0-9]+$ ]]; then
				Err 1 'Invalid number of cores specified.'
			else
				Cores=$1
			fi ;;
		-i|--ignore-versions)
			IgnoreVers='True' ;;
		--just-check|-j)
			JustCheck='True' ;;
		--keep-files|-k)
			KeepFiles='True' ;;
		--just-download|-d)
			JustDownload='True' ;;
		--output|-o)
			shift

			if [ -z "$1" ]; then
				Err 1 "No TYPE provided for '--output|-o' OPT."
			else
				for CurOutput in "${ValidOutputs[@]}"; {
					if [ "$CurOutput" == "$1" ]; then
						Found='True'
						break
					fi
				}

				if [ "$Found" != 'True' ]; then
					Err 1 "Output TYPE not found -- see: $Progrm --help"
				fi

				Output=$1
			fi ;;
		--config|-C)
			shift

			if [ -z "$1" ]; then
				Err 1 'Kernel configuration FILE not provided.'
			elif ! [ -f "$1" ]; then
				Err 1 "File '$1' not found."
			else
				ConfigOverrideFile=$1
			fi ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

if [ "$JustCheck" == 'True' -a "$JustDownload" == 'True' ]; then
	Err 1 "OPTs '--just-check|-j' and '--just-download|-d' both used."
elif [ "$IgnoreVers" == 'True' -a "$JustCheck" == 'True' ]; then
	Err 1 "OPTs '--just-check|-j' and '--ignore-versions|-i' both used."
fi

DepCount=0
for Dep in sync make tar rm cp sha256sum; do
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		let DepCount++
	fi
done

[ $DepCount -gt 0 ] && exit 1

[ "$AssumeYes" == 'True' ] && printf "Assuming 'Y' to everything.\n"

#----------------------------------------------------------------Main Functions

Get(){
	if type -P curl &> /dev/null; then
		[ "$1" == '-' ] || Progress='--progress-bar'

		curl ${Progress:-\-s} -o "$1" "$2" ||
			Err $? 'Downloading with cURL failed.'
	elif type -P wget &> /dev/null; then
		[ "$1" == '-' ] || Progress='--show-progress'

		wget $Progress -q -O "$1" "$2" ||
			Err $? 'Downloading with WGet failed.'
	else
		Err 1 "Neither 'WGet' nor 'cURL' were found."
	fi

	unset DoStdIn Args
}

Ask(){
	[ "$AssumeYes" == 'True' ] && return 0

	read -ep "Q: $1 (Y/N) " Response
	case $Response in
		[Yy]|[Yy][Ee][Ss])
			return 0 ;;
		[Nn]|[Nn][Oo])
			return 1 ;;
		*)
			Err 1 'Unrecognised response -- quitting.' ;;
	esac
}

FileChk(){
	[ -f "$1" ] || Err 1 "File '$1' not found."
	[ -r "$1" ] || Err 1 "File '$1' unreadable."
}

JustOutput(){
	[ -z "$Output" ] && return 0
	[ "$Output" == "$1" ] || return 0

	printf '%s\n' "$2"
	exit 0
}

#------------------------------------Determine the Latest Stable Kernel Version

# Parse page data to get the tarball filename of the latest stable kernel.
if [ -z "$LatestTar" ]; then
	while read; do
		if [[ $REPLY =~ ^[[:space:]]+'<td id="latest_link">'$ ]]; then
			FirstLineFound='True'
		elif [ "$FirstLineFound" == 'True' ]; then
			IFS='/' read -a Buffer <<< "$REPLY"
			LatestTar=${Buffer[7]%%\"*}
			break
		fi
	done <<< "$(Get - "$KernOrg")"
fi

JustOutput 'latest.tarball' "$LatestTar"

# Just in-case, check the resulting filename is valid.
if ! [[ $LatestTar =~ ^linux-[0-9]+\.[0-9\.]+.tar\.xz$ ]]; then
	Err 1 "Tarball filename '$LatestTar' not valid."
fi

# From the tarball filename, store just the version string. Shouldn't be a need
# to check the value here, as checking is done above.
LatestVerBuffer=${LatestTar//[!0-9.]/}
LatestVer=${LatestVerBuffer%..}

# Get the major number of the latest version.
LatestVerMaj=${LatestVer%%.*}

JustOutput 'latest' "$LatestVer"

[ -z "$Output" ] && printf 'Latest Linux version: %s\n' "$LatestVer"

#---------------------Determine if the Latest is Newer than the Current Version

FileChk "$VerFile"

read -a Line < "$VerFile"
CurVer=${Line[2]}

JustOutput 'current' "$CurVer"

# Testing lines.
#LatestVer='5.10'
#CurVer='5.10'

[ -z "$Output" ] && printf 'Current Linux version: %s\n' "$CurVer"

NewVerAvail='False'
if [ "$IgnoreVers" != 'True' ]; then
	if [[ $CurVer =~ ^[0-9\.]+-.* ]]; then
		printf 'Unable to determine if latest kernel is newer.\n' 1>&2

		if [ "$JustCheck" == 'True' ]; then
			NewVerAvail='Error'
		else
			Ask "Continue with $Progrm?" || exit 3
		fi
	else
		# Split strings up by major, minor, and revision, then compare them.
		# Where C_* is for the current version, and L_* for the latest.
		read C_Maj C_Min C_Rev <<< "${CurVer//./ }"
		read L_Maj L_Min L_Rev <<< "${LatestVer//./ }"

		JustOutput 'current.split' "$C_Maj $C_Min $C_Rev"
		JustOutput 'latest.split' "$L_Maj $L_Min $L_Rev"
		JustOutput 'current.maj' "$C_Maj"
		JustOutput 'current.min' "$C_Min"
		JustOutput 'current.rev' "$C_Rev"
		JustOutput 'latest.maj' "$L_Maj"
		JustOutput 'latest.min' "$L_Min"
		JustOutput 'latest.rev' "$L_Rev"

		for Field in "$C_Maj:$L_Maj" "$C_Min:$L_Min" "$C_Rev:$L_Rev"; {
			Left=${Field%:*}; Right=${Field#*:}
			if [ ${Right:-0} -gt ${Left:-0} ]; then
				NewVerAvail='True'
				break
			fi
		}
	fi

	if [ $NewVerAvail == 'False' ]; then
		printf "No new version available -- nothing to do.\n"
		exit 0
	fi
else
	printf 'Ignoring version strings.\n'
fi

if [ "$JustCheck" == 'True' ]; then
	if [ "$NewVerAvail" == 'True' ]; then
		exit 0
	elif [ "$NewVerAvail" == 'False' ]; then
		exit 2
	elif [ "$NewVerAvail" == 'Error' ]; then
		exit 3
	fi

	exit 2 # <-- No new version is available.
fi

#----------------------------------Look for Compilation & Building Dependencies

if [ "$IgnoreDeps" != 'True' ]; then
	FileChk "$StatusFile"

	II=' install ok installed'
	while IFS=':' read -a Line; do
		if [ "${Line[0]}" == 'Package' ]; then
			Package=${Line[1]// }
		elif [ "${Line[0]}" == 'Status' ] && [ "${Line[1]}" == "$II" ]; then
			Packages+=("$Package")
		fi
	done < "$StatusFile"

	for DepPKG in "${ReqPKGs[@]}"; {
		Found='False'

		for StatusPKG in "${Packages[@]}"; {
			[ "$StatusPKG" == 'initramfs-tools' ] && HaveInitramfsPKG='True'

			if [ "$DepPKG" == "$StatusPKG" ]; then
				#printf 'Dependency met: %s\n' "$StatusPKG"
				Found='True'
				let Count++
			fi
		}

		if [ "$Found" != 'True' ]; then
			printf 'Dependency NOT met: %s\n' "$DepPKG"
			MissingDeps+=("$DepPKG")
		fi
	}

	type -P sudo &> /dev/null && HasSudo='True'

	# Instruct the user accordingly, if dependencies are missing.
	if [ $Count -ne ${#ReqPKGs[@]} ]; then
		Err 0 'One or more dependencies not met.'

		if [ "$HasSudo" == 'True' ]; then
			printf 'Refer to the following command:\n'
			printf '\n$ sudo apt-get install '
		else
			printf '\n# apt-get install '
		fi

		for PKG in "${MissingDeps[@]}"; {
			printf '%s ' "$PKG"
		}

		printf '\n\nNothing to do -- quitting.\n'
		exit 1
	fi

	if [ "$HaveInitramfsPKG" != 'True' ]; then
		if [ "$HasSudo" == 'True' ]; then
			CMD='$ sudo apt-get install initramfs-tools'
		else
			CMD='# apt-get install initramfs-tools'
		fi

		while read; do
			printf '%s\n' "$REPLY"
		done <<-EOF

			NOTE:      Before you install the Debian packages for at least the 'image'
			           and 'headers', be sure that you install the 'initramfs-tools'
			           package in order to have an 'initrd' file generated for you.

			WARNING:   Failure to correctly generate an 'initrd' file for the installed
			           kernel will typically result in a kernel panic when trying to
			           boot from it.

			           Refer to the following command to remedy this:

			           $CMD

		EOF
	fi
else
	printf 'Told to ignore dependencies.\n'
fi

#-----------------------------------------------Determining Number of CPU Cores

if [ -f "$ProcInfoFile" -a -r "$ProcInfoFile" ]; then
	while read -a Line; do
		if [ "${Line[0]}${Line[1]}" == 'cpucores' ]; then
			TTLCores=${Line[3]}
			break
		fi
	done < "$ProcInfoFile"
else
	TTLCores=`nproc`
fi

Cores=$TTLCores

if ! [[ $TTLCores =~ ^[0-9]+$ ]]; then
	Err 0 'Unable to determine available number of CPU cores.'
	Ask 'Continue with just the 1 core/thread?'

	Cores=1
fi

printf 'Using %d/%d available CPU core(s).\n' $Cores $TTLCores

#--------------------------------------------Begin Trapping Signals for Cleanup

# Needs to be here because we need values from above.
SigHandler(){
	Sig=$?

	# Clear the ^C notation for SIGINT.
	printf '\r'

	ActionsDetected=0

	# Should solve error when trying to clean up extracted archive contents.
	[[ "$PWD" == */"$BuildDir" ]] && cd ..

	if [ -f "$BuildDir/$LatestTar" ]; then
		rm -v "$BuildDir/$LatestTar"
		let ActionsDetected++
	fi

	if [ -f "$BuildDir/sha256sums.asc" ]; then
		rm -v "$BuildDir/sha256sums.asc"
		let ActionsDetected++
	fi

	if [ -d "$BuildDir/${LatestTar%.tar.xz}" ]; then
		# Some files are write-protected, hence the `-f` flag.
		rm -rfv "$BuildDir/${LatestTar%.tar.xz}"
		let ActionsDetected++
	fi

	# Files, like Debian packages, created by make(1) will not be removed
	# in-case the user stores other files there. This could be handled by just
	# using the filenames produced, but who knows what the filenames will be.
	# Does it vary with kernel version? Better leave this to the user.
	if [ $ActionsDetected -gt 0 ]; then
		printf '%s finished cleaning up after unexpected exit.\n' "${Progrm^^}"
	fi

	exit $Sig
}

trap SigHandler EXIT INT

#---------------------------------Download Applicable Tarball & Verify the File

while read; do
	printf '%s\n' "$REPLY"
done <<-EOF

	CAUTION: Compilation takes up several GBs of disk space. Depending on the
	         options selected, you may use over 20GB. If you don't have enough
	         disk space during compilation, it will fail and your time will be
	         wasted.

EOF

Ask "Begin downloading '$LatestTar' tarball?" || exit 1
Ask 'No build directory specified -- use CWD?' || exit 1

printf 'Downloading tarball...\n'
URL="$KernOrgMirrs/pub/linux/kernel/v$LatestVerMaj.x/$LatestTar"
Get "$BuildDir/$LatestTar" "$URL"

printf 'Downloading sha256sums...\n'
URL="$KernOrgMirrs/pub/linux/kernel/v$LatestVerMaj.x/sha256sums.asc"
Get "$BuildDir/sha256sums.asc" "$URL"

printf 'Verifying...\n'
sha256sum --status --ignore-missing -c "${BuildDir%/}"/sha256sums.asc

if [ $? -gt 0 ]; then
	Err 1 'Non-zero exit status when verifying download.'
else
	printf 'File verified successfully.\n'
fi

rm -v "${BuildDir%/}"/sha256sums.asc

if [ "$JustDownload" == 'True' ]; then
	trap - EXIT # <-- Ensure we exit as normal.
	exit 0
fi

#-----------------------------------------------Extract Contents of the Tarball

Ask 'Begin extracting tarball?' || exit 1

printf 'Extracting tarball...\n'
tar -C "$BuildDir" -xvf "$BuildDir/$LatestTar"

if Ask 'Now that files are extracted, delete the tarball?'; then
	rm -v "$BuildDir/$LatestTar"
fi

#----------------------------------------------Copy Over Existing Configuration

if [ -n "$ConfigOverrideFile" ]; then
	printf "Using file: '%s'\n" "$ConfigOverrideFile"

	cp -v "$ConfigOverrideFile" "$BuildDir/${LatestTar%.tar.xz}/.config"
else
	printf 'Finding a suitable kernel configuration file to use.\n'

	Found=()
	printf 'Looking for kernel configurations...\n'
	for File in /boot/config-*; {
		Found+=("$File=${File//[!0-9]/}")
	}

	printf 'Found %d configuration file(s).\n' ${#Found[@]}

	Top=0
	for KeyVal in "${Found[@]}"; {
		[ ${KeyVal##*=} -gt ${Top##*=} ] && Top=$KeyVal
	}

	printf "Using file: '%s'\n" "${Top%=*}"

	cp -v "${Top%=*}" "$BuildDir/${LatestTar%.tar.xz}/.config"
fi

#--------------------------------------------------------Process Configurations

cd "$BuildDir/${LatestTar%.tar.xz}"

if Ask 'Use default values for new CONFIG parameters?'; then
	while read; do
		if [[ $REPLY =~ ^.config:[0-9]+:warning:\ unexpected\ data: ]]; then
			UnexpectedData='True'
			printf '%s\n' "$REPLY"
		elif [[ $REPLY =~ ^.config:[0-9]+: ]]; then
			PossibleErrors='True'
			printf '%s\n' "$REPLY"
		fi
	done <<< "$($Make olddefconfig 2>&1)"

	if [ "$UnexpectedData" == 'True' ]; then
		Err 1 "Unexpected data found in '.config' file."
	elif [ "$PossibleErrors" == 'True' ]; then
		Err 0 "Possible errors found in '.config' file."
		Ask "Continue with potentially problematic '.config' file?"
	fi
else
	$Make silentoldconfig
fi

if Ask 'Strip unneeded modules for the current system?'; then
	$Make localmodconfig
	Exit=$?

	if [ $Exit -gt 1 ]; then
		Err 0 'Unexpected (non-zero) exit by make(1).'
		printf 'NOTE: You may need to start again.\n'
		exit $Exit
	fi
fi

#---------------------------------------Begin Compiling and Building the Kernel

# Revert signal handling back to the way it was.
[ "$KeepFiles" == 'True' ] || trap - EXIT INT

Ask 'Begin compiling kernel, then building Debian packages for it?' || exit 1
printf 'Attempting to compile kernel & build Debian packages...\n'
$Make deb-pkg

DebPKGExit=$?

#-----------------------------------------------------------------------Cleanup

if [ $DebPKGExit -eq 0 ]; then
	printf 'Kernel compilation and package building finished.\n'
else
	Err 0 "Non-zero exit status detected by make(1) after 'deb-pkg' operation."
fi

if Ask 'Remove Kernel source files?'; then
	rm -rv "../${LatestTar%.tar.xz}"
fi

printf 'Synchronising cached writes...\n'
sync

printf 'Finished.\n'
