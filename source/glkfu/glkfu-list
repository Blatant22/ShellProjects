#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/glkfu-list
#------------------------------------------------------------------------------
# Project Name      - Extra/source/glkfu/glkfu-list
# Started On        - Sun 20 Dec 03:09:11 GMT 2020
# Last Change       - Fri  5 Mar 00:24:38 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Very basic complimentary tool to GLKFU to simply list out all of the
# available XZ tarballs stored on kernel.org, whether they're stable or not.
#
# Features:
#
#TODO: Consider some sort of caching system, like wcdl(1).
#
#      This could be updated when a new version is detected by glkfu(1).
#
#TODO: Display just kernel versions, not the tarball filename.
#
#      I think it would look tidier if this were the case, also for the
#      `glkfu-changes` helper, and `glkfu` itself. Perhaps just have `glkfu`
#      deal with the tarball filename automatically, instead of putting that on
#      the user.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   glkfu (>= 2020-12-20)
#   libsort-versions-perl (>= 1.62-1)
#   libwww-perl (>= 6.31-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

require LWP::Simple;
require Sort::Versions;

use 5.22.1;
use strict;
use warnings;
use autodie;
use LWP::Simple;
use Sort::Versions 'versioncmp';

no warnings 'uninitialized';

my $CurVer = '2021-03-05';
my $Progrm = ($0 =~ m{(?:.*/)?([^/].*)})[0];

sub Usage {
	print(qq{Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -a, --all                - List kernels from all major releases.

		  The current version is by default highlighted in green, if possible.
		  Unless otherwise specified, only versions from the current major
		  releasee are listed.
	} =~ tr/\t//dr)
}

my $Domain = 'https://www.kernel.org';
my $Releases = "$Domain/category/releases.html";

my $DoColor = 1;
my $AllKerns = 0;

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$DoColor = 0
	} elsif ($ARGV[0] =~ '^(--all|-a)$') {
		$AllKerns = 1
	} else {
		die("Incorrect option(s) specified")
	}

	shift()
}

# Parse 'releases.html' page for the table of LTS kernels.
my (@LongTerms, $TableFound);
foreach (split("\n", get($Releases))) {
	'<caption>Longterm release kernels</caption>' and $TableFound = 'True';

	if ($TableFound eq 'True') {
		push(@LongTerms, $1) if /^<tr><td>([[:digit:].]+)<\/td>$/;

		$_ eq '</table>' and last;
	}
}

# Gather list of applicable major releases from the directory names.
my @KernVers;
my $LatestMajor = `glkfu -o latest.maj`;
foreach (split("\n", get("$Domain/pub/linux/kernel"))) {
	my $File = (m{(?:.*>)?(.*)?(?:<.*)})[0];
	next unless $File =~ '^v\d+\.[\dx]+/';

	if ($AllKerns) {
		push(@KernVers, $File)
	} else {
		if ($LatestMajor =~ '^[[:digit:]]+$') {
			my $ListedMajor = $File =~ s/^v(\d+)\.[\dx]+\//$1/r;
			if ($ListedMajor == $LatestMajor) {
				push(@KernVers, $File)
			}
		} else {
			die('Cannot determine valid major release')
		}
	}
}

# Gather list of kernel versions, then turn them into valid tarball filenames.
my (@Tarballs, @Versions);
foreach my $Version (@KernVers) {
	foreach (split("\n", get("$Domain/pub/linux/kernel/$Version"))) {
		my $File = (m{(?:.*>)?(.*)?(?:<.*)})[0];

		next unless $File =~ '^linux-[\d\.]+.tar.xz$';

		push(@Versions, (m{(?:linux-)([\d\.]+)(?:\.tar\.xz)})[0])
	}
}

# Get and handle the current kernel version string.
chomp(my $CurKernVer = `glkfu -o current`);
if ($CurKernVer =~ '(^[[:digit:]]+.[[:digit:]]+).0$') {
	$CurKernVer = $1 # <-- Because *.*.0 shows as *.* on site.
}

# List the kernels.
foreach my $Version (sort({versioncmp($a, $b)} @Versions)) {
	if ($Version eq $CurKernVer and $DoColor) {
		printf("\e[1;32mlinux-%s.tar.xz\e[0m", $Version)
	} else {
		printf("linux-%s.tar.xz", $Version)
	}

	# Mark LTS releases, with or without color.
	if (grep({$_ eq $Version} @LongTerms)) {
		if ($DoColor) {
			print("\e[2;37m  <-- LTS\e[0m\n")
		} else {
			print("  <-- LTS\n")
		}
	} else {
		print("\n")
	}
}
