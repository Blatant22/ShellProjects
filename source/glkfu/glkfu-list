#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/local/bin/glkfu-list
#------------------------------------------------------------------------------
# Project Name      - Extra/source/glkfu/glkfu-list
# Started On        - Sun 20 Dec 03:09:11 GMT 2020
# Last Change       - Mon  5 Jun 17:31:32 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Very basic complimentary tool to GLKFU to simply list out all of the
# available XZ tarballs stored on kernel.org, whether they're stable or not.
#
# Features:
#
#TODO: Consider some sort of caching system, like wcdl(1).
#
#      This could be updated when a new version is detected by glkfu(1).
#
#TODO: Display just kernel versions, not the tarball filename.
#
#      I think it would look tidier if this were the case, also for the
#      `glkfu-changes` helper, and `glkfu` itself. Perhaps just have `glkfu`
#      deal with the tarball filename automatically, instead of putting that on
#      the user.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   glkfu (>= 2020-12-20)
#   libwww-perl (>= 6.31-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use LWP::Simple;

no warnings 'uninitialized';

use constant VERSION => '2023-06-05';
use constant PROGRAM => 'glkfu-list';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -a, --all                - List kernels from all major releases.

		  The current version is by default highlighted in green, if possible.
		  Unless otherwise specified, only versions from the current major
		  releasee are listed.
	} =~ tr/\t//dr)
}

use constant DOMAIN => 'https://www.kernel.org';

my $DoColor = 1;
my $AllKerns = 0;

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$DoColor = 0
	} elsif ($ARGV[0] =~ '^(--all|-a)$') {
		$AllKerns = 1
	} else {
		die("Err: Incorrect option(s) specified.\n")
	}

	shift()
}

# Gather list of applicable major releases from the directory names.
my @KernVers;
my $LatestMajor = `glkfu -o latest.maj`;
foreach (split("\n", get(DOMAIN . '/pub/linux/kernel'))) {
	my $File = (m{(?:.*>)?(.*)?(?:<.*)})[0];
	next() unless $File =~ '^v\d+\.[\dx]+/';

	if ($AllKerns) {
		push(@KernVers, $File)
	} else {
		if ($LatestMajor =~ '^\d+$') {
			my $ListedMajor = $File =~ s/^v(\d+)\.[\dx]+\//$1/r;
			push(@KernVers, $File) if $ListedMajor == $LatestMajor
		} else {
			die("Err: Cannot determine valid major release.\n")
		}
	}
}

# Gather list of kernel versions, then turn them into valid tarball filenames.
my (@Tarballs, @Versions);
foreach my $Version (@KernVers) {
	foreach (split("\n", get(DOMAIN . "/pub/linux/kernel/$Version"))) {
		my $File = (m{(?:.*>)?(.*)?(?:<.*)})[0];

		next() unless $File =~ '^linux-[\d\.]+.tar.xz$';

		my $Version = (m{(?:linux-)([\d\.]+)(?:\.tar\.xz)})[0];
		push(@Versions, $Version)
	}
}

# Get and handle current version string. Because *.*.0 shows as *.* on site.
chomp(my $CurKernVer = `glkfu -o current`);
$CurKernVer = $1 if $CurKernVer =~ '(^\d+.\d+).0$';

# Inspired by `versioncmp()` from `Sort::Versions`. This helps to sort strings
# with '.'-delimited parts of only numbers, without needing to install
# something like the 'libsort-versions-perl' package.
#
# This assumes only numeric, 3-part, period-delimited version strings.
sub Compare($;$) {
	my @A_Parts = split(/\./, $_[0]);
	my @B_Parts = split(/\./, $_[1]);
	while (@A_Parts and @B_Parts) {
		my $A = shift(@A_Parts);
		my $B = shift(@B_Parts);

		return($A <=> $B) if $A <=> $B
	}

	return(@A_Parts <=> @B_Parts)
}

# List the kernels.
foreach my $Version (sort({Compare($a, $b)} @Versions)) {
	if ($Version eq $CurKernVer and $DoColor) {
		print("\e[92mlinux-$Version.tar.xz\e[0m\n")
	} else {
		print("linux-$Version.tar.xz\n")
	}
}
