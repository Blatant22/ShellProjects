#!/bin/bash
#cito M:755 O:0 G:0 T:/usr/bin/lspkg
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/lspkg (List Packages)
# Started On	    - Sun 17 Sep 04:13:30 BST 2017
# Last Change       - Fri  6 Dec 22:51:05 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

CurVer='2019-12-06'
Progrm=${0##*/}

#TODO - The ignore case flag won't work when specifying glob matching.
#TODO - Add ability to search only the whole word, like `STRING`, not `*STRING*`.

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

Domain='https://github.com'

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Search through, test for, and list out installed packages.

		SYNTAX:     $Progrm [OPTS] [SEARCH_1] [SEARCH_2] [SEARCH_3] ...

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --no-describe|-N        - Do not display package descriptions.
		            --name-only|-n          - Match only the package names.
		            --ignore-case|-i        - Match both upper- and lower-case.
		            --show-arch|-a          - Include package arch-types.
		            --match-with T          - Where T is glob or the default, regex.
		            --count|-c              - Display the total number of packages.

		NOTE:       This shell program is only compatible with Debian or Ubuntu based
		            systems, as it parses dpkg-query's output.

		            Where SEARCH is an optional regex match of an installed package. By
		            default, the match will be looked for on the whole line, which includes
		            the package name and its short description, like apt-cache search.

		            If you include --name-only or -n, then the match will be looked for
		            only in the name, like apt-cache -n search. This is to keep the
		            behavior predictable and easy to use.

		            Using --show-arch|-s allows for those with a package for both
		            architectures to be shown, instead of just one; this could account
		            for any inconsistencies if the package count were checked manually.

		            An exit status of 4 means no match(es) were found.

		SITE:       $Domain/terminalforlife/Extra
	EOF
}

PACKNAME="{Package}"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"
			exit 0 ;;
		--debug|-D)
			DebugMe='true' ;;
		--no-describe|-N)
			NO_DESCRIBE='true' ;;
		--ignore-case|-i)
			IGNORE_CASE='true' ;;
		--match-with)
			shift

			if [[ $1 =~ ^(glob|regex)$ ]]; then
				MATCH_WITH=$1
			else
				Err 1 $LINENO "Incorrect match type provided."
			fi ;;
		--name-only|-n)
			NAME_ONLY='true' ;;
		--show-arch|-a)
			PACKNAME="{Binary:Package}" ;;
		--count|-c)
			DOCOUNT='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

PKG=($@)

if ! type -fP dpkg-query > /dev/null 2>&1; then
	Err 1 $LINENO "Dependency 'dpkg-query' not met."
fi

[ "$DebugMe" == 'true' ] && set -x

PKG_LIST(){
	if ! dpkg-query --show -f="\${db:Status-Abbrev} \$${PACKNAME} - \${binary:Summary}\n" \*; then
		Err 1 $LINENO "Non-zero exit status for: dpkg-query"
	fi
}

MATCH(){
	SEARCH_RESULT+=1

	if ! [ "$NO_DESCRIBE" == 'true' ]; then
		printf "%s\n" "$1"
	else
		printf "%s\n" "${1%% - *}"
	fi
}

[ "$IGNORE_CASE" == 'true' ] && shopt -s nocaseglob

declare -i COUNT=0
declare -i SEARCH_RESULT=0
while read -a X; do
	if ! [ "$SHOWARCH" == 'true' ]; then
		# Remove duplicate entries. This works because dpkg-query is outputting in
		# alphabetical order, else this would surely be useless.
		[ "${X[1]}" == "$OLD" ] && continue
	fi

	if [ "${X[0]}" == "ii" ]; then
		unset BUF
		COUNT+=1

		# No new line character as this is an array. Otherwise every word
		# would print on a new line. The final new line is added when the
		# text is displayed on the screen with echo.
		printf -v BUF "%s " ${X[@]/ii}
		[ "$BUF" ] || continue

		# If there are user-specified matches to find, then iterate over
		# them by checking to see if each current package matches each one
		# in the list of ones the user specified.
		if [ "${PKG[0]}" ]; then
			USER_SEARCH='true'

			for P in ${PKG[@]}; {
				if [ "$NAME_ONLY" == 'true' ]; then
					FILTER=" ${X[1]}"
				else
					FILTER=${X[@]/ii}
				fi

				case ${MATCH_WITH:-UNSET} in
					glob)
						if [[ $FILTER == " "$P ]]; then
							MATCH "${BUF% }"
						fi ;;
					regex|*)
						if [[ $FILTER =~ ${P/^/^ } ]]; then
							MATCH "${BUF% }"
						fi ;;
				esac
			}
		else
			# If there are no packages specified by the user, just show
			# all of the packages. Removing the space because of the
			# above printf command adding a trailing space.
			if ! [ "$NO_DESCRIBE" == 'true' ]; then
				printf "%s\n" "${BUF% }"
			else
				printf "%s\n" "${BUF%% - *}"
			fi
		fi

		if ! [ "$SHOWARCH" == 'true' ]; then
			# Save the current value to be checked when the next
			# package is processed.
			OLD=${X[1]}
		fi
	fi
done <<< "$(PKG_LIST)"

# Just in-case a later feature added below uses globs.
[ "$IGNORE_CASE" == 'true' ] && shopt -u nocaseglob

if [ "$DOCOUNT" == 'true' ]; then
	if ! [ "$USER_SEARCH" == 'true' ]; then
		printf "\nTOTAL: %'d\n" "$COUNT"
	else
		[ $SEARCH_RESULT -eq 0 ] && S= || S="\n"
		printf "${S}TOTAL: %'d/%'d\n" "$SEARCH_RESULT" "$COUNT"
	fi
fi

if [ "${PKG[*]}" -a ! $SEARCH_RESULT -gt 0 ]; then
	exit 4
fi

