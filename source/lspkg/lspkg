#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/lspkg
#------------------------------------------------------------------------------
# Project Name      - Extra/source/lspkg/lspkg
# Started On	    - Sun 17 Sep 04:13:30 BST 2017
# Last Change       - Wed 16 Feb 02:55:37 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# LSPKG has a fallback for those without dpkg-query(1) and sort(1), using
# Pure-BASH, to ensure most people can get something out of it.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: On Debian (Buster) 10, LSPKG won't show executable descriptions at all.
#
# Dependencies:
#
#   bash (>= 3.1)
#------------------------------------------------------------------------------

CurVer='2022-02-16'
Progrm='lspkg'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [SEARCH_1 [SEARCH_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --match-with TYPE        - Where T is glob or the default, regex.
		  -N, --no-describe        - Do not display package descriptions.
		  -a, --show-arch          - Include package arch-types.
		  -c, --count              - Display the total number of packages.
		  -i, --ignore-case        - Match both upper- and lower-case.
		  -n, --name-only          - Match only the package names.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

PkgName='{Package}'

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"
			exit 0 ;;
		--no-describe|-N)
			NoDescribe='true' ;;
		--ignore-case|-i)
			IgnoreCase='true' ;;
		--match-with)
			shift

			case $1 in
				glob|regex)
					MatchWith=$1 ;;
				*)
					Err 1 'Incorrect match type provided.' ;;
			esac ;;
		--name-only|-n)
			NameOnly='true' ;;
		--show-arch|-a)
			PkgName='{Binary:Package}' ;;
		--count|-c)
			DoCount='true' ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ $IgnoreCase == 'true' && "$MatchWith" == glob ]]; then
	Err 1 'Case-insensitive glob matching is not supported.'
fi

Package=("$@")

PkgList() {
	if type -P dpkg-query &> /dev/null; then
		dpkg-query -Wf="\${db:Status-Abbrev} \$${PkgName} - \${binary:Summary}\n" \*
		(( $? > 0 )) && Err 1 'Non-zero exit status for: dpkg-query'
	else
		local StatusFile='/var/lib/dpkg/status' Key Value Package
		if [[ -f $StatusFile && -r $StatusFile ]]; then
			local Key Value Package Status PkgsToSort

			while IFS=':' read Key Value; do
				case $Key in
					Package)
						Package=${Value# } ;;
					Status)
						Status=${Value# } ;;
					Description)
						if [[ $Status == install\ ok\ installed ]]; then
							PkgsToSort+=("ii $Package - ${Value# }")
						fi ;;
				esac
			done < "$StatusFile"

			if type -P sort &> /dev/null; then
				printf '%s\n' "${PkgsToSort[@]}" | sort -k 1
			else
				# Fallback alphanumeric sorting using the Bubble algorithm.
				local Len=${#PkgsToSort[@]} Iter Index
				for (( Iter = 0; Iter < Len; Iter++ )); {
					for (( Index = 0; Index < Len - (1 + Iter); Index++ )); {
						if [[ ${PkgsToSort[Index]} > ${PkgsToSort[Index + 1]} ]]; then
							local Temporary=${PkgsToSort[Index]}
							PkgsToSort[Index]=${PkgsToSort[Index + 1]}
							PkgsToSort[Index + 1]=$Temporary
						fi
					}
				}

				printf '%s\n' "${PkgsToSort[@]}"
			fi
		else
			Err 1 'Unable to aquire package list.'
		fi
	fi
}

Match() {
	(( SearchResult++ ))

	if ! [[ $NoDescribe == true ]]; then
		printf '%s\n' "$1"
	else
		printf '%s\n' "${1%% - *}"
	fi
}

Count=0
SearchResult=0
while read -a CurLine; do
	if ! [[ $ShowArch == true ]]; then
		# Remove duplicate entries. This works because dpkg-query is outputting in
		# alphabetical order, else this would surely be useless.
		[[ ${CurLine[1]} == $Old ]] && continue
	fi

	if [[ ${CurLine[0]} == ii ]]; then
		unset Buffer
		(( Count++ ))

		# No new line character as this is an array. Otherwise every word
		# would print on a new line. The final new line is added when the
		# text is displayed on the screen with `printf`.
		printf -v Buffer '%s ' ${CurLine[@]/ii}
		[[ -n $Buffer ]] || continue

		# If there are user-specified matches to find, then iterate over
		# them by checking to see if each current package matches each one
		# in the list of ones the user specified.
		if [[ -n ${Package[0]} ]]; then
			UserSearch='true'

			for CurPkg in ${Package[@]}; {
				if [[ $NameOnly == true ]]; then
					Filter=" ${CurLine[1]}"
				else
					Filter=${CurLine[@]/ii}
				fi

				case ${MatchWith:-UNSET} in
					glob)
						[[ $Filter == $CurPkg ]] && Match "${Buffer% }" ;;
					regex|*)
						[[ $Filter =~ $CurPkg ]] && Match "${Buffer% }" ;;
				esac
			}
		else
			# If there are no packages specified by the user, just show all of
			# the packages. Removing the space because of the above `printf`
			# builtin adding a trailing space.
			if ! [[ $NoDescribe == true ]]; then
				printf '%s\n' "${Buffer% }"
			else
				printf '%s\n' "${Buffer%% - *}"
			fi
		fi

		[[ $ShowArch == true ]] || Old=${CurLine[1]}
	fi
done <<< "$(PkgList)"

if [[ $DoCount == true ]]; then
	if ! [[ $UserSearch == true ]]; then
		printf "\nTOTAL: %'d\n" "$Count"
	else
		(( SearchResult == 0 )) && S= || S="\n"
		printf "${S}TOTAL: %'d/%'d\n" $SearchResult $Count
	fi
fi

if [[ -n ${Package[*]} ]] && ! (( SearchResult > 0 )); then
	exit 4
fi
