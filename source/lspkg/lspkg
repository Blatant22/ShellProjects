#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/lspkg
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/lspkg/lspkg
# Started On	    - Sun 17 Sep 04:13:30 BST 2017
# Last Change       - Thu 12 Nov 03:59:41 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Dependencies:
#
#   bash (>= 4.4.18-2)
#   dpkg (>= 1.19.0.5)
#----------------------------------------------------------------------------------

CurVer='2020-11-12'
Progrm=${0##*/}

Domain='https://github.com'

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [SEARCH_1 [SEARCH_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --match-with <TYPE>      - Where T is glob or the default, regex.
		  -D, --debug              - Enables the built-in bash debugging.
		  -N, --no-describe        - Do not display package descriptions.
		  -a, --show-arch          - Include package arch-types.
		  -c, --count              - Display the total number of packages.
		  -i, --ignore-case        - Match both upper- and lower-case.
		  -n, --name-only          - Match only the package names.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

PkgName='{Package}'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"
			exit 0 ;;
		--debug|-D)
			DebugMe='true' ;;
		--no-describe|-N)
			NoDescribe='true' ;;
		--ignore-case|-i)
			IgnoreCase='true' ;;
		--match-with)
			shift

			if [[ $1 =~ ^(glob|regex)$ ]]; then
				MatchWith=$1
			else
				Err 1 'Incorrect match type provided.'
			fi ;;
		--name-only|-n)
			NameOnly='true' ;;
		--show-arch|-a)
			PkgName='{Binary:Package}' ;;
		--count|-c)
			DoCount='true' ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ "$IgnoreCase" == 'true' -a "$MatchWith" == 'glob' ]; then
	Err 1 'Case-insensitive glob matching is not supported.'
fi

Package=($@)

type -fP dpkg-query 1> /dev/null 2>&1 ||
	Err 1 "Dependency 'dpkg-query' not met."

[ "$DebugMe" == 'true' ] && set -x

PkgList(){
	dpkg-query -Wf="\${db:Status-Abbrev} \$${PkgName} - \${binary:Summary}\n" \*\
		|| Err 1 'Non-zero exit status for: dpkg-query'
}

Match(){
	SearchResult+=1

	if ! [ "$NoDescribe" == 'true' ]; then
		printf '%s\n' "$1"
	else
		printf '%s\n' "${1%% - *}"
	fi
}

declare -i Count=0
declare -i SearchResult=0
while read -a CurLine; do
	if ! [ "$ShowArch" == 'true' ]; then
		# Remove duplicate entries. This works because dpkg-query is outputting in
		# alphabetical order, else this would surely be useless.
		[ "${CurLine[1]}" == "$Old" ] && continue
	fi

	if [ "${CurLine[0]}" == 'ii' ]; then
		unset Buffer
		Count+=1

		# No new line character as this is an array. Otherwise every word
		# would print on a new line. The final new line is added when the
		# text is displayed on the screen with echo.
		printf -v Buffer '%s ' ${CurLine[@]/ii}
		[ "$Buffer" ] || continue

		# If there are user-specified matches to find, then iterate over
		# them by checking to see if each current package matches each one
		# in the list of ones the user specified.
		if [ "${Package[0]}" ]; then
			UserSearch='true'

			for CurPkg in ${Package[@]}; {
				if [ "$NameOnly" == 'true' ]; then
					Filter=" ${CurLine[1]}"
				else
					Filter=${CurLine[@]/ii}
				fi

				case ${MatchWith:-UNSET} in
					glob)
						if [[ $Filter == $CurPkg ]]; then
							Match "${Buffer% }"
						fi ;;
					regex|*)
						if [[ $Filter =~ $CurPkg ]]; then
							Match "${Buffer% }"
						fi ;;
				esac
			}
		else
			# If there are no packages specified by the user, just show
			# all of the packages. Removing the space because of the
			# above printf command adding a trailing space.
			if ! [ "$NoDescribe" == 'true' ]; then
				printf '%s\n' "${Buffer% }"
			else
				printf '%s\n' "${Buffer%% - *}"
			fi
		fi

		[ "$ShowArch" == 'true' ] || Old=${CurLine[1]}
	fi
done <<< "$(PkgList)"

if [ "$DoCount" == 'true' ]; then
	if ! [ "$UserSearch" == 'true' ]; then
		printf "\nTOTAL: %'d\n" "$Count"
	else
		[ $SearchResult -eq 0 ] && S= || S="\n"
		printf "${S}TOTAL: %'d/%'d\n" "$SearchResult" "$Count"
	fi
fi

if [ "${Package[*]}" -a ! $SearchResult -gt 0 ]; then
	exit 4
fi

