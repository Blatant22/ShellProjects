#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/jotd
#------------------------------------------------------------------------------
# Project Name      - Extra/source/jotd
# Started On        - Fri  2 Mar 13:27:44 GMT 2018
# Last Change       - Sat 14 Mar 14:02:56 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Add other sites, in-case one or more fail.
#
# Bugs:
#
#TODO: Unable to fetch JOTD for a long time, now. Parsing fail, or site-side?
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.25-2)
#   libtflbp-sh (>= 2019-12-10)
#   ncurses-bin (>= 6.0+20160213-1)
#   wget (>= 1.17.1-1)
#------------------------------------------------------------------------------


set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-03-14'
Progrm=${0##*/}

Domain='http://www.laughfactory.com'

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Display a Joke of the Day on your terminal.

		SYNTAX:     $Progrm [OPTS]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --debug|-D              - Enable built-in Bash debugging.

		NOTE:       These jokes may or may not be tasteful!

		FILE:       Jokes are saved in:

		              /tmp/${Progrm}_store.txt

		            This is to avoid contacting the server on each execution of
		            $Progrm. When the system is restarted, assuming /tmp is
		            cleared, $Progrm will once again contact the server and
		            recreate the file with the current joke.

		SITE:       $Domain
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"
			exit 0 ;;
		--debug|-D)
			DebugMe='true' ;;
		*)
			Err 1 'Incorrect argument(s) specified.' ;;
	esac
	shift
done

ChkDep tee wget fold tput

[ "$DebugMe" == 'true' ] && set -x

URL="$Domain/jokes/joke-of-the-day"
File="/tmp/${Progrm}_store.txt"

MainOp(){
	if type -P curl 1> /dev/null 2>&1; then
		RawJoke=`curl -s "$URL"`
	elif type -P wget 1> /dev/null 2>&1; then
		RawJoke=`wget -q "$URL" -O -`
	else
		Err 0 "Dependency 'wget' or 'curl' not met."
	fi

	declare -i Count=1
	while read Line; do
		if [[ $Line =~ \<p\ id\=\"joke_[0-9]+\"\> ]]; then
			printf -v JokeID "%d" "${Line//[!0-9]}"
			[[ $JokeID =~ ^[0-9]+$ ]] && Count+=1
		elif [ $Count -eq 2 ]; then
			for Field in $Line; {
				if [[ $Field == *\<br\>* ]]; then
					printf "${Field//<br>/$'\n'} "
				elif [[ $Field == *\</p\>* ]]; then
					break
				else
					printf "%s " "$Field"
				fi
			}

			printf "\n"
			break
		fi
	done <<< "$RawJoke" | fold -s --width=`tput cols`
}

if [ -z "$(MainOp)" ]; then
	Err 1 'Fetching the JOTD is currently unavailable.'
elif ! [ -f "$File" ]; then
	MainOp | tee "$File"
else
	MainOp
fi
