#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/autoexec
#------------------------------------------------------------------------------
# Project Name      - Extra/source/autoexec/autoexec
# Started On        - Thu 31 Oct 22:49:41 GMT 2019
# Last Change       - Thu 17 Dec 20:39:49 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Using AutoExec for man pages is buggy, but functional.
#
#      More specifically, the prompt shows through and when ^C-ing, the last
#      line (message line with exit status) still shows. Pretty ugly. I'm not
#      sure this is something which can be fixed, as it's probably just a
#      limitation of Shell/terminals.
#
# Dependencies:
#
#   bash (>= 4.4.18-2)
#   coreutils (>= 8.28-1)
#   file (>= 1:5.32-2)
#   ncurses-bin (>= 6.1-1)
#------------------------------------------------------------------------------

CurVer='2020-12-17'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [FILE] [FILE_ARGS]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -E, --no-exit            - Omit the exit status on the bottom-right.
		  -S, --no-spinner         - Omit 'spinner' from the waiting message.
		  -W, --no-waitmsg         - Omit the waiting message at the end.
		  -e, --exec <NAME>        - Use NAME as the interpreter or program.
		  -o, --once               - Execute FILE only once; no looping.
		  -r, --refresh <INT>      - Adjust to fit your performance needs.

		  To exit AutoExec, send the SIGINT (130) signal using the Ctrl + C
		  shortcut (^C). Your previous terminal layout will be restored.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -eq 1 ] && exit 1
}

while [ "$1" ]; do
	case $1 in
		--)
			break ;;
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--exec|-e)
			shift

			if [ -z "$1" ]; then
				Err 1 'Name of command not provided.'
			elif ! type -P "$1" > /dev/null 2>&1; then
				Err 1 'Provided command not found in PATH.'
			else
				Exec=$1
			fi ;;
		--refresh|-r)
			shift

			if [ -z "$1" ]; then
				Err 1 'Unspecified refresh rate.'
			elif ! [[ $1 =~ ^([0-9]+|[0-9]+.[0-9]+)$ ]]; then
				Err 1 'Invalid refresh rate.'
			else
				Refresh=$1
			fi ;;
		--once|-o)
			Once='true' ;;
		--no-waitmsg|-W)
			NoWaitMSG='True' ;;
		--no-spinner|-S)
			NoSpinner='True' ;;
		--no-exit|-E)
			NoExitStatus='True' ;;
		--no-color|-C)
			NoColor='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ "$Once" == 'true' -a ${#Refresh} -gt 0 ]; then
	Err 1 "Options '--once|-o' and '--refresh|-r' aren't compatible."
fi

[ -z "$1" ] && Err 1 'Missing argument -- file name required.'
[ -f "$1" ] || Err 1 'Provided file is not a file.'
[ -r "$1" ] || Err 1 'Provided file is unreadable.'

ExecFile=$1; shift

declare -i DepCount=0
for Dep in file tput sleep stat; {
	if ! type -P "$Dep" 1> /dev/null 2>&1; then
		printf "Dependency '%s' not met.\n" "$Dep" 1>&2
		DepCount++
	fi
}

[ "$DepCount" == 'True' ] && exit 1

# Check the mimetype of the file.
case `file -b --mime-type "$ExecFile"` in
	application|application/*)
		Err 1 "Binary files are not supported." ;;
	text/troff)
		printf 'CAUTION: Unsupported Troff file detected.\n' 1>&2 ;;
esac

if [ "$Once" != 'true' ]; then
	TRAP(){
		tput ed; tput rmcup
		exit 0
	}

	trap 'TRAP' SIGINT

	tput smcup
fi

Interpreter(){
	type -P "$1" &> /dev/null ||
		Err 1 "Interpreter '$1' not found."

	Exec=$1
}

WinchHandler(){
	tput clear
	Lines=`tput lines`
	Columns=`tput cols`
}

trap 'WinchHandler' WINCH

WinchHandler

printf '\n'
while :; do
	# Determine the interpreter to use.
	if [ ${#Exec} -eq 0 ]; then
		read SheBang < "$ExecFile"
		SheBang1=${SheBang#*\!}
		SheBang2=${SheBang1##*/}
		SheBang3=${SheBang2%% *}
		case $SheBang3 in
			env)
				SheBang2A=${SheBang2#env }
				Interpreter "${SheBang2A%% *}" ;;
			*)
				Interpreter "$SheBang3" ;;
		esac
	fi

	if [ -f "$ExecFile" ] && [ -r "$ExecFile" ]; then
		SSE=`stat -c '%Y' "$ExecFile" 2> /dev/null`

		if [ 0${SSEOld//[!0-9]} -lt 0${SSE//[!0-9]} ]; then
			[ "$Once" == 'true' ] || tput clear

			"$Exec" "$ExecFile" "$@"
			Exit=$?
		fi

		SSEOld=${SSE//[!0-9]}
	else
		if [ "$Once" != 'true' ]; then
			tput ed; tput rmcup
		fi

		Err 1 'File not found or inaccessible.'
	fi

	# Have the exit status on the bottom-right of the terminal.
	if [ "$NoExitStatus" != 'True' ]; then
		tput cup $((Lines - 2)) 0
		tput cup $Lines $((Columns - 3))

		if [ "$NoColor" != 'True' ]; then
			printf '\e[2;37m%#3d\e[0m' "$Exit"
		else
			printf '%#3d' "$Exit"
		fi
	fi

	if [ "$NoWaitMSG" != 'True' ]; then
		if [ "$NoSpinner" == 'True' ]; then
			tput cud $Lines
			printf '\r\e[2;37mWaiting for changes...\e[0m '
		else
			for Char in '|' '/' '-' '\'; {
				tput cup $Lines 1

				if [ "$NoColor" != 'True' ]; then
					printf '\r\e[2;37m[%s] Waiting for changes...\e[0m ' "$Char"
				else
					printf '\r[%s] Waiting for changes... ' "$Char"
				fi

				sleep 0.04
			}
		fi
	fi

	[ "$Once" == 'true' ] && exit 0

	sleep ${Refresh:-0.05}s
done

tput ed; tput rmcup
