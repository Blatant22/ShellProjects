#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/autoexec
#------------------------------------------------------------------------------
# Project Name      - Extra/source/autoexec/autoexec
# Started On        - Thu 31 Oct 22:49:41 GMT 2019
# Last Change       - Fri 14 Feb 02:20:55 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Previously named AutoSH; it needed updating, because it's no longer just for
# use when programming in Shell. Refer to NOTES of autoexec(1).
#
# Dependencies:
#
#   bash (>= 4.4.18-2)
#   coreutils (>= 8.28-1)
#   libtflbp-sh (>= 2019-12-10)
#   ncurses-bin (>= 6.1-1)
#------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-02-14'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [SCRIPT] [ARGUMENTS]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -e, --exec <NAME>        - Use NAME instead of Bourne Again Shell.
		  -r, --refresh <INT>      - Adjust to fit your performance needs.
	EOF
}

Exec='bash'

while [ "$1" ]; do
	case $1 in
		--)
			break ;;
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--shell|-S)
			shift

			if [ -z "$1" ]; then
				Err 1 'Name of shell not provided.'
			elif [ "$1" == 'bash' ]; then
				Err 1 'The Bourne Again Shell is the default.'
			elif ! type -fP "$1" > /dev/null 2>&1; then
				Err 1 'Provided shell not found in PATH.'
			else
				Exec=$1
			fi ;;
		--refresh|-r)
			shift

			if [ -z "$1" ]; then
				Err 1 'Unspecified refresh rate.'
			elif ! [[ $1 =~ ^[0-9]+$ ]]; then
				Err 1 'Invalid refresh rate.'
			else
				Refresh=$1
			fi ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

[ -z "$1" ] && Err 1 'Missing argument -- file name required.'

ExecFile=$1; shift

ChkDep tput sleep stat

TRAP(){
	tput ed; tput rmcup
	exit 0
}

trap 'TRAP' SIGINT

tput smcup

while :; do
	if [ -f "$ExecFile" ] && [ -r "$ExecFile" ]; then
		SSE=`stat -c '%Y' "$ExecFile" 2> /dev/null`

		if [ 0${SSE_OLD//[!0-9]} -lt 0${SSE//[!0-9]} ]; then
			tput clear

			"$Exec" "$ExecFile" "$@"
		fi

		SSE_OLD=${SSE//[!0-9]}
	else
		tput ed; tput rmcup
		Err 1 'File not found or inaccessible.'
	fi

	sleep 0.${Refresh:-05}s
done

tput ed; tput rmcup
