#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/autoexec
#------------------------------------------------------------------------------
# Project Name      - Extra/source/autoexec/autoexec
# Started On        - Thu 31 Oct 22:49:41 GMT 2019
# Last Change       - Sun 18 Jun 20:46:17 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# If no exit status has been provided for `exit`, assume the `SignalHandler()`
# will handle this, due to the limitations of the shell.
#
# Shebangs are assumed to be on the first line, as one would expect.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Using AutoExec for man pages (pagers) is buggy, but functional.
#
#      More specifically, the prompt shows through and when ^C-ing, the last
#      line (message line with exit status) still shows. Pretty ugly. I'm not
#      sure this is something which can be fixed, as it's probably just a
#      limitation of Shell/terminals.
#
#TODO: When everything on the bottom line is disabled, still get an empty line.
#
#      This only occurs when not running once. When all the usual stuff is
#      displayed on that last line (e.g., wait message), AE works as intended.
#
# Dependencies:
#
#   bash (>= 4.4)
#   coreutils (>= 8.28-1)
#   file (>= 1:5.32-2)
#------------------------------------------------------------------------------

CurVer='2023-06-18'
Progrm=${0##*/}
ProgrmFancy='AE'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [FILE] [FILE_ARGS]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  --use-tput               - Override escape sequences with tput(1).
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -E, --no-exit            - Omit the exit status on the bottom-right.
		  -S, --no-spinner         - Omit 'spinner' from the waiting message.
		  -W, --no-waitmsg         - Omit the waiting message at the end.
		  -c, --check              - Check for errors before executing.
		  -e, --exec NAME          - Use NAME as the interpreter or program.
		  -f, --force              - Forces use of that which is unsupported.
		  -o, --once               - Execute FILE only once; no looping.
		  -r, --refresh INT        - Adjust to fit your performance needs.
		  -t, --time               - Time the execution of FILE.

		  To exit $ProgrmFancy, send the SIGINT (130) signal using the Ctrl + C shortcut
		  (^C). Your previous terminal layout will be restored.

		  When forcing, unsupported mimetypes and executables will be allowed.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

TIMEFORMAT='[R:%3R|U:%3U|S:%3S|P:%P]'

UseTPUT=
ArgExec='False'
Check='False'
Color='True'
ExitStatus='True'
Force='False'
Once='False'
Refresh='0.05'
Spinner='True'
Time='False'
WaitMSG='True'

Skip=
Args=()
while [[ -n $1 ]]; do
	case $1 in
		--)
			Args+=(--)
			Skip='True' ;;
		-[^-]*)
			if [[ $Skip == True ]]; then
				Args+=("$1")
			else
				Str=${1#-}
				Len=${#Str}
				for (( Index = 0; Index < Len; Index++ )); {
					Args+=(-"${Str:Index:1}")
				}
			fi ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

while [[ -n $1 ]]; do
	case $1 in
		--)
			break ;;
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--use-tput)
			UseTPUT='tput' ;;
		--exec|-e)
			shift

			if [[ -z $1 ]]; then
				Err 1 'Name of command not provided.'
			else
				Exec=$1
				ArgExec='True'
			fi ;;
		--refresh|-r)
			RefreshArg=$1
			shift

			if [[ -z $1 ]]; then
				Err 1 'Unspecified refresh rate.'
			elif ! [[ $1 =~ ^([[:digit:]]+|[[:digit:]]+\.[[:digit:]]+)$ ]]; then
				Err 1 'Invalid refresh rate.'
			else
				RefreshCustom='True'
				Refresh=$1
			fi ;;
		--once|-o)
			OnceArg=$1
			Once='True' ;;
		--no-waitmsg|-W)
			WaitMSG='False' ;;
		--no-spinner|-S)
			Spinner='False' ;;
		--no-exit|-E)
			ExitStatus='False' ;;
		--no-color|--no-colour|-C)
			Color='False' ;;
		--force|-f)
			Force='True' ;;
		--time|-t)
			Time='True' ;;
		--check|-c)
			CheckArg=$1
			Check='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ $Once == True && $RefreshCustom == True ]]; then
	Err 1 "OPTs '$OnceArg' and '$RefreshArg' aren't compatible."
fi

[[ -z $1 ]] && Err 1 'Missing argument -- file name required.'
[[ -f $1 ]] || Err 1 'Provided file is not a file.'
[[ -r $1 ]] || Err 1 'Provided file is unreadable.'

ExecFile=$1; shift

for Dep in $UseTPUT file stty stat realpath; {
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
}

(( DepCount > 0 )) && exit 1

#-------------------------------------------------------------Primary Functions

# Usage: TermDo CAPNAME PARAMS
#
# Replaces tput(1), unless disabled by associated flag. The escapue sequences
# used here are for the standard terminal type, especially in Linux. If anyone
# is using an obscure terminal, stick with `--use-tput` instead.
TermDo() {
	if [[ -n $UseTPUT ]]; then
		tput "$@" || return $?
	fi

	local Sequence
	while [[ -n $1 ]]; do
		case $1 in
			clear) # Clear screen.
				Sequence+=$'\e[3J\e[H\e[2J' ;;
			cnorm) # Normal cursor.
				Sequence+=$'\e[?12l\e[?25h' ;;
			civis) # Invisible cursor.
				Sequence+=$'\e[?25l' ;;
			ed) # Clear down.
				Sequence+=$'\e[J' ;;
			rmcup) # Restore layout.
				Sequence+=$'\e[?1049l\e[23;0;0t' ;;
			smcup) # Save layout.
				Sequence+=$'\e[?1049h\e[22;0;0t' ;;
			cup) # Move to Y and X position.
				Y=$2
				X=$(( $3 - 1 ))
				shift 2

				Sequence+=$"\e[$Y;${X}H" ;;
			cud) # Move down Y times.
				Y=$(( $2 - 1 ))
				shift

				Sequence+=$"\e[${Y}B" ;;
		esac
		shift
	done

	printf "$Sequence"
}

DoWINCH() {
	shopt -s checkwinsize; (:)
	TermDo clear
}

SignalHandler() {
	if [[ $Once != True ]]; then
		TermDo ed
		TermDo rmcup
		stty echo
	fi

	TermDo cnorm

	# The order of these tests is important.
	if [[ $TermSizeErr == True ]]; then
		Err 1 'Insufficient terminal size detected.'
	elif [[ $FileNotFoundErr == True ]]; then
		Err 1 'File not found or inaccessible.'
	elif [[ $SheBangInvalidErr == True ]]; then
		Err 1 'Invalid shebang detected.'
	elif [[ -n $InterpreterMissingErr ]]; then
		Err 1 "Interpreter '$InterpreterMissingErr' not found."
	fi

	# Needs to be here otherwise the above line clears it.
	if [[ $Force == False && $UnsupportedCheck == True ]]; then
		Err 1 "OPT '$CheckArg' not supported on FILE."
	fi

	if [[ -n $Exit ]]; then
		exit $Exit
	else
		exit 0
	fi
}

#----------------------------------------------Prepare for an Execute Main Loop

if [[ $Force == False ]]; then
	case $Exec in
		*/man|man|*/less|less|*/pager|pager|*/more|more)
			Err 1 "Using pagers with $ProgrmFancy is unsupported." ;;
	esac

	case `file -b --mime-type "$ExecFile"` in
		application|application/*)
			Err 1 'Binary files are not supported.' ;;
	esac
fi

trap SignalHandler SIGINT EXIT

[[ $Once == True ]] || TermDo smcup

if [[ $Once != True ]]; then
	shopt -s checkwinsize; (:)
	TermDo clear
	TermDo civis
	trap DoWINCH WINCH
	stty -echo
fi

while :; do
	if ! [[ -f $ExecFile && -r $ExecFile ]]; then
		if [[ $Once != True ]]; then
			TermDo ed
			TermDo rmcup
		fi

		FileNotFoundErr='True'
		exit
	elif [[ $Once != True ]] && (( LINES < 2 || COLUMNS < 30 )); then
		TermSizeErr='True'

		exit
	fi

	# Determine the interpreter to use.
	if [[ $ArgExec != True ]]; then
		read SheBang < "$ExecFile"

		if [[ $SheBang != '#!'* ]]; then
			SheBangInvalidErr='True'
			exit
		fi

		SheBangMain=${SheBang#\#\!}
		SheBangBase=${SheBangMain##*/}

		if ! type -P "${SheBangMain%% *}" &> /dev/null; then
			InterpreterMissingErr=$SheBangMain
			exit
		fi

		Exec=$SheBangMain
	fi

	SSE=`stat -c '%Y' "$ExecFile" 2> /dev/null`
	if [[ ${SSEOld//[![:digit:]]} -lt ${SSE//[![:digit:]]} ]]; then
		[[ $Once == True ]] || TermDo clear

		# If using DASH, BASH, or ZSH, check for errors before executing.
		if [[ $Check == True ]]; then
			unset Errors
			case $Exec in
				*/env\ bash|*/bash|*/env\ zsh|*/zsh)
					$Exec -n "$ExecFile" || Errors='True' ;;
				*/env\ sh|*/sh)
					File=`type -P sh`
					Link=`realpath "$File"`
					if [[ ${Link##*/} == dash ]]; then
						$Exec -n "$ExecFile" || Errors='True'
					else
						UnsupportedCheck='True'
					fi ;;
				*)
					UnsupportedCheck='True' ;;
			esac

			[[ $Force == False && $UnsupportedCheck == True ]] && exit 1
		fi

		if [[ $Errors != True ]]; then
			TermDo cnorm
			stty echo
			if [[ $Time == True ]]; then
				time $Exec "$ExecFile" "$@"
				Exit=$?
			else
				$Exec "$ExecFile" "$@"
				Exit=$?
			fi
			stty -echo
			TermDo civis
		else
			Exit=999
		fi
	fi

	SSEOld=${SSE//[![:digit:]]}

	[[ $Once == True ]] && exit

	# Have the exit status on the bottom-right of the terminal.
	if [[ $ExitStatus == True ]]; then
		TermDo cup $LINES $((COLUMNS - 3))

		if [[ $Color == True ]]; then
			if (( Exit == 0 )); then
				printf '\e[2;37m%#3d\e[0m' $Exit
			else
				printf '\e[1;31m%#3d\e[0m' $Exit
			fi
		else
			printf '%#3d' $Exit
		fi
	fi

	if [[ $WaitMSG == True ]]; then
		if [[ $Spinner == True ]]; then
			for Char in '|' '/' '-' '\'; {
				TermDo cud $LINES

				if [[ $Color == True ]]; then
					printf '\r\e[2;37m[%s] Waiting for changes...\e[0m ' "$Char"
				else
					printf '\r[%s] Waiting for changes... ' "$Char"
				fi

				read -n 1 -st 0.04
			}
		else
			TermDo cud $LINES

			if [[ $Color == True ]]; then
				printf '\r\e[2;37mWaiting for changes...\e[0m '
			else
				printf '\rWaiting for changes... '
			fi
		fi
	fi

	read -n 1 -st $Refresh
done
