#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/csdwm
#------------------------------------------------------------------------------
# Project Name      - Extra/source/csdwm
# Started On        - Wed 26 May 15:36:21 BST 2021
# Last Change       - Wed  7 Jun 22:22:18 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A rough Pure-BASH solution to nicely listing all of your DWM keybindings.
# This is not a complete solution and should be considered beta, at most.
#
# Features:
#
#TODO: Handle additional special keys, such as 'Period' and 'Comma'.
#TODO: Add flags for user customization of output.
#TODO: Show what 'Mod' actually is at the top of the output, if possible.
#
# Bugs:
#
#TODO: A user reported the Mod key is missing, using BASH 5.1.8 in Arch Linux.
#
#      This issue is #7 and seems to have been resolved, but I'm leaving this
#      here, because what caused this issue is still as yet unknown.
#
# Dependencies:
#
#   bash (>= 4.4.18-2)
#------------------------------------------------------------------------------

CurVer='2022-03-04'
Progrm='csdwm'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [FILE]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -t, --total              - Show total discovered key bindings.

		Where FILE is that from which to read DWM's key bindings.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

while [[ -n $1 ]]; do
	case $1 in
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--total|-t)
			ShowTTL='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ -z $1 ]]; then
	Err 1 'Configuration FILE required.'
elif ! [[ -f $1 ]]; then
	Err 1 'Configuration FILE not found.'
elif ! [[ -r $1 ]]; then
	Err 1 'Configuration FILE unreadable.'
else
	File=$1
fi

#-------------------------------------------------------------------Gather Data

# Usage: IfString ARGUMENT FUNCTION STRING
IfString() {
	case $1 in
		$3)
			read _ _ Wanted _ <<< "$1"
			Wanted=${Wanted//[![:digit:]]}
			printf '%s' "${2}_${Wanted%\}}" ;;
		*)
			printf '%s' "${2}" ;;
	esac
}

while read Line; do
	if [[ $Line == 'static Key keys[] = {' ]]; then
		StartLineFound='True'
	elif [[ $StartLineFound == True ]]; then
		if [[ $Line == [[:space:]]'/*'* ]]; then
			continue
		elif [[ $Line == '};' ]]; then
			break
		fi

		[[ $Line == *MODKEY* ]] || continue

		read _ Mod Key Func Arg <<< "$Line"

		Key=${Key#XK_}
		Key=${Key%,}
		Mod=${Mod%,}
		Mod=${Mod/MODKEY/Mod}
		Mod=${Mod/|/+}
		Mod=${Mod/|/+}

		Mod=${Mod//ShiftMask/Shift}
		Mod=${Mod//ControlMask/Ctrl}
		Mod=${Mod//space/Space}
		Mod=${Mod//period/Period}
		Mod=${Mod//comma/Comma}

		Key=${Key//ShiftMask/Shift}
		Key=${Key//ControlMask/Ctrl}
		Key=${Key//space/Space}
		Key=${Key//period/Period}
		Key=${Key//comma/Comma}

		(( ${#Key} == 1 )) && Key=${Key^^}

		Func=${Func%,}

		case $Func in
			spawn|focusstack|focusmon|tagmon|setmfact|\
			movestack|togglescratch|cyclelayout)
				read _ _ Wanted _ <<< "$Arg"
				Func="${Func}_${Wanted%\}}" ;;
			*)
				case $Func in
					setlayout)
						Func=`IfString "$Arg" "$Func" '*&layouts[*'` ;;
					view)
						Func=`IfString "$Arg" "$Func" '*.ui = *'` ;;
				esac ;;
		esac

		ModKeyLen=$(( ${#Key} + ${#Mod} ))
		if (( ModKeyLen > ModKeyLenMax )); then
			ModKeyLenMax=$ModKeyLen
		fi

		(( Count++ ))

		declare -A Bindings["${Count}_$Mod+$Key"]=$Func
	fi
done < "$File"

Total=$(( ${#Bindings[@]} + 0 ))

#------------------------------------------------------Begin Displaying Results

if (( Total == 0 )); then
	printf 'Uh-oh! No key bindings found.\n' 1>&2
else
	Count=1
	until (( Count > ${#Bindings[@]} )); do
		for Binding in "${!Bindings[@]}"; {
			if (( Count == ${Binding%%_*} )); then
				printf ' %*s %s\n' $((ModKeyLenMax + 1))\
					${Binding#*_} "${Bindings["$Binding"]}"

				(( Count++ ))

				break
			fi
		}
	done

	if [[ $ShowTTL == True ]] && (( Total != 0 )); then
		printf '\nTotal: %d\n' ${#Bindings[@]}
	fi
fi
