#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/csdwm
#------------------------------------------------------------------------------
# Project Name      - Extra/source/csdwm/csdwm
# Started On        - Wed 26 May 15:36:21 BST 2021
# Last Change       - Sat 29 May 02:03:33 BST 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Automate the `if` statement block handling arguments.
#TODO: Handle additional special keys, such as 'Period' and 'Comma'.
#TODO: Add flags for user customization of output.
#TODO: Show what 'Mod' actually is at the top of the output, if possible.
#
# Bugs:
#
#TODO: A user reported the Mod key isn't showing for them at all.
#
#      The same user also showed that the first resulting line is misaligned.
#
# Dependencies:
#
#   bash (>= 4.4.18-2)
#------------------------------------------------------------------------------

CurVer='2021-05-29'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$Line"
	done <<-EOF
		Usage: $Progrm [OPTS] [FILE]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -p, --paginate           - Send output to less(1) or more(1).
		  -t, --total              - Show total discovered key bindings.

		Where FILE is that from which to read DWM's key bindings.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--paginate|-p)
			if type -P less &> /dev/null; then
				Pager='less'
			elif type -P more &> /dev/null; then
				Pager='more'
			else
				Err 1 'No suitable pager found in PATH.'
			fi ;;
		--total|-t)
			ShowTTL='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ -z "$1" ]; then
	Err 1 'Configuration FILE required.'
elif ! [ -f "$1" ]; then
	Err 1 'Configuration FILE not found.'
elif ! [ -r "$1" ]; then
	Err 1 'Configuration FILE unreadable.'
else
	File=$1
fi

#-------------------------------------------------------------------Gather Data

Count=0
ModKeyLenMax=0
while read Line; do
	if [[ $Line == 'static Key keys[] = {' ]]; then
		StartLineFound='True'
	elif [ "$StartLineFound" == 'True' ]; then
		if [[ $Line == [[:space:]]'/*'* ]]; then
			continue
		elif [ "$Line" == '};' ]; then
			break
		fi

		[[ $Line == *MODKEY* ]] || continue

		read _ Mod Key Func Arg <<< "$Line"

		Key=${Key#XK_}
		Key=${Key%,}
		Mod=${Mod%,}
		Mod=${Mod/MODKEY/Mod}
		Mod=${Mod/|/+}
		Mod=${Mod/|/+}

		Mod=${Mod//ShiftMask/Shift}
		Mod=${Mod//ControlMask/Ctrl}
		Mod=${Mod//space/Space}
		Mod=${Mod//period/Period}
		Mod=${Mod//comma/Comma}
		Key=${Key//ShiftMask/Shift}
		Key=${Key//ControlMask/Ctrl}
		Key=${Key//space/Space}
		Key=${Key//period/Period}
		Key=${Key//comma/Comma}

		[ ${#Key} -eq 1 ] && Key=${Key^^}

		Func=${Func%,}

		if [ "$Func" == 'spawn' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_$Wanted"
		elif [ "$Func" == 'focusstack' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_$Wanted"
		elif [ "$Func" == 'incnmaster' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_$Wanted"
		elif [ "$Func" == 'setlayout' ]; then
			if [[ $Arg == *'&layouts['* ]]; then
				read _ _ Wanted _ <<< "$Arg"
				Wanted=${Wanted//[![:digit:]]}
				Func="${Func}_$Wanted"
			fi
		elif [ "$Func" == 'focusmon' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_$Wanted"
		elif [ "$Func" == 'tagmon' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_$Wanted"
		elif [ "$Func" == 'setmfact' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_${Wanted%\}}"
		elif [ "$Func" == 'view' ]; then
			if [[ $Arg == *'.ui = '* ]]; then
				read _ _ Wanted _ <<< "$Arg"
				Wanted=${Wanted//[!~[:digit:]]}
				Func="${Func}_$Wanted"
			fi
		elif [ "$Func" == 'movestack' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_${Wanted%\}}"
		elif [ "$Func" == 'togglescratch' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_${Wanted%\}}"
		elif [ "$Func" == 'cyclelayout' ]; then
			read _ _ Wanted _ <<< "$Arg"
			Func="${Func}_${Wanted%\}}"
		fi

		ModKeyLen=$((${#Key} + ${#Mod}))
		if [ $ModKeyLen -gt $ModKeyLenMax ]; then
			ModKeyLenMax=$ModKeyLen
		fi

		let Count++

		declare -A Bindings["${Count}_$Mod+$Key"]=$Func
	fi
done < "$File"

Total=$((${#Bindings[@]} + 0))

#------------------------------------------------------Begin Displaying Results

DisplayMain(){
	Count=1
	until [ $Count -gt ${#Bindings[@]} ]; do
		for Binding in "${!Bindings[@]}"; {
			if [ $Count -eq "${Binding%%_*}" ]; then
				printf ' %*s %s\n' $((ModKeyLenMax + 1))\
					${Binding#*_} "${Bindings["$Binding"]}"

				let Count++

				break
			fi
		}
	done

	if [ "$ShowTTL" == 'True' -a $Total -ne 0 ]; then
		printf '\nTotal: %d\n' ${#Bindings[@]}
	fi
}

if [ $Total -eq 0 ]; then
	printf 'Uh-oh! No key bindings found.\n' 1>&2
elif [ "$Pager" == 'less' ]; then
	DisplayMain | less
elif [ "$Pager" == 'more' ]; then
	DisplayMain | more
else
	DisplayMain
fi
