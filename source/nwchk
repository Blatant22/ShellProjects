#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/nwchk
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/nwchk (Network Check)
# Started On        - Thu 18 Apr 11:19:19 BST 2019
# Last Change       - Fri  6 Dec 22:53:12 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Written by inspiration of YouTube and Arch user, 'S3NTYN3L'.
#----------------------------------------------------------------------------------

_VERSION_="2019-12-06"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

SADDR="https://www.google.co.uk/"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Check, once or periodically, for network and/or Internet connectivity.

		SYNTAX:     $_PROJECT_ [OPTS] IFACE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --debug|-D              - Enables the built-in bash debugging.
		            --logfile|-L PATH       - File to use instead of the default.
		            --log|-l                - Save a log of detected events.
		            --internet|-I           - Check also for Internet connectivity.
		            --once-only|-o          - Don't check periodically, only once.
		            --interval|-i S         - Override the default of 10 seconds.
		            --ping-addr|-p IP       - Address to ping for connectivity checks.
		            --spider-addr|-S ADDR   - The address to crawl with a spider.
		            --bell|-b               - Sound off the X11 bell on alert.
		            --no-notify|-N          - Do not send any notifications.

		NOTE:       This is a daemon-like shell program, written to be executed once, and
		            left running, like a typical daemon, unless otherwise instructed. One
		            example of a place to execute $_PROJECT_, would be rc.local in /etc.

		            Where IFACE is the network interface to check.

		            The default ping address is 8.8.8.8, Google's public DNS.

		FILE:       By default, the following log file is used:

		              \$HOME/.$_PROJECT_.log

		EXAMPLE:    $_PROJECT_ -i 60 --internet -b -l -L /tmp/${_PROJECT_}_tmp.log wlp4s0
		            $_PROJECT_ --bell -p 1.1.1.1 -S 'https://duckduckgo.com/' enp3s0

		SITE:       The default address for the wget spider:

		              $SADDR
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--quiet|-q)
			BEQUIET='true' ;;
		--debug|-D)
			DEBUGME='true' ;;
		--once-only|-o)
			ONCE='true' ;;
		--interval|-i)
			shift

			if ! [[ $1 =~ ^[0-9]+$ ]] || [ $1 -lt 3 ]; then
				Err 1 $LINENO "Invalid seconds of interval provided."
			fi

			declare -i INT=$1 ;;
		--log|-l)
			LOG='true' ;;
		--logfile|-L)
			shift; LOGFILE="$1" ;;
		--internet|-I)
			INTERNET='true' ;;
		--bell|-b)
			BELL='true' ;;
		--ping-addr|-p)
			shift

			if ! [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
				Err 1 $LINENO "Invalid ping IP address provided."
			fi

			IP="$1" ;;
		--spider-addr|-S)
			shift; SPIDER="$1" ;;
		--no-notify|-N)
			NO_NOTIFY='true' ;;
		--*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

#TODO - Check for -S and/or -p but no -I.

if [ "$INT" -a "$ONCE" == 'true' ]; then
	Err 1 $LINENO "Interval specified, but $_PROJECT_ was told to run once."
fi

if ! [ "$LOG" == 'true' ] && [ "$LOGFILE" ]; then
	Err 1 $LINENO "Logfile specified, but $_PROJECT_ wasn't told to log."
fi

if ! [ "$*" ]; then
	Err 1 $LINENO "Missing user-specified network interface."
else
	if [ "${#@}" -gt 1 ]; then
		Err 1 $LINENO "Only one interface may be specified at one time."
	else
		IFACE=$1
	fi
fi

declare -i DEPCOUNT=0
for DEP in dirname sleep ping notify-send; {
	if ! type -Pf "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

if type -Pf ip > /dev/null 2>&1; then
	USEIP='true'
elif type -Pf ifconfig > /dev/null 2>&1; then
	USEIF='true'
else
	Err 1 $LINENO "Unable to find applicable executable."
fi

if [ "$INTERNET" == 'true' ] && ! type -Pf ping > /dev/null 2>&1; then
	Err 1 $LINENO "Dependency 'ping' not met."
fi

# Prefer ip, if both are found, as ifconfig is deprecated.
[ "$USEIP" == 'true' -a "$USEIF" == 'true' ] && unset USEIF

[ "$BEQUIET" == 'true' ] && exec > /dev/null
[ "$DEBUGME" == 'true' ] && set -x

NOTIFY(){
	if ! [ "$NO_NOTIFY" == 'true' ]; then
		#TODO - Add exclamation or other type of alert icon.
		if ! notify-send --urgency=$1 "$2"; then
			LOGIT="Unable to send a notification."
			Err 1 $LINENO "Unable to send a notification -- quitting."
		fi
	fi

	if [ "$BELL" == 'true' ]; then
		for I in {1..3}; { printf "\a"; sleep 1s; }
	fi
}

LOGIT(){
	# If logfile is or becomes invalid during loop, go with the default.
	[ "$LOGFILE" ] || LOGFILE="$HOME/.$_PROJECT_.log"

	if [ "$LOG" == 'true' ]; then
		printf "%(%F_%X)T: %s\n" -1 "$1" >> "$LOGFILE"
	fi
}

EXIT(){
	LOGIT "NWCHK has exited."
	if ! [ "$ONCE" == 'true' ]; then
		NOTIFY normal "No longer checking network connectivity."
	fi
}

trap 'EXIT' EXIT

LOGIT "Begun checking network connectivity."

while :; do
	if [ "$USEIP" == 'true' ]; then
		for WORD in `ip link show "$IFACE"`; {
			if [ "$GET_STATE" == 'true' -a "$WORD" == "DOWN" ]; then
				LOGIT "Network '$IFACE' detected as 'DOWN' by ip."
				NOTIFY critical "Network connectivity error(s) detected."

				break
			elif [ "$WORD" == "state" ]; then
				GET_STATE='true'
			fi
		}
	elif [ "$USEIF" == 'true' ]; then
		while read -a X; do
			if [ "${X[0]}" == "UP" ]; then
				for WORD in ${X[@]}; {
					[ "$WORD" == "RUNNING" ] && RUNNING='true'
				}

				if ! [ "$RUNNING" == 'true' ]; then
					LOGIT "Network '$IFACE' not detected as 'RUNNING' by ifconfig."
					NOTIFY critical "Network connectivity error(s) detected."
				fi
			fi
		done <<< "$(ifconfig "$IFACE")"
	fi

	if [ "$INTERNET" == 'true' ]; then
		if type -Pf wget > /dev/null 2>&1; then
			if ! wget -q -T 3 --spider "$SADDR"; then
				LOGIT "Unable to confirm server availability."

				if ! ping -q -c 1 ${IP:-8.8.8.8} > /dev/null 2>&1; then
					LOGIT "Error(s) detected when pinging IP address."
					NOTIFY critical "Internet connectivity error(s) detected."
				fi
			fi
		fi
	fi

	if ! [ "$ONCE" == 'true' ]; then
		sleep ${INT:-10}s
	else
		break
	fi
done
