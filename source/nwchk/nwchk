#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/nwchk
#------------------------------------------------------------------------------
# Project Name      - Extra/source/nwchk/nwchk
# Started On        - Thu 18 Apr 11:19:19 BST 2019
# Last Change       - Thu 16 Dec 00:04:54 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Network Check. Written by inspiration of YouTube and Arch user, 'S3NTYN3L'.
#
# This is a daemon-like shell program, written to be executed once, and left
# running, like a typical daemon, unless otherwise instructed. One example of a
# place to execute NWChk, would be 'rc.local' in '/etc'. NWChk makes use of the
# ip(8) command, so does not support older systems with only ifconfig(8).
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Check for -S and/or -p but no -I.
#
# Dependencies:
#
#   bash (>= 4.3-14)
#------------------------------------------------------------------------------

CurVer='2021-12-16'
Progrm='nwchk'

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [IFACE]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -L, --logfile [PATH]     - File to use instead of the default.
		  -l, --log                - Save a log of detected events.
		  -I, --internet           - Check also for Internet connectivity.
		  -o, --once-only          - Don't check periodically, only once.
		  -i, --interval [S]       - Override the default of 10 seconds.
		  -p, --ping-addr [IP]     - Address to ping for connectivity checks.
		  -b, --bell               - Sound off the X11 bell on alert.
		  -N, --no-notify          - Do not send any notifications.

		Where IFACE is the network interface to check.

		By default, the following log file is used:

		    ~/.$Progrm.log

		The default ping address is 8.8.8.8, Google's public DNS.
	EOF
}

Err(){
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

while [ -n "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"
			exit 0 ;;
		--once-only|-o)
			OnlyOnce='true' ;;
		--interval|-i)
			shift

			if ! [[ $1 =~ ^[[:digit:]]+$ ]]; then
				Err 1 'Invalid seconds of interval provided.'
			fi

			Interval=$1 ;;
		--log|-l)
			DoLog='true' ;;
		--logfile|-L)
			shift; LogFile="$1" ;;
		--internet|-I)
			ChkInternet='true' ;;
		--bell|-b)
			DoBell='true' ;;
		--ping-addr|-p)
			shift

			REGEX='[[:digit:]]+.[[:digit:]]+.[[:digit:]]+.[[:digit:]]'
			[[ $1 =~ ^$REGEX+$ ]] || Err 1 "Invalid ping IP address provided."

			IP=$1 ;;
		--no-notify|-N)
			NoNotify='true' ;;
		--*)
			Err 1 "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

if [ -n "$Interval" -a "$OnlyOnce" == 'true' ]; then
	Err 1 "Interval specified, but $Progrm was told to run once."
fi

if ! [ "$DoLog" == 'true' ] && [ -n "$LogFile" ]; then
	Err 1 "Logfile specified, but $Progrm wasn't told to log."
fi

if [ -n "$*" ]; then
	if (( ${#@} > 1 )); then
		Err 1 "Only one interface may be specified at one time."
	else
		IFace=$1
	fi
else
	Err 1 'Missing user-specified network interface.'
fi

DepCount=0
for CurDep in ip sleep ping notify-send wget; {
	if ! type -P "$CurDep" &> /dev/null; then
		Err 0 "Dependency '$CurDep' not met."
		let DepCount++
	fi
}

(( DepCount == 0 )) || exit 1

Notify(){
	if ! [ "$NoNotify" == 'true' ]; then
		#TODO: Add exclamation or other type of alert icon.
		if ! notify-send --urgency=$1 "$2"; then
			LogIt='Unable to send a notification.'
			Err 1 'Unable to send a notification -- quitting.'
		fi
	fi

	if [ "$DoBell" == 'true' ]; then
		for I in {1..3}; {
			printf "\a"
			sleep 0.25s
		}
	fi
}

LogIt(){
	# If the log file is or becomes invalid during loop, go with the default.
	[ "$LogFile" ] || LogFile="$HOME/.$Progrm.log"

	[ "$DoLog" == 'true' ] && printf '%(%F_%X)T: %s\n' -1 "$1" >> "$LogFile"
}

SignalHandler(){
	LogIt "NWCHK has exited."
	if ! [ "$OnlyOnce" == 'true' ]; then
		Notify normal "No longer checking network connectivity."
	fi
}

trap SignalHandler EXIT

LogIt 'Begun checking network connectivity.'
while :; do
	for Word in `ip link show "$IFace"`; {
		if [ "$GetState" == 'true' ] && [ "$Word" == 'DOWN' ]; then
			if [ "$InterfaceAlert" != 'True' ]; then
				LogIt "Network '$IFace' detected as 'DOWN' by ip."
				Notify critical 'Network interface down.'

				InterfaceAlert='True'
			fi

			break
		elif [ "$GetState" == 'true' ] && [ "$Word" == 'UP' ]; then
			if [ "$InterfaceAlert" == 'True' ]; then
				LogIt "Network '$IFace' detected as 'UP' by ip."
				Notify normal 'Network interface up.'

				InterfaceAlert=

				break
			fi
		elif [ "$Word" == 'state' ]; then
			GetState='true'
		fi
	}

	if [ "$ChkInternet" == 'true' ]; then
		LogIt 'Unable to confirm server availability.'
		if ! ping -q -c 1 ${IP:-8.8.8.8} &> /dev/null; then
			if [ "$InternetAlert" != 'True' ]; then
				LogIt 'Error(s) detected when pinging IP address.'
				Notify critical 'Internet down.'

				InternetAlert='True'
			fi
		else
			if [ "$InternetAlert" == 'True' ]; then
				LogIt 'Able to once again ping IP address.'
				Notify normal 'Internet up.'

				InternetAlert=
			fi
		fi
	fi

	if [ "$OnlyOnce" == 'true' ]; then
		break
	else
		sleep ${Interval:-10}s
	fi
done
