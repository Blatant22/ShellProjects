#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/source/github-ssh-setup
# Started On        - Thu 14 Sep 18:32:41 BST 2017
# Last Change       - Wed 27 Nov 15:56:10 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-11-27"
_PROJECT_=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Simple program to create an SSH (RSA) key pair for GitHub.

		SYNTAX:     $_PROJECT_ [OPTS] E-MAIL SSH_KEY_FILE

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --install-git|-G        - If git is not yet installed, install it.
		            --install-ssh|-S        - If ssh is not yet installed, install it.

		NOTE:       Currently only available on Debian/Ubuntu installations of Linux.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"; exit 0 ;;
		--debug|-D)
			DEBUGME='true' ;;
		--install-git|-G)
			INSTALLGIT='true' ;;
		-*)
			Err 1 $LINENO "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

EMAIL=$1
SSH_KEY_FILE=$2

declare -i DEPCOUNT=0
for DEP in find ssh-add ssh-agent ssh-keygen apt-get; {
	if ! type -P "$DEP" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$DEP' not met."
		DEPCOUNT+=1
	fi
}

[ $DEPCOUNT -eq 0 ] || exit 1

[ $UID -eq 0 ] || Err 1 $LINENO "Root access is required."

[ "$DEBUGME" == 'true' ] && set -x

if [ "$INSTALLGIT" == 'true' ]; then
	if ! type -P git > /dev/null 2>&1; then
		printf "INFO: Installing git packages with apt-get.\n"
		apt-get -q --show-progress -o Dpkg::Progress-Fancy=true install git
	else
		Err 0 $LINENO "It seems git is already installed."
	fi
elif [ ! "$INSTALLGIT" == 'true' ] && ! type -P git > /dev/null 2>&1; then
	Err 0 $LINENO "Unable to find 'git'; is it installed?"
fi

if [ "$INSTALLSSH" == 'true' ]; then
	if ! type -P ssh > /dev/null 2>&1; then
		printf "INFO: Installing ssh packages with apt-get.\n"
		apt-get -q --show-progress -o Dpkg::Progress-Fancy=true  install ssh
	else
		Err 0 $LINENO "SSH seems to already be installed."
	fi
elif [ ! "$INSTALLSSH" == 'true' -a ! -x /usr/bin/ssh ]; then
	Err 1 $LINENO "SSH, which is required, is not installed."
fi

if ! [ "$EMAIL" ]; then
	printf "INFO: Requesting GitHub account's E-Mail address.\n"
	read -e -p "PROMPT: " EMAIL
fi

if ! [[ $EMAIL =~ ^[[:alnum:]]+@[[:alnum:]]+\.[[:alnum:]]+$ ]]; then
	Err 1 $LINENO "Incorrect E-Mail address (format) specified."
fi

if ! [ "$SSH_KEY_FILE" ]; then
	printf "INFO: Requesting filename for the SSH key.\n"
	read -e -p "PROMPT: " SSH_KEY_FILE

	if ! [ "$SSH_KEY_FILE" ]; then
		printf "INFO: Using default: $HOME/.ssh/id_rsa\n"
		SSH_KEY_FILE="$HOME/.ssh/id_rsa"
	fi
fi

if ! [ -d "${SSH_KEY_FILE%\/*}" ]; then
	Err 1 $LINENO "One or more key file parent directories missing."
fi

printf "INFO: Generating a new SSH (RSA, 4096) key pair.\n"
if ssh-keygen -t rsa -b 4096 -C "$EMAIL" -f $SSH_KEY_FILE; then
	chmod -v 400 $SSH_KEY_FILE
	chmod -v 400 ${SSH_KEY_FILE}.pub
	chown -v $SUDO_UID:$SUDO_GID $SSH_KEY_FILE
	chown -v $SUDO_UID:$SUDO_GID ${SSH_KEY_FILE}.pub
else
	Err 1 $LINENO "Non-zero exit status: /usr/bin/ssh-keygen."
fi

printf "INFO: Starting the ssh-agent background process.\n"
if ! eval `ssh-agent -s`; then
	Err 1 $LINENO 'Non-zero exit status: eval `/usr/bin/ssh-agent -s`'
fi

printf "INFO: Adding SSH key to the ssh-agent -- storing in keychain.\n"
if ! ssh-add $SSH_KEY_FILE; then
	Err 1 $LINENO "Non-zero exit status: /usr/bin/ssh-add"
fi

if type -P xclip > /dev/null 2>&1; then
	printf "INFO: Adding public key to clipboard with /usr/bin/xclip.\n"
	if ! xclip -sel clip < ${SSH_KEY_FILE}.pub; then
		Err 1 $LINENO "Non-zero exit status: /usr/bin/xclip"
	fi

	printf "INFO: Now paste the .pub key into GitHub's 'Key' field.\n"
else
	printf "INFO: Now add your key to GitHub -- the .pub key only!\n"
fi
