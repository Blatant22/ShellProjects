#!/bin/sh

#------------------------------------------------------------------------------
# Project Name      - Extra/source/repack
# Started On        - Wed 19 Feb 01:35:16 GMT 2020
# Last Change       - Wed 19 Feb 16:29:32 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# This is a personal script to automate part of Debian package building.
#------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

Progrm=${0##*/}

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\rUsage: $Progrm [OPTS] [REPOSITORY] [PROGNAME]

		\r  -h, --help               - Display this help information.
		\r  -O, --overwrite          - Overwrite existing new base directory.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--overwrite|-O)
			Overwrite=1 ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ $# -eq 0 ]; then
	Err 1 'Program name required.'
elif [ $# -eq 1 ]; then
	Err 1 'Repository required.'
elif [ $# -gt 2 ]; then
	Err 1 'Excess arguments detected.'
fi

ChkDep id

[ `id -u` -eq 0 ] || Err 1 'Root access is required.'

GitHub="$HOME/GitHub/terminalforlife/Personal"
Store="$HOME/Documents/TT/PackageDirs"

for Dir in "$Store"/*; do
	[ -d "$Dir" ] || continue

	case ${Dir##*/} in
		"pkg-debian ($2)")
			Found=1
			break ;;
	esac
done

[ $Found ] || Err 1 "Directory for '$2' not found."

OldDir="$Store/pkg-debian ($2)"
NewDir="$HOME/Desktop/pkg-debian ($2)"
ShowDir="~/${NewDir#/home/*/}"
ShowDir="${ShowDir%(*)}(*)"

if [ -d "$NewDir" ]; then
	if [ $Overwrite ]; then
		rm -r "$HOME/Desktop/pkg-debian (ubuchk)"
	else
		Err 1 "Directory '$ShowDir' already exists."
	fi
fi

cp -r "$OldDir" "$NewDir" &&
	printf 'Old package directory copied to desktop.\n'

chmod 700 "$NewDir" && printf "Mode of '%s' is '700'.\n" "$ShowDir"
chown 0:0 "$NewDir" && printf "Owner of '%s' is '0:0'.\n" "$ShowDir"

find "$NewDir" -type d -exec chmod 755 {} \+ &&
	printf "Mode of directories in '%s' is '755'.\n" "$ShowDir"

find "$NewDir" -type f -exec chmod 644 {} \+ &&
	printf "Mode of files in '%s' is '644'.\n" "$ShowDir"

if [ -f "$GitHub/$1/source/$2" ]; then
	cp "$GitHub/$1/source/$2" "$NewDir/usr/bin/$2" && Success=1
elif [ -d "$GitHub/$1/source/$2" ]; then
	cp "$GitHub/$1/source/$2/$2" "$NewDir/usr/bin/$2" && Success=1
else
	Err 1 "Cannot find suitable '$2' candidate."
fi

[ $Success ] || Err 1 "Failed to update '*/usr/bin/$2' file."
