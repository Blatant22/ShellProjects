#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/fetcher
#------------------------------------------------------------------------------
# Project Name      - Extra/source/fetcher/fetcher
# Started On        - Fri 18 Dec 01:42:22 GMT 2020
# Last Change       - Fri 18 Dec 02:53:03 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# The point of Fetcher is to write something to replace and vastly improve on
# BDL (Batch Downloader), a very old Shell project I started years ago. I want
# it to be simple, lightweight, and much more pleasant to use, with more
# features than are found in BDL.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.28)
#   curl (>= 7.58.0) | wget (>= 1.19.4-1)
#------------------------------------------------------------------------------

CurVer='2020-12-18'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [ACTION]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.

		  Below are a list of ACTIONs:

		  fetch                    - Download all of the saved URLs.
		  list                     - List all of the stored URLs.
		  add                      - Add a URL to the list.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

MainDir="$HOME/.config/$Progrm"
LinkFile="$MainDir/links"

# The [p]retty names, for use in errors and such.
P_LinkFile="~/${LinkFile#/home/*/}"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--no-color|-C)
			NoColor='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

while [ "$1" ]; do
	case $1 in
		fetch|list|remove)
			Action=$1 ;;
		add)
			Action=$1

			if [ -z "$2" ]; then
				Err 1 "Action '$1' requires a URL."
			else
				AddURL=$2
			fi

			shift ;;
		'')
			Err 1 "Command not provided." ;;
		*)
			Err 1 "Command '$1' invalid." ;;
	esac
	shift
done

DepCount=0
for Dep in mkdir; do
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		let DepCount++
	fi
done

[ $DepCount -gt 0 ] && exit 1

if type -P curl &> /dev/null; then
	Get='curl -sC - --progress-bar'
elif type -P wget &> /dev/null; then
	Get='wget -Cq --show-progress'
fi

[ -d "$MainDir" ] || mkdir -p "$MainDir"

# ANSI color escape sequences.
if [ "$NoColor" != 'True' ]; then
	C_Red='\e[1;31m'; C_Green='\e[1;32m'; C_Reset='\e[0m'
fi

#----------------------------------------------------------------Main Functions

CheckIfEmpty(){
	Line=0
	while read; do
		let Line++
	done < "$LinkFile"

	[ $Line -eq 2 ] && Err 1 "No stored URLs found -- nothing to $1."
}

#---------------------------------------------------Create Link File If Missing

if ! [ -f "$LinkFile" ]; then
	InitLine="# URLs from which to download data using ${Progrm^} $CurVer."
	printf '%s\n\n' "$InitLine" > "$LinkFile"
elif ! [ -r "$LinkFile" ]; then
	Err 1 "File '$P_LinkFile' unreadable."
fi

#-------------------------------------------------List URLs Stored in Link File

if [ "$Action" == 'list' ]; then
	CheckIfEmpty "$Action"

	printf 'URLs currently stored:\n\n'

	Line=0
	while read; do
		[[ $REPLY == \#* || $REPLY == '' ]] && continue

		let Line++
		printf '\e[1;32m%2d\e[0m:  \e[1;31m%s\e[0m\n' $Line "$REPLY"
	done < "$LinkFile"
	printf '\n'
fi

#----------------------------------------------------------Add URL to Link File

if [ "$Action" == 'add' ]; then
	printf '%s\n' "$AddURL" >> "$LinkFile"
fi

#-----------------------------------------------------Remove URL from Link File

if [ "$Action" == 'remove' ]; then
	CheckIfEmpty "$Action"

	printf 'URLs currently stored:\n\n'

	Line=0
	URLs=()
	while read; do
		[[ $REPLY == \#* || $REPLY == '' ]] && continue

		let Line++
		URLs+=("$Line|$REPLY")
		printf '\e[1;32m%2d\e[0m:  \e[1;31m%s\e[0m\n' $Line "$REPLY"
	done < "$LinkFile"
	printf '\n'

	URL=2
	read -p 'Select a URL to remove: (1-20) ' URL
	case $URL in
		[1-9]|[1-9][0-9])
			for Link in "${URLs[@]}"; {
				if [ ${Link%%|*} -eq $URL ]; then
					ToRemove=${Link#*|}
					break
				fi
			}

			if [ -n "$ToRemove" ]; then
				sed -i "/${ToRemove//\//\\\/}/d" "$LinkFile"
			else
				Err 1 "Requested number of URL not found."
			fi

			;;
		*|'')
			Err 1 'Invalid or missing URL number provided.'
	esac
fi
