#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/backmeup
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/backmeup
# Started On        - Tue  7 Nov 21:50:05 GMT 2017
# Last Change       - Wed 11 Dec 02:00:59 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
. /usr/lib/tflbp-sh/YNInput
set +e

CurVer='2019-12-11'
Progrm=${0##*/}

MainDir="$HOME/.config/$Progrm"
StoreFile="$MainDir/store"
ExcluFile="$MainDir/exclude"
Exclude="--exclude-from=$ExcluFile"

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\r            BACKMEUP ($CurVer)
		\r            Written by terminalforlife (terminalforlife@yahoo.com)

		\r            Simple Bourne POSIX tool to quickly and easily back up your HOME.

		\rSYNTAX:     $Progrm [OPTS]

		\rOPTS:       --help|-h|-?            - Displays this help information.
		\r            --version|-v            - Output only the version datestamp.
		\r            --verbose|-V            - Be more verbose during archive creation.
		\r            --set-store|-s PATH     - Set and save the archive store to PATH.
		\r            --exclude|-E PATH       - Override default exclusions file with PATH.
		\r            --command|-C CMD        - Run CMD when $Progrm has finished.
		\r            --notify|-N             - Notify after completion, via notify-send.

		\rEXCLUDE:    To ignore files which would otherwise be added to the archive, you
		\r            must create an 'exclude' file (see below) which will then be used.

		\r            Importantly, strictly one path must exist per line.

		\rFILE:       ~/.config/$Progrm/store
		\r            ~/.config/$Progrm/exclude
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--verbose|-V)
			Verbose='-v' ;;
		--set-store|-s)
			shift; Store=$1

			if [ -z "$Store" ]; then
				Err 1 "Option '--set-store|-S' requires a path."
				if ! YNInput "Directory store not found -- set anyway?"; then
					Err 1 'User declined -- quitting.'
				fi
			fi

			printf '%s\n' "$Store" 1> "$StoreFile"
			printf "Store '%s' set.\n" "$Store"

			exit 0 ;;
		--exclude|-E)
			shift; ExcluFile=$1 ;;
		--command|-C)
			shift; UserCMD=$1

			if [ -z "$UserCMD" ]; then
				Err 1 "Option '--command|-C' requires one or more arguments."
			elif ! sh -nc "$UserCMD" 1> /dev/null 2>&1; then
				Err 1 "User-specified command(s) resulted in errors."
			fi ;;
		--notify|-N)
			Notify='true' ;;
		*)
			Err 1 "Incorrect argument(s) specified." ;;
	esac
	shift
done

ChkDep tar sync mkdir date notify-send sh

if ! [ -d "$MainDir" ] && ! mkdir -p "$MainDir"; then
	Err 1 "Directory '~/.config/$Progrm' not made."
elif [ -f "$ExcluFile" ] && ! [ -r "$ExcluFile" ]; then
	Err 1 "Exclusions file unreadable."
else
	if [ -f "$StoreFile" ] && [ -r "$StoreFile" ]; then
		read Store < "$StoreFile"

		if ! [ -d "$Store" ]; then
			Err 1 'Store directory not found.'
		elif ! [ -r "$Store" ] || ! [ -x "$Store" ]; then
			Err 1 'Store directory has insufficient permissions.'
		fi
	else
		Err 1 "Unknown store -- see: $Progrm -h"
	fi

	[ -f "$ExcluFile" ] || unset Exclude ExcluFile
fi

TimeStamp=`date '+%F_%H%M'`
Archive="BMU_$TimeStamp.tgz"

SigHandler(){
	Sig=$?
	printf '\rERROR: Interrupted -- removing incomplete archive.\n' 1>&2
	rm -f "${Store%/}/$Archive"
	exit $Sig
}

trap SigHandler INT HUP TERM ABRT QUIT

TarArgs='--posix --xattrs --ignore-failed-read --one-file-system'
tar $TarArgs $Verbose "$Exclude" -czpf "${Store%/}/$Archive" "$HOME" 2> /dev/null
ExitStatus=$?

trap 'printf "\rERROR: Wait, to avoid data loss.\n" 1>&2' INT HUP TERM ABRT QUIT

sync "${Store%/}/$Archive" 1> /dev/null 2>&1

trap - INT HUP TERM ABRT QUIT

[ -n "$UserCMD" ] && sh -c "$UserCMD"

if [ $ExitStatus -eq 0 ]; then
	printf 'Backup successfully created.\n'

	if [ "$Notify" = 'true' ]; then
		notify-send "Instance of '$Progrm' successfully finished."
	fi

	exit 0
else
	printf 'WARNING: One or more errors detected during backup.\n' 1>&2

	if [ "$Notify" = 'true' ]; then
		notify-send "Instance of '$Progrm' completed with errors."
	fi

	exit 1
fi
