#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/backmeup
#------------------------------------------------------------------------------
# Project Name      - Extra/source/backmeup/backmeup
# Started On        - Tue  7 Nov 21:50:05 GMT 2017
# Last Change       - Mon  4 Jan 17:56:33 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   coreutils (>= 8.25-2)
#   gzip (>= 1.6-4)
#   libnotify-bin (>= 0.7.6-2svn1)
#   tar (>= 1.28-2.1)
#------------------------------------------------------------------------------

CurVer='2021-01-04'
Progrm=${0##*/}

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\rUsage: $Progrm [OPTS] [FILE_1 [FILE_2] ...]

		\r  -h, --help               - Display this help information.
		\r  -v, --version            - Output the version datestamp.
		\r  -C, --command <CMD>      - Run CMD when $Progrm has finished.
		\r  -E, --exclude <PATH>     - Override default exclusions file.
		\r  -N, --notify             - Notify user of completion.
		\r  -V, --verbose            - Be more verbose while archiving.
		\r  -s, --set-store <PATH>   - Set and save the archive store.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

MainDir="$HOME/.config/$Progrm"
StoreFile="$MainDir/store"
ExcluFile="$MainDir/exclude"
Exclude="--exclude-from=$ExcluFile"

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--verbose|-V)
			Verbose='-v' ;;
		--set-store|-s)
			shift; Store=$1

			YNInput(){
				printf '%s [Y/N] ' "$1"
				read Answer

				case $Answer in
					[Yy]|[Yy][Ee][Ss])
						return 0 ;;
					[Nn]|[Nn][Oo])
						return 1 ;;
					*)
						printf 'ERROR: Invalid response -- quitting.\n'
						exit 1 ;;
				esac
			}

			if [ -z "$Store" ]; then
				Err 1 "Option '--set-store|-S' requires a path."
				if ! YNInput "Directory store not found -- set anyway?"; then
					Err 1 'User declined -- quitting.'
				fi
			fi

			printf '%s\n' "$Store" 1> "$StoreFile"
			printf "Store '%s' set.\n" "$Store"

			exit 0 ;;
		--exclude|-E)
			shift; ExcluFile=$1 ;;
		--command|-C)
			shift; UserCMD=$1

			if [ -z "$UserCMD" ]; then
				Err 1 "Option '--command|-C' requires one or more arguments."
			elif ! sh -nc "$UserCMD" 1> /dev/null 2>&1; then
				Err 1 'User-specified command(s) resulted in errors.'
			fi ;;
		--notify|-N)
			Notify='true' ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

DepCount=0
for Dep in tar sync mkdir date notify-send sh; do
	if ! command -V "$Dep" 1> /dev/null 2>&1; then
		Err 1 "Dependency '$Dep' not met."
		DepCount=$((DepCount + 1))
	fi
done

[ $DepCount -gt 0 ] && exit 1

if ! [ -d "$MainDir" ] && ! mkdir -p "$MainDir"; then
	Err 1 "Directory '~/.config/$Progrm' not made."
elif [ -f "$ExcluFile" ] && ! [ -r "$ExcluFile" ]; then
	Err 1 'Exclusions file unreadable.'
else
	if [ -f "$StoreFile" ] && [ -r "$StoreFile" ]; then
		read Store < "$StoreFile"

		if ! [ -d "$Store" ]; then
			Err 1 'Store directory not found.'
		elif ! [ -r "$Store" ] || ! [ -x "$Store" ]; then
			Err 1 'Store directory has insufficient permissions.'
		fi
	else
		Err 1 "Unknown store -- see: $Progrm -h"
	fi

	[ -f "$ExcluFile" ] || unset Exclude ExcluFile
fi

TimeStamp=`date '+%F_%H%M'`
Archive="BMU_$TimeStamp.tgz"

SigHandler(){
	Sig=$?
	printf '\rERROR: Interrupted -- removing incomplete archive.\n' 1>&2
	rm -f "${Store%/}/$Archive"
	exit $Sig
}

trap SigHandler INT HUP TERM ABRT QUIT
#--ignore-failed-read
TarArgs='--posix --xattrs --one-file-system --gzip --preserve-permissions'
tar $TarArgs $Verbose "$Exclude" -cf "${Store%/}/$Archive" "${@:-$HOME}" 2> /dev/null
ExitStatus=$?

trap 'printf "\rERROR: Wait, to avoid data loss.\n" 1>&2' INT HUP TERM ABRT QUIT

sync "${Store%/}/$Archive" 1> /dev/null 2>&1

trap - INT HUP TERM ABRT QUIT

[ -n "$UserCMD" ] && sh -c "$UserCMD"

if [ $ExitStatus -eq 0 ]; then
	printf 'Backup successfully created.\n'

	if [ "$Notify" = 'true' ]; then
		notify-send "Instance of '$Progrm' successfully finished."
	fi
else
	printf 'WARNING: One or more errors detected during backup.\n' 1>&2

	if [ "$Notify" = 'true' ]; then
		notify-send "Instance of '$Progrm' completed with errors."
	fi

	exit 1
fi
