#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/tagged
#------------------------------------------------------------------------------
# Project Name      - Extra/source/tagged/tagged
# Started On        - Sun  9 Jan 16:57:12 GMT 2022
# Last Change       - Sat  3 Jun 13:39:49 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Handle when git(1) works outside of current repository.
#TODO: Colorize the basename of paths to make it stand out.
#
# Bugs:
#
#TODO: Using `-T` and `-t` results in an incorrect total for the top files.
#
#      It's not a huge deal, as you do sort of see the correct result, but the
#      total probably should be showing the total for the top files shown, not
#      the files given to Tagged.
#
# Dependencies:
#
#   bash (>= 3.1)
#   git (>= 2.17.1)
#------------------------------------------------------------------------------

CurVer='2023-06-03'
Progrm=${0##*/}

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [FILE_1 [FILE_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -T, --top INT            - Display only the top INT number of files.
		  -b, --basenames          - Show only the basename for each path.
		  -o, --only-total         - Display only the total number of commits.
		  -r, --reverse            - Show least number of commits first.
		  -t, --total              - Display the total number of commits.
		  -z, --zero               - Include files not part of any commits.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Sorted='<'

Args=()
while [[ -n $1 ]]; do
	case $1 in
		-[^-]*)
			Str=${1#-}
			Len=${#Str}
			for (( Index = 0; Index < Len; Index++ )); {
				Args+=(-"${Str:Index:1}")
			} ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--no-color|-C)
			NoColor='True' ;;
		--top|-T)
			if [[ -z $2 ]]; then
				Err 1 "Option '$1' requires an argument."
			elif ! [[ $2 != 0 && $2 =~ ^[[:digit:]]+$ ]]; then
				Err 1 "Option '$1' requires a positive integer."
			else
				Top=$2
				shift
			fi ;;
		--basenames|-b)
			Basenames='True' ;;
		--only-total|-o)
			ArgOnlyTotal=$1
			OnlyTotal='True' ;;
		--reverse|-r)
			Sorted='>' ;;
		--total|-t)
			Total='True' ;;
		--zero|-z)
			Zero='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ $OnlyTotal == True && $Total != True ]]; then
	Err 1 "Option '$ArgOnlyTotal' missing its pair."
elif (( $# == 0 )); then
	Err 1 "No files given -- see: $Progrm --help"
fi

if ! type -P git &> /dev/null; then
	Err 0 "Dependency 'git' not met."
fi

if [[ $NoColor != True ]]; then
	Grey='\e[37m'
	Reset='\e[0m'
fi

#-------------------------Use git(1) to Get the Number of Commits for Each File

for File in "$@"; {
	[[ -f $File ]] || continue

	Commits=0
	Failed='False'
	while read; do
		if [[ $REPLY =~ ^[[:alnum:]]{40}$ ]]; then
			(( Commits++ ))
		else
			Failed='True'
			break
		fi
	done <<< "$(git rev-list HEAD -- "$File")"
	(( TotalCommits += Commits ))

	[[ $Failed == True ]] && continue
	[[ $OnlyTotal == True ]] && continue

	if [[ $Zero == True ]] || (( Commits > 0 )); then
		printf -v CommaCommits "%'d" $Commits
		Files+=("$CommaCommits:$File")
	fi

	Len=${#CommaCommits}
	if (( Len > LenMax )); then
		LenMax=$Len
	fi
}

#--------------------------------------------------Array Sorting & Data Display

if [[ $OnlyTotal == True ]]; then
	printf "%'d\n" $TotalCommits
else
	# Sort the array of files.
	ArrLen=${#Files[*]}
	for (( Iter = 0; Iter < ArrLen; Iter++ )); {
		Switched='False'
		for (( Index = 0; Index < ArrLen - (1 + Iter); Index++ )); {
			This=${Files[Index]%%:*}
			This=${This//,/}

			Next=${Files[Index + 1]%%:*}
			Next=${Next//,/}

			if (( This $Sorted Next )); then
				Temporary=${Files[Index]}
				Files[Index]=${Files[Index + 1]}
				Files[Index + 1]=$Temporary

				Switched='True'
			fi
		}

		[[ $Switched == False ]] && break
	}

	# List out the files with their number of commits.
	for File in "${Files[@]}"; {
		Filename=${File#*:}
		Commits=${File%%:*}

		# Show top INT number of files.
		if [[ -n $Top ]]; then
			(( ++Count > Top )) && break
		fi

		[[ $Basenames == True ]] && Filename=${Filename##*/}

		printf "%*s $Grey%-s$Reset\n" $LenMax $Commits "$Filename"
	}

	if [[ $Total == True ]]; then
		printf "\nTotal: %'d\n" $TotalCommits
	fi
fi
