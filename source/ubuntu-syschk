#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/ubuntu-syschk
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/ubuntu-syschk
# Started On        - Mon 22 Jan 12:03:01 GMT 2018
# Last Change       - Mon  3 Feb 17:12:17 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-02-03'
Progrm=${0##*/}

Info(){ [ "$Verbose" == 'true' ] && printf "%s\n" "$1"; }
Alert(){ AC+=1; printf "ALERT: %s\n" "$1"; }

Domain='https://github.com'

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Perform various system health checks on Ubuntu and similar.

		SYNTAX:     $Progrm [OPTS] [CHECK_1 [CHECK_2] ...]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --debug|-D              - Enable built-in Bash debugging.
		            --ignore-distro|-I      - Ignore the distribution ID.
		            --no-summary|-S         - Disable post-checks summary.
		            --quiet|-q              - Quieter operation, with errors.
		            --update|-U             - Check for updates to $Progrm.
		            --verbose|-V            - Execute $Progrm more verbosely.

		CHECKS:     The following list contains toggle-able check methods:

		            dpkgrc=[0|1]            - There are 'rc' packages.
		            firewall=[0|1]          - UFW firewall is enabled.
		            grub=[0|1]              - Valid Grub configuration.
		            ipspoof=[0|1]           - Extra IP spoof protection.
		            logchk=[0|1]            - Warnings or errors in logfiles.
		            packages=[0|1]          - Packages are probably healthy.
		            password=[0|1]          - User passwords have expired.
		            perms=[0|1]             - Permission-related checks.
		            safekern=[0|1]          - Checks for safer kernel values.
		            services=[0|1]          - Checks for services.
		            shmchk=[0|1]            - Noexec check for shared memory.
		            sshsrv=[0|1]            - SSH server sshd_conf checks.
		            storage=[0|1]           - Checks related to storage.
		            swap=[0|1]              - Swap file/partition checks.
		            swappiness=[0|1]        - Check for swappiness value.
		            temps=[0|1]             - Temperature checks.

		EXAMPLE:    $Progrm firewall=1 storage=1 swap=1 temps=1
		            $Progrm -V --no-summary packages=1

		NOTE:       Some features on some setups may fail due to needing root
		            access. By default though, as of Ubuntu 16.04.3, a standard
		            setup should be OK.

		            Each CHECK can be toggled on (1) or off (0) after any OPTS.
		            CHECKS are by default set to 1, except sshsrv and logchk.

		            This is mainly targeting Ubuntu systems, but it should
		            support similar ones, like Linux Mint, Debian, Zorin, etc.

		CAVEAT:     The sshsrv check assumes OpenSSH; other SSH server software
		            will NOT be picked up! Check the software you installed.

		SITE:       $Domain/terminalforlife/Extra
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"
			exit 0 ;;
		--quiet|-q)
			BeQuiet='true' ;;
		--update|-U)
			Update='true' ;;
		--debug|-D)
			DebugMe='true' ;;
		--no-summary|-S)
			NoSummary='true' ;;
		--ignore-distro|-I)
			IgnoreDistro='true' ;;
		--verbose|-V)
			Verbose='true' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

Info 'Reading default and/or custom parameters.'
Dpkgrc=0 Firewall=0 Grub=0 IPSpoof=0 LogChk=1 Packages=0 Password=0 Perms=0
SafeKern=0 Services=0 SharedMemChk=0 SSHServer=1 Storage=0 Swap=0 Swappiness=0 Temps=0

while [ "$1" ]; do
	case $1 in
		  firewall=[01]) Firewall=${1/*=} ;;
		  services=[01]) Services=${1/*=} ;;
		      swap=[01]) Swap=${1/*=} ;;
		     temps=[01]) Temps=${1/*=} ;;
		  packages=[01]) Packages=${1/*=} ;;
		     perms=[01]) Perms=${1/*=} ;;
		   storage=[01]) Storage=${1/*=} ;;
		  safekern=[01]) SafeKern=${1/*=} ;;
		swappiness=[01]) Swappiness=${1/*=} ;;
		  password=[01]) Password=${1/*=} ;;
		      grub=[01]) Grub=${1/*=} ;;
		    dpkgrc=[01]) Dpkgrc=${1/*=} ;;
		    sshsrv=[01]) SSHServer=${1/*=} ;;
		    shmchk=[01]) SharedMemChk=${1/*=} ;;
		   ipspoof=[01]) IPSpoof=${1/*=} ;;
		    logchk=[01]) LogChk=${1/*=} ;;
		*)
			Err 1 'Incorrect CHECK value(s) specified.' ;;
	esac
	shift
done

[ "$BeQuiet" == 'true' ] && exec 1> /dev/null
[ "$DebugMe" == 'true' ] && set -x

if ! [ "$IgnoreDistro" == 'true' ]; then
	Info 'Checking distribution ID via: /etc/os-release'
	if [ -f /etc/os-release -a -r /etc/os-release ]; then
		while IFS="=" read -a X; do
			if [ "${X[0]//\"}" == 'ID_LIKE' ]; then
				if ! [[ ${X[1]//\"} =~ (debian|ubuntu) ]]; then
					Err 1 'Unsupported distribution base.'
				fi

				break
			fi
		done < /etc/os-release
	else
		Err 1 'Unable to determine the distribution ID.'
	fi
fi

declare -i AC=0

if [ $Services -eq 0 ]; then
	if type -fP systemctl &> /dev/null; then
		if [ $Firewall -eq 0 ]; then
			Info 'Asking SystemD if the UFW service is active.'
			if ! systemctl -q is-active ufw; then
				Alert 'SystemD detects the UFW service is inactive.'
			fi
		fi

		Info 'Checking operational state of the machine.'
		case $(systemctl is-system-running) in
			degraded)
				Alert 'The system is operational, but one or more units failed.' ;;
			maintenance)
				Alert 'The rescue or emergency target is active.' ;;
			offline)
				Alert 'The system manager is not running.' ;;
			unknown)
				Alert 'The operational state could not be determined.' ;;
		esac
	else
		Err 0 'Unable to find or access: systemctl'
	fi

	if type -fP systemd-analyze &> /dev/null; then
		Info 'Loading and checking unit files with SystemD.'
		systemd-analyze verify || Alert "SystemD detected one or more unit-related errors."
	else
		Err 0 'Unable to find or access: systemd-analyze'
	fi
fi

if [ $Password -eq 0 ]; then
	if type -fP expiry &> /dev/null; then
		Info "Checking current user's password expiration."
		expiry -c || Alert 'Error(s) detected while checking password expiration.'
	else
		Err 0 'Unable to find or access: expiry'
	fi
fi

if [ $Swap -eq 0 ]; then
	if type -fP swapon &> /dev/null; then
		Info 'Looking for active swap files or partitions.'
		readarray ARRAY <<< "$(swapon --noheadings)"
		if [ ${#ARRAY[@]} -eq 0 ]; then
			Alert 'Unable to detect an active swap file/partition.'
		fi
	else
		Err 0 'Unable to find or access: swapon'
	fi
fi

if [ $Storage -eq 0 ]; then
	if type -fP df &> /dev/null; then
		while read -a X; do
			[[ ${X[0]} == /dev/* ]] || continue

			Info "Querying ${X[0]} for usage greater than 90%."
			if [ "${X[1]%\%}" -gt 90 ]; then
				Alert "Low remaining storage space detected: ${X[0]}"
			fi
		done <<< "$(df --output=source,pcent)"
	else
		Err 0 'Unable to find or access: df'
	fi
fi

if [ $Perms -eq 0 ]; then
	if type -fP stat &> /dev/null; then
		STAT(){
			[ -e "$1" ] || return 1

			if [ -d "$1" ]; then
				Info "Checking metadata for directory: $1"
			elif [ -f "$1" ]; then
				Info "Checking metadata for file: $1"
			fi

			STAT=`stat --print '%a' "$1"`
			OG=`stat --print '%u %g' "$1"`
			read OWNER GROUP <<< "$OG"

			if ! [ "$3" == 'X' ] && ! [ $OWNER -eq $3 ]; then
				Alert "Owner $OWNER detected: $1"
			fi

			if ! [ "$4" == 'X' ] && ! [ $GROUP -eq $3 ] ; then
				Alert "Group $GROUP detected: $1"
			fi

			if ! [ "$2" == 'XXX' ] && [ $STAT -gt $2 ]; then
				Alert "Unsafe permissions ($STAT) detected: $1"
			fi
		}

		for ITEM in /{root,boot}; {
			STAT "$ITEM" 700 0 0
		}

		for ITEM in\
		\
			/var /etc /bin /sbin /dev /cdrom /lib\
			/lib64 /media /mnt /srv /usr /sys /proc;
		{
			STAT "$ITEM" 755 0 0
		}

		STAT /etc/passwd 644 0 0
		STAT /etc/shadow 640 0 X #TODO: Find and check the correct GID.

		for ITEM in /home/*; {
			if [ "$ITEM" == "/home/lost+found" ]; then
				STAT "$ITEM" 700 0 0
			elif [ "$ITEM" == "$HOME" ]; then
				STAT "$ITEM" 700 $UID $UID
			else
				STAT "$ITEM" 700 X X
			fi
		}

		for DIR in ${PATH//:/ }; {
			if [ -d "$DIR" ]; then
				Info "Checking metadata of executables in: $DIR"
				for File in "$DIR"/*; {
					[ -L "$File" ] && continue
					STAT "$File" XXX 0 X

					#TODO: Check group, and if it's not 0, then check, -
					#      depending on the file being processed, whether it
					#      matches the correct group for that file.
				}
			else
				Alert "PATH Directory missing: $DIR"
			fi
		}
	else
		Err 0 'Unable to find or access: stat'
	fi
fi

if [ $Packages -eq 0 ]; then
	if type -fP apt-get &> /dev/null; then
		Info 'Asking APT if there are any package changes.'
		OPT='APT::Get::Show-User-Simulation-Note=0'
		while read -a X; do
			if [[ ${X[*]} == *not\ to\ upgrade. ]]; then
				SUM="$((${X[0]}+${X[3]}))"
				if ! [[ $SUM =~ ^[0-9]+$ ]]; then
					Err 0 'Invalid SUM detected.'
				elif [ $SUM -gt 0 ]; then
					Alert "APT has detected $SUM package change(s)."
				fi

				break
			fi
		done <<< "$(apt-get -o "$OPT" -q -s dist-upgrade)"

		Info 'Asking APT if there are any missing dependencies.'
		INSCHK=`apt-get -o "$OPT" -qq -s install -f`
		[ -n "$INSCHK" ] && Alert 'Missing dependencies are available to be fixed.'
	else
		Err 0 'Unable to find or access: apt-get'
	fi

	if type -fP dpkg &> /dev/null; then
		Info 'Performing database sanity and consistency checks.'
		if ! dpkg --audit; then
			Alert 'One or more APT database checks have failed.'
		fi
	else
		Err 0 'Unable to find or access: dpkg'
	fi
fi

if [ $Temps -eq 0 ]; then
	if type -fP sensors &> /dev/null; then
		Info 'Checking hardware sensors for high CPU temperature.'
		while read -a X; do
			if [ "${X[0]}${X[1]}${X[2]}" == "Physicalid0:" ]; then
				TEMP=${X[3]//[!0-9]}
				if [[ $TEMP =~ ^[0-9]+$ ]]; then
					if [ $TEMP -gt 800 ]; then
						Alert "Current CPU temperature exceeding 80°C!"
					fi
				else
					Err 0 "Unable to determine the temperature of the CPU."
				fi

				break
			fi
		done <<< "$(sensors -A)"
	else
		Err 0 "Unable to find or access: sensors"
	fi
fi

if [ $SafeKern -eq 0 ]; then
	Kern(){
		P=${1//\//.}
		P=${P/\/proc\/sys\/}
		Info "Checking parameter: $P"
		declare -i V=`< /"$1"`
		if ! [ -f /"$1" ]; then
			printf "Skipping checks for non-existent: $P\n"
		elif ! [ $V -eq $2 ]; then
			Alert "${3:-Unsecure} value of '$V' (!$2) at: $P"
		fi
	}

	# These are Ubuntu-recommended settings, mentioned in `/etc/sysctl.conf`, -
	# and some settings are mentioned on the Arch Wiki's security section.

	# Log martians.
	Kern 'proc/sys/net/ipv4/conf/all/log_martians' 1
	Kern 'proc/sys/net/ipv4/icmp_ignore_bogus_error_responses' 1

	# Protects against IP spoofing.
	Kern 'proc/sys/net/ipv4/conf/all/rp_filter' 1
	Kern 'proc/sys/net/ipv4/conf/default/rp_filter' 1

	# Not a router. Also ignores ICMP redirects.
	Kern 'proc/sys/net/ipv4/conf/all/accept_redirects' 0
	Kern 'proc/sys/net/ipv6/conf/all/accept_redirects' 0
	Kern 'proc/sys/net/ipv4/conf/all/send_redirects' 0
	Kern 'proc/sys/net/ipv4/conf/default/send_redirects' 0
	Kern 'proc/sys/net/ipv4/conf/all/accept_source_route' 0
	Kern 'proc/sys/net/ipv6/conf/all/accept_source_route' 0
	Kern 'proc/sys/net/ipv4/conf/default/accept_source_route' 0
	Kern 'proc/sys/net/ipv6/conf/default/accept_source_route' 0

	# Block SYN attacks.
	Kern 'proc/sys/net/ipv4/tcp_syncookies' 1
	Kern 'proc/sys/net/ipv4/tcp_max_syn_backlog' 2048 Unrecommended
	Kern 'proc/sys/net/ipv4/tcp_synack_retries' 2 Unrecommended
	Kern 'proc/sys/net/ipv4/tcp_syn_retries' 5 Unrecommended

	# Ignore pings.
	Kern 'proc/sys/net/ipv4/icmp_echo_ignore_all' 1

	# General system security.
	Kern 'proc/sys/kernel/dmesg_restrict' 1
	Kern 'proc/sys/kernel/kptr_restrict' 1
	Kern 'proc/sys/kernel/yama/ptrace_scope' 1
fi

if [ $Swappiness -eq 0 ]; then
	Info 'Looking for potentially inappropriate swappiness.'
	File='/proc/sys/vm/swappiness'
	if [ -f "$File" -a -r "$File" ]; then
		Swap=`< "$File"`
		#TODO: Assess best swappiness value, depending on available RAM.
		if [ $Swap -gt 30 ]; then
			Alert "Potentially unsuitable swappiness: $Swap"
		fi
	else
		Err 0 "Unable to find or access: $File"
	fi
fi

if [ $Grub -eq 0 ]; then
	if type -fP grub-script-check &> /dev/null; then
		if [ -r /boot/grub/grub.cfg ]; then
			Info "Checking '/boot/grub/grub.cfg' for errors."
			if ! grub-script-check /boot/grub/grub.cfg; then
				Alert "One or more errors found in: /boot/grub/grub.cfg"
			fi
		else
			Err 0 'Unable to find or access: /boot/grub/grub.cfg'
		fi
	else
		Err 0 'Unable to find or access: grub-script-check'
	fi
fi

if [ $SharedMemChk -eq 0 ]; then
	if type -fP mount &> /dev/null; then
		# Ubuntu-recommended settings.
		while read -a X; do
			if [ "${X[0]}${X[2]}" == "tmpfs/dev/shm" ]; then
				IFS="(" read -a X <<< "${X[5]%)}"
				for O in ${X[1]//,/ }; {
					OKMATCH='^(rw|ro|nosuid|nodev)$'
					if [[ $O =~ $OKMATCH ]]; then
						continue
					elif [ "$O" == "noexec" ]; then
						N='true'
					else
						Alert "Unknown mount option '$O' detected: /dev/shm"
					fi
				}

				if ! [ "$N" == 'true' ]; then
					Alert "Mount option 'noexec' not found: /dev/shm"
				fi

				break
			fi
		done <<< "$(/bin/mount)"
	else
		Err 0 'Unable to find or access: mount'
	fi
fi

if [ $Dpkgrc -eq 0 ]; then
	if type -fP dpkg &> /dev/null; then
		#TODO: Add a blacklist for the user!
		Info "Querying DPKG for packages with an 'rc' status."
		while read -ra REPLY; do
			if [ "${REPLY[0]}" == rc ]; then
				Alert "DPKG reports 'rc' package: ${REPLY[1]}"
			fi
		done <<< "$(dpkg -l 2> /dev/null)"
	else
		Err 0 'Unable to find or access: dpkg'
	fi
fi

if [ $IPSpoof -eq 0 ]; then
	File='/etc/host.conf'
	Info "Checking IP spoof preventative measures: $File"
	if [ -f "$File" -a -r "$File" ]; then
		while read -a X; do
			if [ "${X[0]}${X[1]}" == 'orderbind,hosts' ]; then
				PASS1='true'
			elif [ "${X[0]}${X[1]}" == 'nospoofon' ]; then
				PASS2='true'
			fi
		done < "$File"

		#TODO: I'm not sure if this is too aggressive. What if the user
		#       has other priorities set here? Perhaps check for however
		#       many comma-separated fields there are, to ascertain whether
		#       the use-case is non-standard.
		if ! [ "$PASS1" == 'true' ]; then
			Alert "Safer setting 'order bind,hosts' not found: $File"
		fi

		if ! [ "$PASS2" == 'true' ]; then
			Alert "Safer setting 'nospoof on' not found: $File"
		fi
	else
		Err 0 "Unable to find or access: $File"
	fi
fi

if [ $SSHServer -eq 0 ]; then
	if type -fP dpkg-query &> /dev/null; then
		Info "Checking for safer SSH server settings: $File"
		if ! dpkg-query -W openssh-server &> /dev/null; then
			Err 0 "Is the OpenSSH server installed?"
		else
			MATCH1="^[Pp]ermit[Rr]oot[Ll]ogin no$"
			MATCH2="^[Pp]ort [0-9]+$"
			MATCH3="^[Pp]assword[Aa]uthentication no$"
			File="/etc/ssh/sshd_config"
			if [ -f "$File" -a -r "$File" ]; then
				while read LINE; do
					if ! [[ $LINE =~ $MATCH1 ]]; then
						Alert "Root login via SSH is enabled: $File"
					elif ! [[ $LINE =~ $MATCH2 ]]; then
						Alert "The SSH server port '22' is too common: $File"
					elif ! [[ $LINE =~ $MATCH3 ]]; then
						Alert "SSH server login via password enabled: $File"
					fi
				done < "$File"
			fi
		fi
	else
		Err 0 "Unable to find or access: ssh"
	fi
fi

# Probably not much use, which is why it's not enabled by default.
if [ $LogChk -eq 0 ]; then
	for File in /var/log/{boot.log,syslog}; {
		declare -i Warning=0
		declare -i Error=0
		if [ -f "$File" -a -r "$File" ]; then
			while read; do
				case $REPLY in
					*[Ww][Aa][Rr][Nn][Ii][Nn][Gg]*) Warning+=1 ;;
					        *[Ee][Rr][Rr][Oo][Rr]*) Error+=1 ;;
				esac
			done < "$File"

			if [ $Warning -gt 0 ]; then
				Alert "File ${File##*/} has `printf "%'d" "$Warning"` line(s) with 'WARNING'."
			fi

			if [ $Error -gt 0 ]; then
				Alert "File ${File##*/} has `printf "%'d" "$Error"` line(s) with 'ERROR'."
			fi
		else
			Err 0 "Unable to find or access: $File"
		fi
	}
fi

if ! [ "$NoSummary" == 'true' ]; then
	[ $AC -gt 0 ] || printf "Nothing to report!\n"

	printf "DATE       - %(%F (%X))T\n" "-1"
	printf "USER       - %s (%d)\n" "$USER" "$UID"
	printf "ALERTS     - %d\n" "$AC"
fi
