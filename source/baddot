#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/baddot
#------------------------------------------------------------------------------
# Project Name      - Extra/source/baddot
# Started On        - Tue 16 May 02:41:55 BST 2023
# Last Change       - Fri 26 May 21:15:40 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A purely BASH tool to search file and directory names character by character
# for suspicious 'dot' Unicode ('\u2024'), which is especially associated with
# but not necessarily exclusively for a recently-surfaced PDF malware.
#
# Any non-option arguments handed to Baddot are looked for and their filenames
# scanned. Here, 'file' means anything, Linux style. If it has a name, it will
# be checked!
#
# As Baddot scans, you should expect to see a list of directories in which it
# is searching for the questionable 'dot' Unicode. If anything is found, the
# filenames will be clearly listed, the suspect characters pointed out, and
# each suspect character's index listed for reference or parsing.
#
# If checking exit statuses, you'll want 2 and NOT want 0.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.2)
#------------------------------------------------------------------------------

CurVer='2023-05-26'
Progrm=${0##*/}

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [DIR] [DIR ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -r, --recursive          - Traverse subdirectories recursively.

		All provided directories will be checked for files and directories, -
		including those which are hidden, whose names hide suspicious 'dot'
		Unicode. By default, the current working directory will be scanned.

		The use of '--' to ignore proceeding options is supported.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Glob='*'

while [[ -n $1 ]]; do
	case $1 in
		--)
			break ;;
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--recursive|-r)
			shopt -s globstar

			Glob='**' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

(( $# == 0 )) && set -- .

shopt -s dotglob nullglob

#---------------------------------------------------Begin Scanning and Reporting

Found=
PrintDir=
FoundTTL=0
Pointers=()
for ArgDir; {
	if ! [[ -d $ArgDir ]]; then
		Err 0 "Directory '$ArgDir' not found."

		continue
	fi

	for Dir in "${ArgDir%/}"/$Glob; {
		File=${Dir##*/}

		# This block is neutered in < BASH 4.2.
		Len=${#File}
		for (( Char = 0; Char < Len; Char++ )); {
			if [[ ${File:Char:1} == $'\u2024' ]]; then
				(( FoundTTL++ ))

				Found='True'
				Pointers+=($Char)
			fi
		}

		if [[ $Found == True ]]; then
			if [[ $Dir == $HOME/* ]]; then
				PrintDir="~${Dir#$HOME}"
			else
				PrintDir=$Dir
			fi

			PrintDir=${PrintDir%/*}

			# Don't keep spamming the same directories.
			[[ $PrintDir != "$PrintDirLast" ]] && printf '%s/\n' "$PrintDir"
			PrintDirLast=$PrintDir

			printf '  > "%s"\n' "$File"

			Out='     '
			for (( Char = 0; Char < Len; Char++ )); {
				for Pointer in "${Pointers[@]}"; {
					if (( Pointer == Char )); then
						UsePointer='True'

						break
					fi
				}

				if [[ $UsePointer == True ]]; then
					Out+='^'

					UsePointer=
				else
					Out+=' '
				fi
			}

			printf '%s\n' "$Out"

			# In-case of wide characters. This also aids automation to remove or
			# better identify and confirm questionable characters.
			for Pointer in "${Pointers[@]}"; {
				printf '     - %d\n' $Pointer
			}

			printf '\n'

			Found=
			Pointers=()
		fi
	}
}

if (( FoundTTL > 0 )); then
	printf 'WARNING: Found %d suspicious Unicode character(s).\n' $FoundTTL
	exit 0
else
	exit 2
fi
