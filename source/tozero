#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/tozero
#------------------------------------------------------------------------------
# Project Name      - Extra/source/tozero
# Started On        - Sun 15 Oct 23:29:20 BST 2017
# Last Change       - Sat 14 Mar 14:26:47 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Rounding up can be a little on the extreme side. Use floats?
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   libtflbp-sh (>= 2019-12-10)
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-03-14'
Progrm=${0##*/}

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Simple program to display a countdown for a target date.

		SYNTAX:     $Progrm [OPTS] [TARGET]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --int-only|-I           - Show the integer, not its type.
		            --only|-o TYPE          - Where TYPE is which to only show.

		NOTE:       Behind the scenes, 'date' is used, so strings like
		            "tomorrow", "next month", and "yesterday" can be used
		            instead of a YYYY-MM-DD format.

		            The default TARGET is "tomorrow"; if not TARGET is given.

		            Valid TYPEs: seconds|s minutes|m hours|h days|d weeks|w

		EXAMPLE:    Display countdown until December the 11th, 2017:

		              $ $Progrm 2019-05-14
		              S: 125,324
		              M: 2,088
		              H: 34
		              D: 1
		              W: 0
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--only|-o)
			Type=$2

			case ${2:-NULL} in
				seconds|s|minutes|m|hours|h|days|d|weeks|w)
					;;
				NULL)
					Err 1 "Option '$1' requires an argument." ;;
				*)
					Err 1 "Invalid TYPE -- see: $Progrm -h" ;;
			esac

			shift ;;
		--int-only|-I)
			IntOnly='true' ;;
		-*)
			Err 1 "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

Date=$1

ChkDep date

date -d "$Date" 1> /dev/null 2>&1 || Err 1 "Incorrect TARGET string."

Target=${Date:-tomorrow}

Buffer1=`date -d "$Target" +%s`
Buffer2=`date +%s`

Seconds=$((Buffer1-Buffer2))
Minutes=$(((Buffer1-Buffer2)/60))
Hours=$(((Buffer1-Buffer2)/60/60))
Days=$(((Buffer1-Buffer2)/60/60/24))
Weeks=$(((Buffer1-Buffer2)/60/60/24/7))

Show(){
	if [ "$IntOnly" == 'true' ]; then
		printf "%-'d\n" "$2"
	else
		printf "%s: %-'d\n" "$1" "$2"
	fi
}

case $Type in
	seconds|s) Show S $Seconds ;;
	minutes|m) Show M $Minutes ;;
	  hours|h) Show H $Hours ;;
	   days|d) Show D $Days ;;
	  weeks|w) Show W $Weeks ;;
	*)
		Show S $Seconds
		Show M $Minutes
		Show H $Hours
		Show D $Days
		Show W $Weeks ;;
esac
