#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/cito
#----------------------------------------------------------------------------------
# Project Name      - Extra/source/cito
# Started On        - Thu  5 Dec 20:40:35 GMT 2019
# Last Change       - Tue 10 Dec 16:23:32 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# The word 'cito' (/ˈki.toː/) is a Latin adverb, to mean 'swift'.
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
. /usr/lib/tflbp-sh/CutStr
. /usr/lib/tflbp-sh/YNInput
set +e

CurVer='2019-12-10'
Progrm=${0##*/}

EventLog="/var/log/${Progrm}-events.log"
RawDomain='https://raw.githubusercontent.com'
LogTypes='all info warning error'

Usage(){
	while read -r CurLine; do
		printf "%b\n" "$CurLine"
	done <<-EOF
		\r            CITO ($CurVer)
		\r            Written by terminalforlife (terminalforlife@yahoo.com)

		\r            Bourne POSIX installer for local or GitHub files.

		\rSYNTAX:     $Progrm [OPTS] [File_1 [File_2] ...]

		\rOPTS:       --help|-h|-?            - Displays this help information.
		\r            --version|-v            - Output only the version datestamp.
		\r            --log-view|-L TYPE      - Show TYPE log entries for Cito.
		\r            --remote|-r INFO        - Specify a remote file; see REMOTE.
		\r            --hash|-H FILE          - Use FILE to cross-check hashes.
		\r            --clobber|-c            - Overwrite files without prompting.
		\r            --mode|-M MODE          - Where MODE is, IE: '755'.
		\r            --owner|-O OWNER        - Where OWNER is, IE: '0'.
		\r            --group|-G GROUP        - Where GROUP is, IE: '0'.
		\r            --target|-T PATH        - Where PATH is, IE: '/usr/bin/1337'.

		\rNOTE:       The use of '--' to specify the end of OPTS, is supported.

		\r            Where TYPE is one of 'all', 'info', 'warning', or 'error'.

		\r            When a remote file is selected, the '--hash|-H' FILE will
		\r            be assumed as within the selected user, repo', and branch.

		\r            Hash checks assume the following traditional format:

		\r              0t1h2e3h4a5s6h7g8o9e1s2h3e4r5e67  .secret_dot_file

		\r            Currently, only MD5 hash checking is supported.

		\rREMOTE:     Where INFO is an order-dependent, space-delimited list of
		\r            strings used by Cito to correctly fetch the file.

		\r              [U]SER [R]EPO [B]RANCH [F]ILE

		\r            U = The GitHub user account.
		\r            R = The repository for the user.
		\r            B = The branch for the repository.
		\r            F = The file within the repository.

		\rEXAMPLE:    Remote operations...

		\r              $Progrm -r [USER] [REPO] [BRANCH] [FILE_1 [FILE_2] ...]
		\r              $Progrm -M [MODE] -O [OWNER] -G [GROUP] -T [TARGET] -r ...
		\r              $Progrm --hash [MD5_FILE] -r ...

		\r            Local operations...

		\r              $Progrm --clobber [FILE_1 [FILE_2] ...]
		\r              $Progrm -H [MD5_FILE] [FILE_1 [FILE_2] ...]

		\rFILE:       $EventLog
	EOF
}

[ $# -eq 0 ] && Err 1 "Argument(s) required -- see: $Progrm -h"

NullArg(){ # Usage: NullArg [VARIABLE] [OPTION]
	[ -z "$1" ] && Err 1 "Null argument for '$2' option."
}

while [ -n "$1" ]; do
	case $1 in
		--)
			shift; break ;;
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--log-view|-L)
			shift; LogView=$1

			if [ -z "$LogView" ]; then
				Err 1 "Option '--log-view|-L' requires one of TYPE."
			fi ;;
		--remote|-r)
			shift

			DoRemote='true'
			GHUser=$1
			Repo=$2
			Branch=$3

			RemCount=0
			for Iter in "x$GHUser" "x$Repo" "x$Branch"; do
				RemCount=$((RemCount + 1))

				case $RemCount in
					1) RemName='USER' ;;
					2) RemName='REPO' ;;
					3) RemName='BRANCH' ;;
				esac

				if [ "$Iter" = 'x' ]; then
					Err 1 "Missing '$RemName' for '--remote|-r' option."
				fi

				shift
			done

			unset Iter RemCount RemName

			# Stop processing regular arguments and have all following arguments
			# be processed later (in a for loop for the remote section) for getting
			# multiple remote files in one command execution.
			break ;;
		--hash|-H)
			shift; MD5File=$1
			NullArg "$MD5File" '--hash|-H' ;;
		--clobber|-c)
			Clobber='true' ;;
		--mode|-M)
			shift; UserMode=$1
			Regardless='true'
			NullArg "$UserMode" '--mode|-M' ;;
		--owner|-O)
			shift; UserOwner=$1
			Regardless='true'
			NullArg "$UserOwner" '--owner|-O' ;;
		--group|-G)
			shift; UserGroup=$1
			Regardless='true'
			NullArg "$UserGroup" '--group|-G' ;;
		--target|-T)
			shift; UserTarget=$1
			Regardless='true'
			NullArg "$UserTarget" '--target|-T' ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ "$DoRemote" = 'true' -a $# -eq 0 ]; then
	Err 1 "Missing one or more 'FILE' for '--remote|-r' option."
fi

unset -f NullArg

ChkDep mv id chmod chown md5sum mkdir date rm mktemp

if command -v curl 1> /dev/null 2>&1; then
	DLCMD='curl -so'
elif command -v wget 1> /dev/null 2>&1; then
	DLCMD='wget -qO'
else
	Err 1 "Neither 'wget' nor 'curl' are available."
fi

if ! [ ${UID:-`id -u`} -eq 0 ]; then
	Err 1 'Root permissions required for system-wide changes.'
fi

TemRemFile=`mktemp`
HashFile=`mktemp`

ChkMD5(){ # Usage: ChkMD5 [FILE]
	# Skip, but stay zero to continue with the file.
	[ -z "$MD5File" ] && return 0

	if [ "$DoRemote" = 'true' ]; then
		MD5URL="$RawDomain/$GHUser/$Repo/$Branch/$MD5File"
		$DLCMD "$HashFile" "$MD5URL" 1> /dev/null 2>&1

		# Use the temporary file taken remotely.
		ReadHashFile=$HashFile
	else
		# If it's local, change to whichever directory the hash file is in. This is
		# required, to avoid the issue of the sum file using relative paths not
		# matching up to where the user currently is, despite the file existing.
		if ! cd "${MD5File%/*}"; then
			Logger error "Failed to 'cd' into '${MD5File%/*}'"
			Err 1 'Failed to change to hash directory.'
		fi

		# Assume the user provided a local hash file.
		ReadHashFile=${MD5File##*/}
	fi

	if ! [ -f "$1" ]; then
		Logger error "File '$1' not found or has no read access"
		Err 1 "File '$1' missing or unreadable."
	fi

	if [ -f "$ReadHashFile" ]; then
		while read Hash File; do
			if [ "$File" = "$1" ]; then
				GetHash=`CutStr ' ' 1 "$(md5sum "$1" 2> /dev/null)"`

				# Gets around weird trailing space.
				GetHash=${GetHash% }

				Logger info "New MD5 for '$1' is '$GetHash'"
				Logger info "Old MD5 for '$1' is '$Hash'"

				if ! [ "$Hash" = "$GetHash" ]; then
					Logger error "MD5 mis-match for file '$1'"
					Err 0 "MD5 for '$1' mis-match!"
					return 1
				fi

				FoundHash='true'
				break
			fi
		done < "$ReadHashFile"

		if ! [ "$FoundHash" = 'true' ]; then
			Logger error "Old MD5 hash missing for '$1'"
			Err 1 "File '$1' missing from provided hash file."
		fi
	else
		Logger error "Hash file '$ReadHashFile' not found"
		Err 1 "Hash file '$ReadHashFile' missing."
	fi

	unset MD5URL Hash File GetHash ReadHashFile FoundHash
}

Logger(){ # Usage: Logger TYPE MESSAGE
	LogTypeChk "$1" $LogTypes

	if [ -d "${EventLog%/*}" ]; then
		mkdir -p "${EventLog%/*}" 1> /dev/null 2>&1
	fi

	[ -f "$EventLog" ] || 1> "$EventLog"

	# Ensure it's still set safely.
	chown 0:0 "$EventLog" 1> /dev/null 2>&1
	chmod 600 "$EventLog" 1> /dev/null 2>&1

	Secs=`date '+%s'` # <-- Seconds since Epoch.
	[ -z "$Secs" ] && Err 1 "Logging failure via 'Logger()' detected."
	printf "%d:%s:%s\n" $Secs "$1" "$2" >> "$EventLog"

	unset TypeCount CurType Secs
}

LogErrInf(){ # Usage: LogErrInf [$KEY] [KEY] [FILE]
	if [ -z "$1" ]; then
		Logger error "$2 is null for '$3'"
		Err 1 "Value for '$2' not set."
	else
		Logger info "$2 is '$1' for '$3'"
	fi
}

LogTypeChk(){ # Usage: LogTypeChk [TYPE] [VALID_TYPES]
	CheckType=$1
	shift

	TypeCount=0
	for CurType in "$@"; do
		if [ "$CheckType" = "$CurType" ]; then
			TypeCount=$((TypeCount + 1))
		fi
	done

	[ $TypeCount -eq 0 ] && Err 1 "Invalid 'Logger()' type."

	unset CheckType TypeCount CurType
}

SigHandler(){
	Signal=$?

	if [ $Signal -eq 0 ]; then
		Logger info "Signal '$Signal' detected by 'SigHandler()'"
	else
		Logger warning "Signal '$Signal'  detected by 'SigHandler()'"
	fi

	if ! rm -f "$HashFile" "$TemRemFile" 1> /dev/null 2>&1; then
		Logger error "File '$HashFile' and/or '$TemRemFile' failed removal"
		printf "ERROR: One or more temporary files failed removal.\n" 1>&2
	else
		Logger info "Removed '$HashFile' and '$TemRemFile'"
	fi

	exit $Signal
}

trap SigHandler INT EXIT STOP QUIT

if [ -n "$LogView" ]; then
	Logger info "Attempting to view Cito log file"
	LogTypeChk "$LogView" $LogTypes

	if [ -f "$EventLog" ]; then
		Logger info "Viewing Cito log file"
		while IFS=':' read Epoch Type MSG; do
			ShowLog(){
				FTime=`date '+%F %X' --date="@$Epoch"`
				printf "%s: %s\n" "$FTime" "$MSG"
			}

			if [ "$LogView" = "all" ]; then
				ShowLog
			elif [ "$Type" = "$LogView" ]; then
				ShowLog
			fi
		done < "$EventLog"

		exit 0
	else
		Err 1 "File '$EventLog' not found."
	fi
fi

ReadFile(){
	if ! [ -f "$1" ]; then
		Err 0 "File '$1' not found."
		return 1
	fi

	# In this case, no need to read the file.
	[ "$Regardless" = 'true' ] && return 0

	while read F1 _; do
		if [ "$F1" = "#$Progrm" ]; then
			Logger info "File '$1' is supported by Cito"

			HasCito='true'

			for CurField in $_; do
				case $CurField in
					M:*)
						Mode=${CurField#*:}
						LogErrInf "$Mode" Mode "$1" ;;
					O:*)
						Owner=${CurField#*:}
						LogErrInf "$Owner" Owner "$1" ;;
					G:*)
						Group=${CurField#*:}
						LogErrInf "$Group" Group "$1" ;;
					T:*)
						Target=${CurField#*:}
						LogErrInf "$Target" Target "$1"
						[ -f "$Target" ] && IsFound='true' ;;
					*)
						Logger error "Field '$CurField' in '$1' is invalid"
						Err 0 "File '$1' contains an invalid field."
						break 2
				esac
			done

			break 1
		fi
	done < "$1"

	if [ "$IsFound" = 'true' ]; then
		AskOverwrite "$Target"
	fi
}

DoChown(){ # Usage: DoChown [OWNER:GROUP] [TARGET]
	[ "$1" = ':' ] && return 1
	if chown "$1" "$2" 1> /dev/null 2>&1; then
		Logger info "Successfully changed '$2' to '$1'"
	else
		Logger error "Failed to change '$2' to '$1'"
	fi
}

DoChmod(){ # Usage: DoChmod [MODE] [TARGET]
	[ "$1" = '' ] && return 1
	if chmod "$1" "$2" 1> /dev/null 2>&1; then
		Logger info "Successfully changed '$2' to '$1'"
	else
		Logger error "Failed to change '$2' to '$1'"
	fi
}

AskOverwrite(){
	Logger warning "File '$1' in '${1%/*}' already exists"

	[ "$Clobber" = 'true' ] || printf "File '%s' found.\n" "$1" 1>&2
	if [ "$Clobber" = 'true' ] || YNInput 'Overwrite the file?'; then
		Logger info "Overwriting pre-existing file '$1'"

		if rm -f "$1" 1> /dev/null 2>&1; then
			Logger info "Overwrote pre-existing file '$1'"
		else
			Logger error "Failed to overwrite pre-existing file '$1'"
			Err 1 "Unable to overwrite '$1' file."
		fi
	else
		Logger info "NOT overwriting pre-existing file '$1'"
	fi
}

DoRegardless(){
	if [ "$Regardless" = 'true' ]; then
		UserSpec="M:$UserMode O:$UserOwner G:$UserGroup T:$UserTarget"
		Logger info "User specified '$UserSpec'"

		Mode=$UserMode
		Owner=$UserOwner
		Group=$UserGroup
		Target=$UserTarget

		if [ -f "$Target" ]; then
			AskOverwrite "$Target"
		fi

		unset UserSpec
	fi
}

MainRemote(){
	URL="$RawDomain/$GHUser/$Repo/$Branch/${1#/}"
	Logger info "URL for '$1' is '${URL#https://*/}'"

	if $DLCMD "$TemRemFile" "$URL" 1> /dev/null 2>&1; then
		if ChkMD5 "$1"; then
			ReadFile "$TemRemFile" || exit 0

			if [ "$HasCito" = 'true' -o "$Regardless" = 'true' ]; then
				DoRegardless

				DoChown "$Owner:$Group" "$TemRemFile"
				DoChmod "$Mode" "$TemRemFile"

				if mv "$TemRemFile" "$Target" 1> /dev/null 2>&1; then
					Logger info "File '$TemRemFile' moved to '$Target'"
				else
					Logger error "File '$CurFile' failed to move to '$Target'"
				fi
			else
				Logger error "File '$CurFile' is NOT supported by Cito"
				Err 0 "File '$1' is not supported by Cito."
				continue
			fi
		fi
	else
		if [ -z "$1" ]; then
			Logger error "No remote file specified"
			Err 1 "No remote file specified -- see: $Progrm -h"
		fi

		Logger error "File '$1' failed to download with '${DLCMD%% *}'"
		Err 0 "Remote file '$1' failed to download."
	fi
}

if [ "$DoRemote" = 'true' ]; then
	Logger info "Beginning remote operation"

	for CurRemFile in "$@"; do
		MainRemote "$CurRemFile"
	done

	exit 0
else
	# Pretty sure this is handled elsewhere, but just in-case, catch it.
	[ $# -eq 0 ] && Err 1 'No local files were provided.'

	Logger info "Beginning local operation"

	for CurFile in "$@"; do
		Logger info "Processing '$CurFile'"

		if ChkMD5 "$CurFile"; then
			ReadFile "$CurFile" || continue

			if [ "$HasCito" = 'true' -o "$Regardless" = 'true' ]; then
				DoRegardless

				if mv "$CurFile" "$Target" 1> /dev/null 2>&1; then
					Logger info "File '$CurFile' moved to '$Target'"
					DoChown "$Owner:$Group" "$Target"
					DoChmod "$Mode" "$Target"
				else
					Logger error "File '$CurFile' failed to move to '$Target'"
					Err 0 "Local file '$CurFile' failed to install."
				fi
			else
				Logger error "File '$CurFile' is NOT supported by Cito"
				Err 0 "File '$CurFile' is not supported by Cito."
				continue
			fi
		fi

		Logger info "Finished processing '$CurFile'"

		unset HasCito Target Group Owner Mode CurField
	done

	exit 0
fi

# If it happens to make it this far.
Logger info "Appears to be nothing to do"
printf "Nothing to do -- quitting.\n"
