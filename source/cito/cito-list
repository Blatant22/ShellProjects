#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/cito-list
#------------------------------------------------------------------------------
# Project Name      - Extra/source/cito/cito-list
# Started On        - Wed 13 Jan 16:41:51 GMT 2021
# Last Change       - Tue 26 Jan 13:47:31 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Helper tool for Cito, which lists out all of the files the log shows were
# handled by Cito, and highlights those which currently stll exist on the
# system.
#------------------------------------------------------------------------------

CurVer='2021-01-26'
Progrm=${0##*/}

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\rUsage: $Progrm [OPTS]

		\r  -h, --help               - Display this help information.
		\r  -v, --version            - Output the version datestamp.
		\r  -C, --no-color           - Disable ANSI color escape sequences.

		\r  Files listed are ordered from old-to-new, and do not imply that
		\r  they were actually installed. Files handled by both local and
		\r  remote operations are listed. Repeats are squeezed.

		\r  Cito executions with logging disabled will NOT show up here.

		\r  If color is disabled, begin lines with '+' or '-' to denote
		\r  whether the file exists or does not, respectively. With color in
		\r  in use, files no longer found are highlighted in red.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -eq 1 ] && exit 1
}

C_Red='\e[0;31m'
C_Reset='\e[0m'

Logfile='/var/log/cito-events.log'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--no-color|-C)
			NoColor='True' ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

if ! [ -f "$Logfile" ]; then
	Err 1 "Log file not found."
elif ! [ -r "$Logfile" ]; then
	Err 1 "Log file unreadable."
fi

while read Line; do
	case $Line in
		*:Target\ is\ \'*\')
			Target=${Line#*:*:*\'}
			Target=${Target%\' for *}

			# Squeeze repeated targets.
			[ "$OldTarget" = "$Target" ] && continue

			if [ -f "$Target" ]; then
				if [ "$NoColor" = 'True' ]; then
					printf '+ %s\n' "$Target"
				else
					printf '%s\n' "$Target"
				fi
			else
				if [ "$NoColor" = 'True' ]; then
					printf -- "- %s\n" "$Target"
				else
					printf -- "$C_Red%s$C_Reset\n" "$Target"
				fi
			fi

			OldTarget=$Target
	esac
done < "$Logfile"
