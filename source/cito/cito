#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/cito
#------------------------------------------------------------------------------
# Project Name      - Extra/source/cito/cito
# Started On        - Thu  5 Dec 20:40:35 GMT 2019
# Last Change       - Sun  1 May 00:09:47 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# The word 'cito' (/ˈki.toː/) is a Latin adverb, to mean 'swift'.
#
# Features:
#
#TODO: Optimize by combining the two $ReadHashFile while loops in ChkMD5().
#TODO: Find a way to get the MD5 format check in pure shell.
#TODO: Add an Insit-style backup feature in-case of a botched install/upgrade.
#TODO: Somehow catch condition under which a file already exists.
#TODO: Add uninstallation feature.
#
# Bugs:
#
#TODO: Non-existent remote files don't work. (last does; all prior fail)
#
# Dependencies:
#
#   coreutils (>= 8.25-2)
#   curl (>= 7.47.0-1) | wget (>= 1.17.1-1)
#------------------------------------------------------------------------------

CurVer='2022-05-01'
Progrm='cito'

Usage() {
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		Usage: $Progrm [OPTS] [FILE_1 [FILE_2] ...]

		\r  -h, --help               - Display this help information.
		\r  -v, --version            - Output the version datestamp.
		\r  -G, --group GID          - Where GROUP is, IE: '0'.
		\r  -H, --hash FILE          - Use FILE to cross-check hashes.
		\r  -M, --mode MODE          - Where MODE is, IE: '755'.
		\r  -O, --owner UID          - Where OWNER is, IE: '0'.
		\r  -T, --target PATH        - Where PATH is, IE: '/usr/bin/1337'.
		\r  -r, --remote INFO        - Specify a remote file; see REMOTE.
	EOF
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

[ $# -eq 0 ] && Err 1 "Argument(s) required -- see: $Progrm -h"

NullArg() { # Usage: NullArg [VARIABLE] [OPTION]
	[ -z "$1" ] && Err 1 "Option '$2' requires an argument -- see: $Progrm -h"
}

RawDomain='https://raw.githubusercontent.com'

while [ -n "$1" ]; do
	case $1 in
		--)
			shift; break ;;
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--remote|-r)
			DoRemote='true'

			# These variables are also used later.
			GHUser=$2
			Repo=$3
			Branch=$4

			RemCount=0
			for Iter in "x$GHUser" "x$Repo" "x$Branch"; do
				RemCount=$((RemCount + 1))

				case $RemCount in
					1) RemName='USER' ;;
					2) RemName='REPO' ;;
					3) RemName='BRANCH' ;;
				esac

				if [ "$Iter" = 'x' ]; then
					Err 1 "Missing '$RemName' for '$1' option."
				fi

				shift
			done

			unset Iter RemCount RemName

			shift

			# Stop processing regular arguments and have all following
			# arguments be processed later (in a for loop for the remote
			# section) for getting multiple remote files in one command
			# execution.
			break ;;
		--hash|-H)
			MD5File=$2
			NullArg "$MD5File" "$1"

			shift ;;
		--mode|-M)
			UserMode=$2
			Regardless='true'
			NullArg "$UserMode" "$1"

			shift ;;
		--owner|-O)
			UserOwner=$2
			Regardless='true'
			NullArg "$UserOwner" "$1"

			shift ;;
		--group|-G)
			UserGroup=$2
			Regardless='true'
			NullArg "$UserGroup" "$1"

			shift ;;
		--target|-T)
			UserTarget=$2
			Regardless='true'
			NullArg "$UserTarget" "$1"

			shift ;;
		--list-files|-f)
			ListFiles='True' ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [ "$DoRemote" = 'true' -a $# -eq 0 ]; then
	Err 1 "Missing one or more 'FILE' for '--remote|-r' option."
fi

unset -f NullArg

DepCount=0
for Dep in install mv chmod chown md5sum mkdir rm mktemp; do
	if ! command -v "$Dep" 1> /dev/null 2>&1; then
		Err 0 "Dependency '$Dep' not met."
		DepCount=$(( DepCount + 1 ))
	fi
done

[ $DepCount -gt 0 ] && exit 1

if command -v curl 1> /dev/null 2>&1; then
	DLCMD='curl -so'
elif command -v wget 1> /dev/null 2>&1; then
	DLCMD='wget -qO'
else
	Err 1 "Neither 'wget' nor 'curl' are available."
fi

TemRemFile=`mktemp`
HashFile=`mktemp`

#--------------------------------------------------Primary Functions & Trapping

CutStr() {
	IFS=$1; shift
	Fields=$1; shift

	set -- $1

	for CutField in $Fields; do
		Count=0
		for CurField in "$@"; do
			Count=$((Count + 1))
			if [ $Count -eq $CutField ]; then
				printf '%s' "$CurField"
				break 1
			fi
		done
	done
}

ChkMD5() { # Usage: ChkMD5 [FILE]
	# Skip, but stay zero to continue with the file.
	[ -z "$MD5File" ] && return 0

	if [ "$DoRemote" = 'true' ]; then
		MD5URL="$RawDomain/$GHUser/$Repo/$Branch/$MD5File"
		$DLCMD "$HashFile" "$MD5URL" 1> /dev/null

		# Use the temporary file taken remotely.
		ReadHashFile=$HashFile
	else
		# If it's local, change to whichever directory the hash file is in.
		# This is required, to avoid the issue of the sum file using relative
		# paths not matching up to where the user currently is, despite the
		# file existing.
		cd "${MD5File%/*}" || Err 1 'Failed to change to hash directory.'

		# Assume the user provided a local hash file.
		ReadHashFile=${MD5File##*/}
	fi

	[ -f "$1" ] || Err 1 "File '$1' missing or unreadable."

	if [ -f "$ReadHashFile" ]; then
		# A string of 32 characters consisting of just 0-9, A-Z, and/or a-z.
		while [ ${Count:-0} -le 31 ]; do
			Match="$Match[0-9A-Za-z]"
			Count=$((Count + 1))
		done

		Bad=0
		Good=0
		while read Line; do
			case $Line in
				$Match\ [\ \*]*)
					Good=$((Good + 1)) ;;
				*)
					Bad=$((Bad + 1)) ;;
			esac
		done < "$ReadHashFile"

		if [ $Good -gt 0 ]; then
			printf 'Found %d valid file(s) in checksum file.\n' $Good
		else
			Err 1 'No valid files listed in checksum file.'
		fi

		unset Match Bad Good

		while read Hash File; do
			if [ "$File" = "$1" ]; then
				GetHash=`CutStr ' ' 1 "$(md5sum "$1" 2> /dev/null)"`

				# Gets around weird trailing space.
				GetHash=${GetHash% }

				if ! [ "$Hash" = "$GetHash" ]; then
					Err 0 "MD5 for '$1' mis-match!"
					return 1
				fi

				FoundHash='true'
				break
			fi
		done < "$ReadHashFile"

		if ! [ "$FoundHash" = 'true' ]; then
			Err 1 "File '$1' missing from provided hash file."
		fi
	else
		Err 1 "Hash file '$ReadHashFile' missing."
	fi

	unset MD5URL Hash File GetHash ReadHashFile FoundHash Count
}

SigHandler() {
	Signal=$?

	rm -f "$HashFile" "$TemRemFile"

	exit $Signal
}

trap SigHandler INT EXIT QUIT ABRT TERM

DirChk() {
	[ -d "${1%/*}" ] || Err 1 "Directory '${1%/*}' not found."
}

ReadFile() {
	if [ -z "$1" ]; then
		# This is probably something the user won't see.
		Err 0 "Cito: ReadFile(): Empty '\$1' variable."
		return 1
	elif ! [ -f "$1" ]; then
		Err 0 "File '$1' not found."
		return 1
	fi

	# In this case, no need to read the Cito line.
	[ "$Regardless" = 'true' ] && return 0

	while read F1 _; do
		if [ "$F1" = "#$Progrm" ]; then
			HasCito='true'

			for CurField in $_; do
				case $CurField in
					M:*)
						Mode=${CurField#*:} ;;
					O:*)
						Owner=${CurField#*:} ;;
					G:*)
						Group=${CurField#*:} ;;
					T:*)
						Target=${CurField#*:} ;;
					*)
						Err 0 "File '$1' contains an invalid field."
						break 2 ;;
				esac
			done

			break 1
		fi
	done < "$1"

	if [ "$HasCito" = 'true' ]; then
		# Check for `($HOME|~)(|/)*` then apply if found.
		case $Target in
			\$HOME*|\$HOME/*)
				Target="$HOME${Target#\$HOME}" ;;
			\~*|\~/*)
				Target="$HOME${Target#\~}" ;;
		esac

		DirChk "$Target"
	fi
}

DoRegardless() {
	if [ "$Regardless" = 'true' ]; then
		UserSpec="M:$UserMode O:$UserOwner G:$UserGroup T:$UserTarget"

		Mode=$UserMode
		Owner=$UserOwner
		Group=$UserGroup
		Target=$UserTarget

		DirChk "$UserTarget"

		unset UserSpec
	fi
}

#-------------------------------------------Begin Downloading and/or Installing

if [ "$DoRemote" = 'true' ]; then
	for CurRemFile in "$@"; do
		URL="$RawDomain/$GHUser/$Repo/$Branch/${CurRemFile#/}"
		if $DLCMD "$TemRemFile" "$URL" 1> /dev/null; then
			if ChkMD5 "$CurRemFile"; then
				ReadFile "$TemRemFile" || exit 0

				if [ "$HasCito" = 'true' -o "$Regardless" = 'true' ]; then
					DoRegardless

					install -D -o "$Owner" -g "$Group" "$TemRemFile"\
						"$Target" && rm "$TemRemFile"
				else
					Err 0 "File '$CurRemFile' is not supported by Cito."
					continue
				fi
			fi
		else
			[ -z "$CurRemFile" ] && Err 1 "No remote file specified -- see: $Progrm -h"

			Err 0 "Remote file '$CurRemFile' failed to download."
		fi

	done
else
	# Pretty sure this is handled elsewhere, but just in-case, catch it.
	[ $# -eq 0 ] && Err 1 'No local files were provided.'

	for CurFile in "$@"; do
		if ChkMD5 "$CurFile"; then
			ReadFile "$CurFile" || continue

			if [ "$HasCito" = 'true' -o "$Regardless" = 'true' ]; then
				DoRegardless

				install -D -o "$Owner" -g "$Group" "$CurFile" "$Target"
			else
				Err 0 "File '$CurFile' is not supported by Cito."
				continue
			fi
		fi

		unset HasCito Target Group Owner Mode CurField
	done
fi
