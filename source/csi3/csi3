#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/csi3
#------------------------------------------------------------------------------
# Project Name      - Extra/source/csi3/csi3
# Started On        - Sat 29 May 22:47:07 BST 2021
# Last Change       - Sat 27 May 19:06:41 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A simple pure-BASH solution for listing your key bindings to i3-wm/i3-gaps.
#
# Features:
#
#TODO: Cut off lines exceeding column length.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.0)
#------------------------------------------------------------------------------

CurVer='2023-05-15'
Progrm='csi3'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --nocolor            - Disable ANSI color escape sequences.
		  -E, --noexecs            - Omit 'exec' & 'exec_always' bindings.
		  -e, --execs              - Show only 'exec' & 'exec_always' bindings.
		  -f, --file FILE          - Override default locations with FILE.
		  -k, --key KEY            - Display only bindings with KEY.

		A key binding's action being prepended with an exclamation mark ('!')
		indicates it's a shell command, and not a native i3-wm command.

		If a \$mod (case-insensitive) variable is set for the primary modifier
		key, in the i3 configuration file, it should be correctly parsed. Other
		variables will not be parsed.

		Modes are not handled.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Red='\e[91m'
Grey='\e[37m'
Reset='\e[0m'

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--nocolor|-C)
			Red=
			Grey=
			Reset= ;;
		--noexecs|-E)
			NoExecsFlag=$1
			NoExecs='True' ;;
		--execs|-e)
			ExecsFlag=$1
			Execs='True' ;;
		--key|-k)
			KeyArg=$1; shift

			case $1 in
				+)
					Err 1 "Invalid key -- did you mean 'Plus'?" ;;
				*+*)
					Err 1 "Option '$KeyArg' accepts only a single key." ;;
				'')
					Err 1 "Option '$KeyArg' requires an argument." ;;
				*)
					Match=$1 ;;
			esac ;;
		--file|-f)
			FileArg=$1; shift

			if [[ -z $1 ]]; then
				Err 1 "Option '$FileArg' requires an argument."
			else
				Places=("$1")
			fi ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ $Execs == True && $NoExecs == True ]]; then
	Err 1 "OPTs '$NoExecsFlag' & '$ExecsFlag' are incompatible."
fi

#----------------------------------------Confirm Suitable File Found & Readable

if [[ -z $Places ]]; then
	Places=(
		"$HOME/.config/i3/config"
		"$HOME/.i3/config"
	)
fi

for Place in "${Places[@]}"; {
	if [[ -f $Place ]]; then
		if [[ -r $Place ]]; then
			File=$Place
			break
		else
			Err 1 "File '$Place' unreadable."
		fi
	fi
}

[[ -z $File ]] && Err 1 'Unable to find a suitable configuration file.'

#-------------------------------------------------------------------Gather Data

# Capitalize the first character of each word. Intended to be used with
# separate arguments -- ideally a quoted array. This will create a trailing '+'
# which should be removed with Parameter Expansion before being used.
Capitalize() { printf '%s+' "${@^}"; }

declare -A Bindings=();

Count=0
KeysLenMax=0
while read Line; do
	CurrentKey=

	case $Line in
		'set $'[Mm][Oo][Dd]\ *)
			ModVar=${Line#set }
			ModVar=${ModVar% *}
			ModKey=${Line#set \$* } ;;
		bindsym\ *)
			read _ Keys Action <<< "$Line"

			# Account for something like `$mod` being used. (Issue #16)
			if [[ -n $ModKey ]]; then
				NewKeys=
				for Key in ${Keys//+/ }; {
					if [[ $Key == $ModVar ]]; then
						NewKeys+="$ModKey+"
					else
						NewKeys+="$Key+"
					fi
				}

				Keys=$NewKeys
			fi

			# Capitalize the first character of each key.
			Keys=`Capitalize ${Keys//+/ }`
			Keys=${Keys%+}

			# Allows for filtering by a specific key. This is done here to
			# properly maintain table size. Keys provided by user should be in
			# the form of 'Mod4' instead of 'mod4' or 'F2' instead of 'f2'.
			if [[ -n $Match ]]; then
				IFS='+' read -a KeyList <<< "$Keys"

				Show=
				for Key in "${KeyList[@]}"; {
					if [[ $Key == $Match ]]; then
						Show='True'
					fi
				}

				[[ $Show == True ]] || continue
			fi

			if [[ $NoExecs == True ]]; then
				case $Action in
					exec\ *|exec_always\ *)
						continue ;;
				esac
			elif [[ $Execs == True ]]; then
				case $Action in
					exec\ *|exec_always\ *)
						;;
					*)
						continue ;;
				esac
			fi

			Action=${Action/exec --no-startup-id /!}
			Action=${Action/exec_always --no-startup-id /!}
			Action=${Action/exec_always /!}
			Action=${Action/exec /!}

			KeysLen=${#Keys}
			(( KeysLen > KeysLenMax )) && KeysLenMax=$KeysLen

			(( Count++ ))

			# Using the `$Count` variable in order to maintain the original
			# order, otherwise BASH will butcher the order, unfortunately.
			Bindings["${Count}_$Keys"]=$Action ;;
	esac
done < "$File"

#----------------Display Results, Using `$Count` to Maintain the Original Order

Count=1
until (( Count > ${#Bindings[@]} )); do
	for Binding in "${!Bindings[@]}"; {
		if (( Count == "${Binding%%_*}" )); then
			printf '%*s ' $KeysLenMax "${Binding#*_}"
			if [[ ${Bindings[$Binding]} == \!* ]]; then
				printf "$Red!$Grey%s$Reset\n" "${Bindings[$Binding]#!}"
			else
				printf "$Grey%s$Reset\n" "${Bindings[$Binding]}"
			fi

			(( Count++ ))

			break
		fi
	}
done
