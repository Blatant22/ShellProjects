#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/csi3
#------------------------------------------------------------------------------
# Project Name      - Extra/source/csi3/csi3
# Started On        - Sat 29 May 22:47:07 BST 2021
# Last Change       - Wed 31 May 14:08:33 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A simple pure-BASH solution for listing your key bindings to i3-wm/i3-gaps.
#
# Features:
#
#TODO: Cut off lines exceeding column length.
#TODO: Look into allowing multiple files to be processed, via concatenation.
#
#      One downside with this is that the line number feature wouldn't really
#      work. Still, I'm fairly sure this feature is doable.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.0)
#------------------------------------------------------------------------------

CurVer='2023-05-31'
Progrm='csi3'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --nocolor            - Disable ANSI color escape sequences.
		  -E, --noexecs            - Omit 'exec' & 'exec_always' bindings.
		  -V, --ignore-vars        - Do not attempt to expand i3WM variables.
		  -e, --execs              - Show only 'exec' & 'exec_always' bindings.
		  -f, --file FILE          - Override default locations with FILE.
		  -k, --key KEY            - Display only bindings with KEY.
		  -n, --number             - Include line number of each binding.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

ExpandVars='True'
Green='\e[32m'
Grey='\e[37m'
Red='\e[91m'
Reset='\e[0m'
Number=

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--nocolor|-C)
			Green=
			Grey=
			Red=
			Reset= ;;
		--noexecs|-E)
			NoExecsFlag=$1
			NoExecs='True' ;;
		--ignore-vars|-V)
			ExpandVars= ;;
		--execs|-e)
			ExecsFlag=$1
			Execs='True' ;;
		--key|-k)
			KeyArg=$1; shift

			case $1 in
				+)
					Err 1 "Invalid key -- did you mean 'Plus'?" ;;
				*+*)
					Err 1 "Option '$KeyArg' accepts only a single key." ;;
				'')
					Err 1 "Option '$KeyArg' requires an argument." ;;
				*)
					Match=$1 ;;
			esac ;;
		--file|-f)
			FileArg=$1; shift

			if [[ -z $1 ]]; then
				Err 1 "Option '$FileArg' requires an argument."
			else
				Places=("$1")
			fi ;;
		--number|-n)
			Number='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

if [[ $Execs == True && $NoExecs == True ]]; then
	Err 1 "OPTs '$NoExecsFlag' & '$ExecsFlag' are incompatible."
fi

#----------------------------------------Confirm Suitable File Found & Readable

if [[ -z $Places ]]; then
	Places=(
		"$HOME/.config/i3/config"
		"$HOME/.i3/config"
	)
fi

for Place in "${Places[@]}"; {
	if [[ -f $Place ]]; then
		if [[ -r $Place ]]; then
			File=$Place
			break
		else
			Err 1 "File '$Place' unreadable."
		fi
	fi
}

[[ -z $File ]] && Err 1 'Unable to find a suitable configuration file.'

#-----------------------Pre-Process to Gather List of Variable Names and Values

readarray -t < "$File"

if [[ $ExpandVars == True ]]; then
	declare -A Names=()

	# Gather set lines.
	Sets=()
	for Line in "${MAPFILE[@]}"; {
		case $Line in
			[[:space:]]set*|set*)
				Sets+=("$Line") ;;
		esac
	}

	# Parse set lines.
	for Set in "${Sets[@]}"; {
		Name=
		Buffer=
		SigilFound=
		Len=${#Set}
		for (( Index = 0; Index < Len; Index++ )); {
			Char=${Set:Index:1}
			if [[ $SigilFound == True ]]; then
				if [[ $Char != [[:space:]] ]]; then
					Buffer+=$Char
				else
					if [[ -z $Name ]]; then
						Name=$Buffer
						Buffer=
					fi

					case $Char in
						[[:space:]]|'"'|"'")
							;; # <-- No leading spaces or quotes.
						*)
							Buffer+=$Char ;;
					esac
				fi
			elif [[ $Char == '$' ]]; then
				SigilFound='True'
			fi
		}

		# Process buffer backwards to strip trailing spaces and a possible
		# quote. We only need to process the buffer until we have the part to
		# strip.
		LastRev=
		Len=${#Buffer}
		for (( Index = Len - 1; Index >= 0; Index-- )); {
			Char=${Buffer:Index:1}
			case $Char in
				[[:space:]]|"'"|'"')
					LastRev+=$Char ;;
				*)
					break ;;
			esac
		}

		# Reverse `$LastRev` to make it usable as `$Last` below.
		Last=
		Len=${#LastRev}
		for (( Index = Len - 1; Index >= 0; Index-- )); {
			Last+=${LastRev:Index:1}
		}

		Names["$Name"]=${Buffer%$Last}
	}
fi

#-------------------------------------------------------------------Gather Data

# Capitalize the first character of each word. Intended to be used with
# separate arguments -- ideally a quoted array. This will create a trailing '+'
# which should be removed with Parameter Expansion before being used.
Capitalize() { printf '%s+' "${@^}"; }

declare -A Bindings=();

Count=0
LineNr=0
KeysLenMax=0
for Line in "${MAPFILE[@]}"; {
	(( LineNr++ ))

	# Naive approach, but it'll do, at least for now. The reason this is naive
	# is because the strings might be found somewhere that i3WM isn't supposed
	# to look for variables, such as part of shell code which just happens to
	# be using the same names.
	#
	# It's for that reason that this feature will include flags which turn it
	# off, in-case a user has such issues. Luckily, this caveat is easily
	# addressed by simply using different variable names.
	if [[ $ExpandVars == True ]]; then
		for Name in "${!Names[@]}"; {
			Line=${Line//\$$Name/${Names["$Name"]}}
			Line=${Line//\$\{$Name\}/${Names["$Name"]}}
		}
	fi

	CurrentKey=
	[[ $Line == bindsym\ * ]] || continue

	read _ Keys Action <<< "$Line"

	# Account for something like `$mod` being used. (Issue #16)
	if [[ -n $ModKey ]]; then
		NewKeys=
		for Key in ${Keys//+/ }; {
			if [[ $Key == $ModVar ]]; then
				NewKeys+="$ModKey+"
			else
				NewKeys+="$Key+"
			fi
		}

		Keys=$NewKeys
	fi

	# Capitalize the first character of each key.
	Keys=`Capitalize ${Keys//+/ }`
	Keys=${Keys%+}

	# Allows for filtering by a specific key. This is done here to properly
	# maintain table size. Keys provided by user should be in the form of
	# 'Mod4' instead of 'mod4' or 'F2' instead of 'f2'.
	if [[ -n $Match ]]; then
		IFS='+' read -a KeyList <<< "$Keys"

		Show=
		for Key in "${KeyList[@]}"; {
			if [[ $Key == $Match ]]; then
				Show='True'
			fi
		}

		[[ $Show == True ]] || continue
	fi

	if [[ $NoExecs == True ]]; then
		case $Action in
			exec\ *|exec_always\ *)
				continue ;;
		esac
	elif [[ $Execs == True ]]; then
		case $Action in
			exec\ *|exec_always\ *)
				;;
			*)
				continue ;;
		esac
	fi

	Action=${Action/exec --no-startup-id /!}
	Action=${Action/exec_always --no-startup-id /!}
	Action=${Action/exec_always /!}
	Action=${Action/exec /!}

	KeysLen=${#Keys}
	(( KeysLen > KeysLenMax )) && KeysLenMax=$KeysLen

	(( Count++ ))

	# Using the `$Count` variable in order to maintain the original
	# order, otherwise BASH will butcher the order, unfortunately.
	Bindings["$LineNr|${Count}_$Keys"]=$Action
}

# Grab from last iteration of above loop.
MaxLineNrLen=${#LineNr}

#----------------Display Results, Using `$Count` to Maintain the Original Order

CurCount=1
until (( CurCount > ${#Bindings[@]} )); do
	for Binding in "${!Bindings[@]}"; {
		LineNrCount=${Binding%%_*}
		LineNr=${LineNrCount%|*}
		Count=${LineNrCount#*|}
		if (( Count == CurCount )); then
			if [[ $Number == True ]]; then
				printf "%*s $Green%*d$Reset " $KeysLenMax "${Binding#*_}"\
					$MaxLineNrLen $LineNr
			else
				printf '%*s ' $KeysLenMax "${Binding#*_}"
			fi

			if [[ ${Bindings[$Binding]} == \!* ]]; then
				printf "$Red!$Grey%s$Reset\n" "${Bindings[$Binding]#!}"
			else
				printf "$Grey%s$Reset\n" "${Bindings[$Binding]}"
			fi

			(( CurCount++ ))

			break
		fi
	}
done
