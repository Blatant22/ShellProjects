#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/pkgstats
#------------------------------------------------------------------------------
# Project Name      - Extra/source/pkgstats
# Started On        - Sat 17 Jun 09:08:12 BST 2023
# Last Change       - Mon 19 Jun 18:15:43 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Displays and stores the size (in bytes) and name of every package available
# in the repositories, then sums them all up. Below are the related information
# for my system, and what I determined from the results I got from this.
#
# Note that this takes a LONG time. The below results too me all day, from
# about 8am to 2am the next morning. It's possible to parallelise this
# approach, if needed. I didn't want to hammer the servers, though. One way to
# handle this script, would be to fetch the results in parts, by having
# multiple iterations fetching each part simultaneously. The `download`
# operation of apt-get(8) does permit this.
#
#   - Test performed on: 2023-06-18
#   - Presumably using AMD64 packages
#   - Ubuntu 18.04.6 repositories
#   - Using 'main', 'restricted', 'universe', 'multiverse', via the 'bionic', -
#     'bionic-updates', and 'bionic-security' repositories
#   - Using no PPAs or similar; only standard repositories
#   - Using Ubuntu's parter repository
#   - 82795 packages available
#
# My results:
#
#   - Total package size is 253G
#   - Average package size is 3.2M
#   - 0.0072% of packages are over 500M
#   - 73.8% of packages are â‰¤ 10M
#
#   Top 10 package sizes:
#
#      1 1005M flightgear-data-base
#      2  823M redeclipse-data
#      3  611M 0ad-data
#      4  540M sauerbraten
#      5  537M mrpt-doc
#      6  529M firefox-dbg
#      7  499M thunderbird-dbg
#      8  491M supertuxkart-data
#      9  477M alien-arena-data
#     10  435M nexuiz-textures
#
#   The smallest packages are 'libc6-armhf-armel-cross' and
#   'libc6-armel-armhf-cross', at just 776 bytes each.
#
# NOTE: If you run this, please be mindful of the servers. While sending a
#       spider to grab the header is surely harmless, it's still constant
#       connections, so please don't run this excessively!
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   apt (>= 1.6.17)
#   bash (>= 4.0)
#   gawk (>= 4.1.4)
#   wget (>= 1.19.4)
#------------------------------------------------------------------------------

CurVer='2023-06-19'
Progrm='pkgstats'
ProgrmFancy='PKGStats'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] FILE

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -s, --summary-only       - Just display summary of existing FILE.

		  The use of '--' to ignore proceeding options is supported.
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

SummaryOnly='False'

Skip=
Args=()
while [[ -n $1 ]]; do
	case $1 in
		--)
			Args+=(--)
			Skip='True' ;;
		-[^-]*)
			if [[ $Skip == True ]]; then
				Args+=("$1")
			else
				Str=${1#-}
				Len=${#Str}
				for (( Index = 0; Index < Len; Index++ )); {
					Args+=(-"${Str:Index:1}")
				}
			fi ;;
		*)
			Args+=("$1") ;;
	esac
	shift
done

set -- "${Args[@]}"

while [[ -n $1 ]]; do
	case $1 in
		--)
			break ;;
		--help|-h)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--summary-only|-s)
			SummaryOnly='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

Args=$#
if (( Args < 1 )); then
	read -d '' <<-EOF
		Err: Argument required.

		     $ProgrmFancy requires a file into which to save the package
		     information, consisting of a 'BYTES PACKAGE' format.

		Nothing to do -- quitting.
	EOF

	printf '%s' "$REPLY"
	exit 1
elif (( Args > 1 )); then
	printf 'Err: Invalid argument(s).\n' 1>&2
	exit 1
elif [[ -d $1 ]]; then
	printf 'Err: Argument is a directory.\n' 1>&2
	exit 1
elif [[ -f $1 ]]; then
	FileExists='True'

	if [[ $SummaryOnly == True && ! -s $1 ]]; then
		Err 1 'Unable to summarize empty FILE.'
	fi
else
	if [[ $SummaryOnly == True ]]; then
		Err 1 'Unable to summarize non-existent FILE.'
	fi
fi

DepCount=0
for Dep in apt-get apt-cache wget awk; do
	if ! type -P "$Dep" &> /dev/null; then
		printf "Err: Dependency '$Dep' not met.\n" 1>&2
		(( DepCount++ ))
	fi
done

(( DepCount > 0 )) && exit 1

Interactive=
[[ -t 1 ]] && Interactive='True'

SigHandler() {
	printf '\n'
	exit 130
}

#----------------------------------------------------------Begin Gathering Data

if [[ $SummaryOnly != True ]]; then
	trap SigHandler INT

	if [[ $FileExists == True ]]; then
		readarray -t FileLines < "$1"

		declare -A FilePKGs=()
		for Line in "${FileLines[@]}"; {
			Bytes=${Line%% *}
			FilePKG=${Line#* }

			FilePKGs["$FilePKG"]=$Bytes
		}
	fi

	readarray -t Packages <<< "$(apt-cache pkgnames 2>&-)" || exit 1

	[[ $FileExists == True ]] || > "$1"

	Exists=
	Count=0
	Len=${#Packages[@]}
	for Package in "${Packages[@]}"; {
		if [[ $FileExists == True ]]; then
			Exists=
			if [[ -n ${FilePKGs["$Package"]} ]]; then
				Bytes=${FilePKGs["$Package"]}
				Exists='True'
			fi
		fi

		if [[ $Exists != True ]]; then
			while read Line; do
				if [[ ${Line:0:1} == "'" ]]; then
					Link=${Line%\'*}
					Link=${Link#\'}

					break
				fi
			done <<< "$(apt-get download --print-uris "$Package" 2>&-)"

			while read F1 Bytes _; do
				if [[ $F1 == Length: ]]; then
					printf '%s %s\n' "$Bytes" "$Package" >> "$1"

					break
				fi
			done <<< "$(wget --spider "$Link" 2>&1)"
		fi

		if [[ $Interactive == True ]]; then
			if [[ $Exists == True ]]; then
				printf '\r[???.????] \e[92m%s\e[0m is \e[93m%d\e[0m bytes\e[K'\
					"$Package" $Bytes

				continue
			fi

			awk -v C=$(( ++Count )) -v L=$Len -v PKG="$Package" -v B=$Bytes '
				BEGIN {
					Format = "\r[%08.4f%%] \033[92m%s\033[0m "
					Format = Format "is \033[93m%d\033[0m bytes\033[K"
					printf(Format, C / L * 100, PKG, B)
				}
			' 2>&-
		fi
	}
fi

#---------------------------------------------------------------Display Summary

Interactive=True
if [[ $Interactive == True ]]; then
	[[ $SummaryOnly == True ]] || printf '\rDone! Summary below.\e[K\n\n'

	awk '
		BEGIN {
			GE500M = 0
			LE500M = 0
		}

		# Underscores because AWK sucks at localizing variables.
		function Human(_Size) {
			_UnitStr = "b K M G T P E Z Y"
			_Len = split(_UnitStr, _Units)
			for (_Index = 1; _Index <= _Len; _Index++) {
				if (_Size < 1024) {
					_Result = sprintf("%.1f", _Size)
					_Len = length(_Result)

					if (substr(_Result, _Len - 1) == ".0") {
						_Result = substr(_Result, 0, _Len - 2)
					}

					if (_Units[_Index] == "b") {
						return(substr(_Result, 0, _Len - 1))
					} else {
						return(_Result _Units[_Index])
					}
				}

				_Size = _Size / 1024
			}
		}

		function Top10(__Sorted_Array, __Len) {
			for (__Index = 1; __Index <= __Len; __Index++) {
				split(__Sorted_Array[__Index], __Fields)

				printf("  - '"'%s'"' (%s)\n", __Fields[2], Human(__Fields[1]))

				if (__Index == 3) break
			}
		}

		{
			Lines[$0]

			Total += $1
		}

		$1 >= 524288000 {
			GE500M++
			GE500M_Size += $1
		}

		$1 <= 10485760 {
			LE10M++
			LE10M_Size += $1
		}

		END {
			printf(" Packages: %s\n", NR)
			printf(" TTL Size: %s\n", Human(Total))
			printf("Avg. Size: %s\n", Human(Total / NR))

			Perc = GE500M / NR * 100
			Size = Human(GE500M_Size)
			printf("  >= 500M: %s (%s, %0.2f%%)\n", GE500M, Size, Perc)

			Perc = LE10M / NR * 100
			Size = Human(LE10M_Size)
			printf("   <= 10M: %s (%s, %0.2f%%)\n\n", LE10M, Size, Perc)

			print("Largest:\n")
			Len = asorti(Lines, Sorted, "@ind_num_desc")
			Top10(Sorted, Len)

			print("\nSmallest:\n")
			Len = asorti(Lines, Sorted, "@ind_num_asc")
			Top10(Sorted, Len)
		}
	' "$1"
fi
