#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/isbatlow
#------------------------------------------------------------------------------
# Project Name      - Extra/source/isbatlow
# Started On        - Sun  8 Apr 20:47:08 BST 2018
# Last Change       - Thu 13 Jan 20:25:42 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Use `/sys/class/power_supply` instead, or perhaps as an alternative.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.3-14)
#------------------------------------------------------------------------------

CurVer='2022-01-13'
Progrm=${0##*/}

Usage() {
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [CMD]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -B, --battery NAME       - Specify which battery to watch.
		  -i, --interval INT       - Set seconds of interval to INT.
		  -l, --limit INT          - Set battery limit to INT percent.

		  Where CMD is one or more commands to run upon the battery limit being
		  detected, which is by default '15' (percent remaining).
	EOF
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Domain='https://github.com'

Battery='battery_BAT0'
Interval=30
Limit=15

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"
			exit 0 ;;
		--debug|-D)
			DebugMe='true' ;;
		--interval|-I)
			if [[ -n $2 ]]; then
				Err 1 "Option '$1' requires an argument."
			elif [[ $2 =~ ^[0-9]+$ ]] || (( $2 > 0 )); then
				Err 1 'Invalid interval specified.'
			else
				Limit=$2
				shift
			fi ;;
		--limit|-L)
			shift
			if [[ $1 =~ ^[0-9]+$ ]] && (( $1 > 0 && $1 < 100 )); then
				Limit=$1
			else
				Err 1 'Invalid limit specified.'
			fi ;;
		--battery|-B)
			shift
			if ! [[ -n $1 ]]; then
				Err 1 'Missing battery specification.'
			else
				Battery=$1
			fi ;;
		-*)
			Err 1 'Incorrect argument(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

for Dep in notify-send on_ac_power upower; do
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
done

(( DepCount > 0 )) && exit 1

if ! on_ac_power; then
	while IFS=':' read -a Line; do
		if [[ ${Line[0]// } == percentage ]]; then
			if ! [[ ${Line[1]// } =~ ^[[:digit:]]+%$ ]]; then
				notify-send --urgency=critical 'Unable to get valid battery value.'
				Err 0 'Unable to get valid percentile.'
			else
				if (( ${Line[1]%\%} <= Limit )); then
					notify-send --urgency=critical 'Battery is critically low!'

					($*)
				fi
			fi

			break
		fi
	done <<< "$(upower -i /org/freedesktop/UPower/devices/$Battery)"
	read -n 1 -st $Interval
fi
