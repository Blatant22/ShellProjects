#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/local/bin/autoscrot
#------------------------------------------------------------------------------
# Project Name      - Extra/source/autoscrot
# Started On        - Sun 17 Sep 05:06:50 BST 2017
# Last Change       - Tue 16 May 20:51:54 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Take screenshots at user-specified intervals with scrot(1).
#
# Dependencies:
#
#   bash (>= 4.2)
#   coreutils (>= 8.25-2)
#   scrot (>= 0.8-17)
#------------------------------------------------------------------------------

CurVer='2023-05-16'
Progrm='autoscrot'
ProgrmFancy='AutoScrot'

Usage() {
	read -d '' <<-EOF
		Usage: $Progrm [OPTS] [SCROT_ARGS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -i, --interval INT       - Where INT is seconds of interval.

		  If no interval is provided, a default of '3' will be used.

		  The scrot arguments (via SCROT_ARGS) are optional. Due to the nature
		  of $ProgrmFancy, some arguments will make no sense to pass over to scrot
		  to process.

		  Images are saved using the default quality for JPG images.

		  Screenshots will be saved in: '~/Pictures/AutoScrot'
	EOF

	printf '%s' "$REPLY"
}

Err() {
	printf 'Err: %s\n' "$2" 1>&2
	(( $1 > 0 )) && exit $1
}

Interval=3
MainDir="$HOME/Pictures/AutoScrot"

while [[ -n $1 ]]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--interval|-I)
			if [[ -z $1 ]]; then
				Err 1 "Option '$ArgInterval' requires an argument."
			elif ! [[ $2 == +([[:digit:]]) ]] || (( $2 < 1 )); then
				Err 1 'Invalid interval selected.'
			else
				Interval=$2
				shift
			fi ;;
		-*)
			Err 1 'Incorrect argument specified.' ;;
		*)
			break ;;
	esac
	shift
done

DepCount=0
for Dep in scrot mkdir; {
	if ! type -P "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		(( DepCount++ ))
	fi
}

(( DepCount == 0 )) || exit 1

#------------------------------------------------------------------------------

printf 'Press Ctrl + C to cancel and exit %s.\n' "$ProgrmFancy"

while :; do
	read -n 1 -st $Interval

	[[ -d $MainDir ]] || mkdir -p "$MainDir"
	printf -v Filename "%s/Screenshot_%(%F_%X)T.jpg" $MainDir -1

	if scrot "$@" "$Filename"; then
		printf "\rScreenshots taken: %'d" $(( ++Num ))
	else
		Err 1 "Failed to take screenshot #$Num with scrot(1)."
	fi
done
printf '\n'
