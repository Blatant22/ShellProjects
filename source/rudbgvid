#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/rudbgvid
#------------------------------------------------------------------------------
# Project Name      - Extra/source/rudbgvid
# Started On        - Thu 12 Nov 19:52:44 GMT 2020
# Last Change       - Fri 13 Nov 03:19:29 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# [Rud]imentary [B]ack[g]round [V]ideo is a naive workaround for displaying
# videos on the root window in environments which others wouldn't allow it
# natively. So, animated wallpapers, basically.
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.28-1)
#   feh (>= 2.23.2-1build1)
#   ffmpeg (>= 7:3.4.8-0)
#   imagemagick (>= 8:6.9.7.4+dfsg-16)
#------------------------------------------------------------------------------

CurVer='2020-11-13'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --convert [STR]          - Pass STR to convert(1) for output options.
		  -d, --delay [INT]        - Delay of INT seconds between each loop.
		  -i, --interval [INT]     - Override the default frame interval.
		  -n, --nopp               - Do not post-process the frames.
		  -s, --set [FILE]         - Generate a new background animation.

		  This tool must be running at all times for playback to work. Add the
		  command 'rudbgvid' (with or without OPTs) as a startup command or
		  to one of your user initialization scripts.

		  WARNING:

		    Generating animations can take a very, very long time, depending on
		    the size and complexity of the given video file. Importantly, any
		    existing animation will be completely removed!

		    During playback, an image (frame) is set as the background very
		    rapidly, which is likely to considerably affect the performance of
		    older or slower machines. If your machine is struggling, try
		    setting a lesser interval.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

CacheDir="$HOME/.cache/rudbgvid"
Interval=01

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--set|-s)
			shift

			if [ -z "$1" ]; then
				Err 1 "No video FILE provided."
			elif ! [ -f "$1" ]; then
				Err 1 "Provided video FILE not found."
			elif ! [ -r "$1" ]; then
				Err 1 "Provided video FILE unreadable."
			fi

			DoSet=$1 ;;
		--nopp|-n)
			Untouch='True' ;;
		--interval|-i)
			shift

			if [[ $1 =~ ^[0-9]+$ ]]; then
				Speed=$1
			else
				Err 1 "Invalid animation INT provided."
			fi ;;
		--delay|-d)
			shift

			if [[ $1 =~ ^[0-9]+$ ]]; then
				Delay=$1
			else
				Err 1 "Invalid loop delay provided."
			fi ;;
		--convert)
			shift

			if [ -n "$1" ]; then
				ConvertArgs=$1
			else
				Err 1 "Missing output options to hand to convert(1)."
			fi ;;
		--frames-dir|-f)
			shift

			if ! [ -n "$1" ]; then
				Err 1 "Missing directory to store video frames."
			elif ! [ -d "$1" ]; then
				Err 1 "Location provided missing or not a directory."
			else
				CacheDir=$1
			fi ;;
		*)
			break ;;
	esac
	shift
done

if [ -z "$DoSet" ] && [ -n "$ConvertArgs" ]; then
	Err 1 "Told to post-process frames, but no video provided."
fi

DepCount=0
for Dep in convert feh ffmpeg sleep rm mkdir sort; {
	if ! type -fP "$Dep" 1> /dev/null 2>&1; then
		Err 0 "Dependency '$Dep' not met."
		$DepCount++
	fi
}

[ $DepCount -gt 0 ] && exit 1

[ -d "$CacheDir" ] || mkdir -p "$CacheDir" 1> /dev/null 2>&1

if [ -n "$DoSet" ]; then
	rm "$CacheDir"/* 1> /dev/null 2>&1

	if ffmpeg -i "$DoSet" "$CacheDir/image_%06d.jpg" 1> /dev/null 2>&1; then
		for File in "$CacheDir"/*.jpg; {
			[ -f "$File" ] || continue

			if [ -n "$ConvertArgs" ]; then
				convert "$File" $ConvertArgs "$File" 1> /dev/null 2>&1
			fi
		}

		exit 0
	else
		Err 1 'Failed to generate images from video with ffmpeg(1).'
	fi
fi

# Using this array to save redundant processing within the while loop.
Files=(`printf '%s\n' "$CacheDir"/image_*.jpg | sort $Reverse -nt '_'`)

while :; do
	# Test here, in-case frames vanish during operation.
	[ -f "$CacheDir"/image_000001.jpg ] ||
		Err 1 "No frames have been generated with $Progrm."

	for File in "${Files[@]}"; {
		# Encased in a statement to avoid overwhelming system.
		if feh --bg-fill "$File" 1> /dev/null 2>&1 || exit 1; then
			sleep 0.${Interval}s
		fi
	}

	[ -n $Delay ] && sleep ${Delay:-0}
done
