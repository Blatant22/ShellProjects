#!/usr/bin/env bash
#cito M:755 O:0 G:0 T:/usr/bin/catmedia
#------------------------------------------------------------------------------
# Project Name      - Extra/source/catmedia
# Started On        - Sun 15 Oct 13:16:02 BST 2017
# Last Change       - Sun 15 Nov 18:17:29 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Allow input files to be anywhere, not just the CWD.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   bash (>= 4.3-14)
#   coreutils (>= 8.25-2)
#   ffmpeg (>= 1.1)
#------------------------------------------------------------------------------

CurVer='2020-11-15'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		Usage: $Progrm [OPTS] [INPUT_1 INPUT_2 ...] [OUTPUT]

		  -h, --help               - Displays this help information.
		  -v, --version            - Output only the version datestamp.
		  -s, --skip-invalid       - Just skip invalid media input files.
		  -q, --quiet              - Run quietly, except for errors.

		This only works if you're IN the directory with the media parts.
	EOF
}

Err(){
	printf 'ERROR: %s\n' "$2" 1>&2
	[ $1 -gt 0 ] && exit $1
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--quiet|-q)
			BeQuiet='True' ;;
		--skip-invalid|-s)
			SkipInvalid='True' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

declare -i DepCount=0
for Dep in ffmpeg ffprobe rm mktemp dirname; {
	if ! type -fP "$Dep" &> /dev/null; then
		Err 0 "Dependency '$Dep' not met."
		DepCount++
	else
		[ "$Dep" == 'ffmpeg' ] || continue

		read -a Version <<< `ffmpeg -version`
		Buffer=${Version[2]%.*-*}
		Major=${Buffer%.*}
		Minor=${Buffer/*.}

		if ! [[ $Buffer =~ ^[0-9]+\.[0-9]+$ ]]; then
			Err 1 "Unable to determine required version of ffmpeg."
		elif ! [ "$Major" -ge 1 -a "$Minor" -ge 1 ]; then
			Err 1 "Version 1.1 or greater of ffmpeg required."
		fi
	fi
}

[ $DepCount -gt 0 ] && exit 1

TempFile=`mktemp` || Err 1 'Temporary file creation failed.'

SigHandler(){
    Sig=$?
    rm -f "$TempFile"
    exit $Sig
}

trap SigHandler INT HUP TERM ABRT QUIT

[ "$BeQuiet" == 'True' ] && exec 1> /dev/null

# Process the input files.
InFiles=()
while [ $# -gt 1 ]; do
	# Need this here to ensure it's always assumed as the CWD.
	CurFile="$PWD/$1"

	if ! [ -f "$CurFile" ]; then
		Err 1 "Input file '${CurFile##*/}' not found."
	elif ! ffprobe -v 0 "$CurFile"; then
		# The ffprobe(1) program can be used to detect the validity of a video
		# OR image file, which is perfect here, else CatMedia would quit with
		# potentially no feedback and no actionable result, confusing the user.
		if ! [ "$SkipInvalid" == 'True' ]; then
			Err 1 "Input file '${CurFile##*/}' not a valid media file."
		fi
	else
		InFiles+=("$CurFile")
	fi

	shift
done

# Check the dirname of the desired output file.
DirName=`dirname "$1"`
if [ -d "$DirName" ]; then
	Output=$1
else
	Err 1 "Directory '$DirName' not found."
fi

# Creating the temporary file list for ffmpeg.
printf "file '%s'\n" "${InFiles[@]}" > "$TempFile"

# Concatenation begins here.
while read -a Line; do
	if [[ $Line == frame=* ]]; then
		printf "\rPROGRESS: SIZE=\"${Line[5]/*=}\" TIME=\"${Line[6]/*=}\""
	else
		continue
	fi
done <<< "$(
	printf 'Concatenating media files...\n'
	ffmpeg -v 0 -f concat -safe 0 -i "$TempFile" "${Output//%20/ }"
)"

# Multi-line form to protect leaving exit status of '1'. The SigHandler() via
# `trap` should take care of this for us, but just in-case, check for it.
if [ -f "$TempFile" ]; then
	rm -f "$TempFile"
fi
