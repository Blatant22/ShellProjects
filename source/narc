#!/bin/sh
#cito M:755 O:0 G:0 T:/usr/bin/narc
#------------------------------------------------------------------------------
# Project Name      - Extra/source/narc
# Started On        - Fri 13 Mar 21:31:38 GMT 2020
# Last Change       - Sat 14 Mar 03:11:06 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# This small, semi-personalized, mainly-for-educational-purposes tool is a
# re-imagining of the original `autorecon.sh` script found at the link below.
#
#   https://github.com/bing0o/bash_scripting
#
# The name `narc` stands for: [N]ew [A]uto[r]e[c]onnect
#
# DISCLAIMER:
#
#   The software used by `narc` does not belong nor can be guaranteed as known
#   and therefore safe to the author of this software and any associated files.
#
#   Use of `narc` and any of the utilities used by, with, or for it are
#   entirely done so at the user's own discretion, absolving the author of any
#   responsibility.
#
#   With the use of `narc` and any associated files, the user understands and
#   accepts that the author of `narc`, known as 'terminalforlife', -
#   'Learn Linux', and 'LL', can and will not be held responsible for any
#   damages, in any form, as a result of the use of this file and any
#   associated files.
#
#   Each of the prior conditions, including the user's acceptance and
#   understanding, persist, regardless of any and all future changes made to
#   this file and any associated therewith, present or future, either by the
#   original author, the aforementioned 'terminalforlife', or any contributors.
#------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-03-14'
Progrm=${0##*/}

Usage(){
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		\rUsage: $Progrm [OPTS]

		\r  -h, --help               - Display this help information.
		\r  -v, --version            - Output the version datestamp.
		\r  -b, --branch B           - Use branch B instead of 'master'.
		\r  -d, --domain D           - Use domain D instead of prompting.
		\r  -g, --github G           - Use G instead of: https://github.com
		\r  -l, --links              - List links to non-standard programs.
		\r  -n, --nocolor            - Disable color support within $Progrm.
	EOF
}

URL='https://github.com'
Branch='blob/master'

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--branch|-b)
			Branch="blob/$2"

			[ -z "${Branch#*/}" ] && Err 1 "Option '$1' requires an argument."

			shift ;;
		--domain|-d)
			Domain=$2
			SkipPrompt='true'

			[ -z "$Domain" ] && Err 1 "Option '$1' requires an argument."

			shift ;;
		--github|-g)
			URL=$2

			[ -z "$URL" ] && Err 1 "Option '$1' requires an argument."

			shift ;;
		--links|-l)
			ShowLinks='true' ;;
		--nocolor|-n)
			NoColor='true' ;;
		*)
			Err 1 'Incorrect option(s) specified.' ;;
	esac
	shift
done

if [ "$NoColor" != 'true' ]; then
	End='\033[0m'
	Cyan='\033[1;36m'
	Green='\033[1;32m'
	Purple='\033[1;35m'
	Red='\033[1;31m'
fi

if [ "$ShowLinks" = 'true' ]; then
	while read -r CurLine; do
		printf '%b\n' "$CurLine"
	done <<-EOF
		Software on which \`$Progrm\` depends:

		\r  * https://github.com/s0md3v/${Red}Photon\033[0m
		\r  * https://github.com/Edu4rdSHL/${Red}findomain\033[0m
		\r  * https://github.com/bing0o/Python-Scripts/$Branch/${Red}subchecker$End.py
		\r  * https://github.com/bing0o/Python-Scripts/$Branch/${Red}webtech$End.py
		\r  * https://github.com/tomnomnom/${Red}meg$End
		\r  * https://github.com/tomnomnom/${Red}gf$End
	EOF

	exit 0
fi

ChkDep photon tmux findomain subchecker webtech

printf '[+] Enter Domain: '
[ "$SkipPrompt" = 'true' ] || read Domain
case ${Domain:-NULL} in
	*[[:space:]]*)
		Err 1 'Space(s) found in domain name.' ;;
	NULL)
		Err 1 'Domain name required.' ;;
	*)
		Photon="
			photon '-u $Domain -t 30 --wayback --dns --keys'
			printf '[+] Done!\\\n'
			read _
		" ;;
esac

Result(){ # Usage: [FILE]
	Count=0
	while read Line; do
		Count=$((Count + 1))
	done < "$1"

	printf '[+] Result: %d\n' $Count
}

#---------------------------------------------------------------------Main Code

Header(){ printf "$Cyan[*] %s ...$End\n" "${1%.}"; }

Header 'Starting Photon'
if tmux split-window -h $Photon; then
	printf '[!] Running Photon in a new tmux(1) pane.\n'
else
	Err 1 'Unsuccessful tmux(1) execution.'
fi

Header 'Starting Findomain'
if findomain -t "$Domain" -o 1> /dev/null 2>&1; then
	Result "$Domain.txt"
else
	Err 1 "Executable 'findomain' exited unsuccessfully."
fi

Header 'Starting Subchecker'
if subchecker -w "$Domain.txt" -t 30 -o "$Domain-checked" 1> /dev/null; then
	Result "$Domain-checked"
else
	Err 1 "Executable 'subchecker' exited unsuccessfully."
fi

Header 'Starting WebTech'
if webtech -w "$Domain-checked" -t 30 -o "$Domain-Tech" -i 1> /dev/null; then
	Result "$Domain-Tech"
else
	Err 1 "Executable 'webtech' exited unsuccessfully."
fi

Header 'Starting Meg'
meg -d 1000 -v /

Header 'Moving to ./out'
(
	cd out

	for Pass in\
	\
		aws-keys base64 cors debug-pages firebase fw go-functions http-auth\
		ip json-sec php-curl php-errors php-serialized php-sinks php-sources\
		s3-buckets sec servers takeovers upload-fields
	do
		Header "Displaying '$Pass' output"
		gff $Pass || Err 1 "Pass '$Pass' via 'gff' exited unsuccessfully."
	done
)

printf 'Done -- closing %s.\n' "$Progrm"
