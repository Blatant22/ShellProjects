#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/snotes (Search Notes)
# Started On        - Fri  9 Feb 00:07:19 GMT 2018
# Last Change       - Fri  9 Feb 00:40:17 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# This is a personal script I use to parse my shell notes. If you wished to use
# for your own nefarious gains, you must have a command(s) one per line. The end of
# where this file will process must have "#END", on its own, on a line. You can
# then quickly search your notes for a command you jotted down previously. This is
# a lot more useful than it sounds!
#
# Work in progress! Unfinished!
#----------------------------------------------------------------------------------

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            SNOTES - SEARCH NOTES (9th February 2018)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		SYNTAX:     snotes [OPTS] MATCH
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug|-D              - Enables the built-in bash debugging.
		            --file|-f PATH          - Specify the notes file PATH to parse.
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--file|-f)
			shift; FILE="$1" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac

	shift
done

#TODO - Clumsy. Sort out a feature which reads a small configuration file which the
#       user first sets to point to the notes file to parse.
if ! [ -f "$FILE" -a -r "$FILE" ]; then
	XERR "$LINENO" "Notes file inaccessible or not found."
fi

#TODO - This doesn't work properly. Sort it.
[ x"$*" == "x" ] && MATCH='^(|#.*)$' || MATCH="$*"

declare -i LINE_COUNT=0
while read -a LINE; do
	LINE_COUNT+=1

	if [ "${LINE[0]}" == "#END" ]; then
		break
	elif ! [[ "${LINE[0]}" =~ $MATCH ]]; then
		if [ "$LINE_NUMBERS" == "true" ]; then
			printf "%4d  %s\n" "$LINE_COUNT" "${LINE[*]}"
		else
			printf "%s\n" "${LINE[*]}"
		fi
	fi
done < "$FILE"

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
