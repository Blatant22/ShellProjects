#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/tozero
# Started On        - Sun 15 Oct 23:29:20 BST 2017
# Last Change       - Wed 28 Mar 07:16:06 BST 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2018-03-28"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            TOZERO ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Simple program to display a countdown for a target date.

		SYNTAX:     tozero [OPTS] TARGET

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --only|-o TYPE          - Where TYPE is which to only show.

		NOTE:       Behind the scenes, 'date' is used, so strings like "tomorrow", "next -
		            month", and "yesterday" can be used instead of a YYYY-MM-DD format.

		            The default TARGET is "tomorrow"; if not TARGET is given.

		            Valid TYPEs are:

		            seconds|s minutes|m hours|h days|d weeks|w

		EXAMPLE:    Display countdown until December the 11th, 2017:

		              $ tozero 2018-10-02
		              SECONDS:    3893051
		              MINUTES:    64884
		              HOURS:      1081
		              DAYS:       45
		              WEEKS:      6
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--only|-o)
			shift; TYPE="$1" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

DATE="$1"

[ -x /bin/date ] || XERR "$LINENO" "Dependency '/bin/date' not met."

[ "$DEBUGME" == "true" ] && set -x

/bin/date -d "$DATE" &> /dev/null || XERR "$LINENO" "Incorrect TARGET string."

TARGET="${DATE:-tomorrow}"

#TODO - This is a mess. Clean it up!
SECONDS=$(( $(/bin/date -d "$TARGET" +%s) - $(/bin/date +%s) ))
MINUTES=$(( ($(/bin/date -d "$TARGET" +%s) - $(/bin/date +%s)) / 60 ))
HOURS=$(( ($(/bin/date -d "$TARGET" +%s) - $(/bin/date +%s)) / 60 / 60 ))
DAYS=$(( ($(/bin/date -d "$TARGET" +%s) - $(/bin/date +%s)) / 60 / 60 / 24 ))
WEEKS=$(( ($(/bin/date -d "$TARGET" +%s) - $(/bin/date +%s)) / 60 / 60 / 24 / 7 ))

case "$TYPE" in
	seconds|s)
		echo "SECONDS:   $SECONDS" ;;
	minutes|m)
		echo "MINUTES:   $MINUTES" ;;
	hours|h)
		echo "HOURS:     $HOURS" ;;
	days|d)
		echo "DAYS:      $DAYS" ;;
	weeks|w)
		echo "WEEKS:     $WEEKS" ;;
	*)
		for I in\
			"SECONDS:   $SECONDS"\
			"MINUTES:   $MINUTES"\
			"HOURS:     $HOURS"\
			"DAYS:      $DAYS"\
			"WEEKS:     $WEEKS"
		{
			echo "$I"
		} ;;
esac

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
