#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - Extra/tozero
# Started On        - Sun 15 Oct 23:29:20 BST 2017
# Last Change       - Sun 12 May 13:21:43 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-05-12"
_PROJECT_="${0##*/}"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Simple program to display a countdown for a target date.

		SYNTAX:     $_PROJECT_ [OPTS] TARGET

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --only|-o TYPE          - Where TYPE is which to only show.
		            --int-only|-I           - Show only the integer, not its type.

		NOTE:       Behind the scenes, 'date' is used, so strings like "tomorrow", "next -
		            month", and "yesterday" can be used instead of a YYYY-MM-DD format.

		            The default TARGET is "tomorrow"; if not TARGET is given.

		            Valid TYPEs are:

		            seconds|s minutes|m hours|h days|d weeks|w

		EXAMPLE:    Display countdown until December the 11th, 2017:

		              $ $_PROJECT_ 2019-05-14
		              S: 125,324
		              M: 2,088
		              H: 34
		              D: 1
		              W: 0
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--only|-o)
			shift; TYPE="$1" ;;
		--int-only|-I)
			INTONLY="true" ;;
		-*)
			FAIL 1 "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac
	shift
done

DATE="$1"

[ -x /bin/date ] || FAIL 1 "$LINENO" "Dependency '/bin/date' not met."

[ "$DEBUGME" == "true" ] && set -x

if ! /bin/date -d "$DATE" > /dev/null 2>&1; then
	FAIL 1 "$LINENO" "Incorrect TARGET string."
fi

TARGET="${DATE:-tomorrow}"

BUF1=`/bin/date -d "$TARGET" +%s`
BUF2=`/bin/date +%s`

SECS=$((BUF1-BUF2))
MINUTES=$(((BUF1-BUF2)/60))
HOURS=$(((BUF1-BUF2)/60/60))
DAYS=$(((BUF1-BUF2)/60/60/24))
WEEKS=$(((BUF1-BUF2)/60/60/24/7))

SHOW(){
	if [ "$INTONLY" == "true" ]; then
		printf "%-'d\n" "$2"
	else
		printf "%s: %-'d\n" "$1" "$2"
	fi
}

case "$TYPE" in
	seconds|s)
		SHOW S $SECS ;;
	minutes|m)
		SHOW M $MINUTES ;;
	hours|h)
		SHOW H $HOURS ;;
	days|d)
		SHOW D $DAYS ;;
	weeks|w)
		SHOW W $WEEKS ;;
	*)
		SHOW S $SECS
		SHOW M $MINUTES
		SHOW H $HOURS
		SHOW D $DAYS
		SHOW W $WEEKS ;;
esac

# vim: ft=sh noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
