#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/mif (Movie Index Filter)
# Started On        - Fri 13 Oct 13:21:13 BST 2017
# Last Change       - Thu 18 Jan 18:52:45 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

if ! [ -x /bin/mkdir -a -x /bin/mv ]; then
	XERR "$LINENO" "Dependency '/bin/mkdir' or '/bin/mv' not met."
fi

shopt -s extglob globstar

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            MIF - Movie Index Filter (18th January 2018)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            Shell program to filter films by year and whether seen or not.

		SYNTAX:     mif [OPTS] [YEAR]
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --file|-f FILE          - Use FILE path instead of the saved path.
		            --seen|-s               - Filter by movies marked as seen.
		            --unseen|-u             - The default. Works opposite to the above.
		            --all|-a                - Display all films; disregard filters.
		            --total|-t              - Output the total number of matches.
		            --no-status|-N          - Feature currently not functional.
		            --organize|-O           - Organise files in the CWD by year. This
		                                      This has the potential to be destructive!
		            --mklist|-M[:N]         - Output a mif-usable movie list from CWD.
		                                      If :N is appended, then omit [+] and [-].

		NOTE:       The file which mif parses must be in a strict layout in order for
		            mif to work correctly. An example of such a file's contents:
		
		              # Comment lines will be ignored.
		              1972[+]: The Godfather
		              1974[+]: The Godfather - Part II
		              1974[+]: Dog Day Afternoon
		              1992[+]: Alien 3
		              1993[+]: Carlito's Way
		              1993[-]: The Fugitive
		              1994[+]: Clear and Present Danger
		              1994[+]: Jack Dee: Live at the London Palladium
		
		            Where + is unseen (new) and - is seen.

		FILE:       Default is $HOME/.mif but use --file|-f FILE to specify your own.
	EOF
}

INDEX="$HOME/.mif"
NOSTATUS="false"
SEEN="false"
TTL="false"

MAKE_LIST(){
	[ -x /bin/sed ] || XERR "$LINENO" "Dependency '/bin/sed' not met."

	for FILE in **; {
		[ -f "$FILE" ] && {
			#TODO - Find pure shell approach. Use variable buffers?
			printf "%s\n" "${FILE% (*}" | /bin/sed "s/\//${1}: /"
		}
	}
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--mklist|-M)
			shift; MAKE_LIST "[+]"; exit 0 ;;
		--mklist:N|-M:N)
			shift; MAKE_LIST ""; exit 0 ;;
		--file|-f)
			shift; INDEX="$1" ;;
		--all|-a)
			SEEN="all" ;;
		--organize|-O)
			ORGANIZE="true" ;;
		--total|-t)
			TTL="true" ;;
		--no-status|-N)
			#TODO - Finish this.
			NOSTATUS="true" ;;
		--seen|-s)
			SEEN="true" ;;
		--unseen|-u)
			SEEN="false" ;;
		*)
			break ;;
	esac

	shift
done

if ! [ "$ORGANIZE" == "true" ]; then
	if [[ "$1" =~ ^[0-9]+$ ]]; then
		YEAR="$1"
		shift
	else
		[ "$SEEN" == "all" ] || XERR "$LINENO" "Invalid year specified."
	fi
fi

[ -n "$*" ] && XERR "$LINENO" "Incorrect argument(s) specified."

[ $UID -eq 0 ] && XERR "$LINENO" "Root access not required."

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

[ "$ORGANIZE" == "true" ] && {
	[ -e /dev/null ] || XERR "$LINENO" "Unable to find: /dev/null"

	for X in *; {
		Y="${X//*\(}"

		[[ "${Y%\)*}" =~ ^[0-9]+$ ]] || continue

		if /bin/mkdir "${Y%\)*}"; then
			printf "%s\n" "MAKE: ${Y%\)*}"
		else
			printf "%s\n" "FAIL: ${Y%\)*}"
		fi

		if /bin/mv "$X" ${Y%\)*}/; then
			printf "%s\n" "MOVE: ${Y%\)*}/${X//*\/}"
		else
			printf "%s\n" "FAIL: ${Y%\)*}/${X//*\/}"
		fi
	} # 2> /dev/null

	exit 0
}

[ -f "$INDEX" ] || XERR "$LINENO" "Movie index file not found."

declare -i LINE=0
while read -r; do
	{ [[ "$REPLY" == +(#)* ]] || [ -z "$REPLY" ]; } && continue

	if [ "$NOSTATUS" == "false" ]; then
		if [ "$SEEN" == "false"  ]; then
			if [[ "$REPLY" == $YEAR\[\+\]:\ * ]]; then
				printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
				LINE+=1
			fi
		elif [ "$SEEN" == "true"  ]; then
			if [[ "$REPLY" == $YEAR\[\-\]:\ * ]]; then
				printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
				LINE+=1
			fi
		elif [ "$SEEN" == "all"  ]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	else
		if [[ "$REPLY" == $YEAR:\ * ]]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	fi
done < "$INDEX"

[ $LINE -eq 0 ] && XERR "$LINENO" "Unable to find year $YEAR."
[ "$TTL" == "true" ] && printf "\nTotal: %d\n" "$LINE"

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
