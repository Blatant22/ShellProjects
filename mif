#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/mif (Movie Index Filter)
# Started On        - Fri 13 Oct 13:21:13 BST 2017
# Last Change       - Sun 25 Mar 11:29:36 BST 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2018-03-25"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            MIF - Movie Index Filter ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Shell program to filter films by year and whether seen or not.

		SYNTAX:     mif [OPTS] [YEAR]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --file|-f FILE          - Use FILE path instead of the saved path.
		            --seen|-s               - Filter by movies marked as seen.
		            --unseen|-u             - The default. Works opposite to the above.
		            --all|-a                - Display all films; disregard filters.
		            --total|-t              - Output the total number of matches.
		            --mark M                - Where M is - or + for whether seen or not.
		            --organize|-O           - Organise files in the CWD by year. This
		                                      This has the potential to be destructive!
		            --mklist|-M[:N]         - Output a mif-usable movie list from CWD.
		                                      If :N is appended, then omit [+] and [-].

		NOTE:       The file which mif parses must be in a strict layout in order for
		            mif to work correctly. An example of such a file's contents:

		              # Comment lines will be ignored.
		              1972[+]: The Godfather
		              1974[+]: The Godfather - Part II
		              1974[+]: Dog Day Afternoon
		              1992[+]: Alien 3
		              1993[+]: Carlito's Way
		              1993[-]: The Fugitive
		              1994[+]: Clear and Present Danger
		              1994[+]: Jack Dee: Live at the London Palladium

		            Where + is unseen (new) and - is seen.

		FILE:       Default is $HOME/.mif but use --file|-f FILE to specify your own.
	EOF
}

if [ "${BASH_VERSINFO[0]}" -ge 4 ]; then
	shopt -s extglob globstar
else
	XERR "$LINENO" "Bash version 4.0 or greater is required."
fi

INDEX="$HOME/.mif"
SEEN="false"
TTL="false"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--mklist|-M)
			shift; MAKE_LIST_OPT=":[+]" ;;
		--mklist:N|-M:N)
			shift; MAKE_LIST_OPT=":" ;;
		--file|-f)
			shift; INDEX="$1" ;;
		--all|-a)
			SEEN="all" ;;
		--mark)
			shift; MARK="$1" ;;
		--organize|-O)
			ORGANIZE="true" ;;
		--total|-t)
			TTL="true" ;;
		--seen|-s)
			SEEN="true" ;;
		--unseen|-u)
			SEEN="false" ;;
		*)
			break ;;
	esac
	shift
done

if [[ "$MAKE_LIST_OPT" =~ (:|:\[+\]) ]]; then
	for FILE in **; {
		[ -f "$FILE" ] || continue
		IFS="/" read -a X <<< "${FILE% (*}"
		printf "%s%s: %s\n" "${X[0]}" "${MAKE_LIST_OPT#:}" "${X[1]}"
	}

	exit 0
fi

if ! [ "$ORGANIZE" == "true" ]; then
	if [[ "$1" =~ ^[0-9]+$ ]]; then
		YEAR="$1"; shift
	else
		[ "$SEEN" == "all" ] || XERR "$LINENO" "Invalid year specified."
	fi
fi

[ "$*" ] && XERR "$LINENO" "Incorrect argument(s) specified."

if ! [ -x /bin/mkdir -a -x /bin/mv ]; then
	XERR "$LINENO" "Dependency '/bin/mkdir' or '/bin/mv' not met."
fi

[ "$DEBUGME" == "true" ] && set -x

if [ "$ORGANIZE" == "true" ]; then
	for X in *; {
		Y="${X//*\(}"

		[[ "${Y%\)*}" =~ ^[0-9]+$ ]] || continue

		if /bin/mkdir "${Y%\)*}"; then
			printf "%s\n" "MAKE: ${Y%\)*}"
		else
			printf "%s\n" "FAIL: ${Y%\)*}"
		fi

		if /bin/mv "$X" ${Y%\)*}/; then
			printf "%s\n" "MOVE: ${Y%\)*}/${X//*\/}"
		else
			printf "%s\n" "FAIL: ${Y%\)*}/${X//*\/}"
		fi
	}

	exit 0
fi

[ -f "$INDEX" ] || XERR "$LINENO" "Index file '$INDEX' not found."

declare -i LINE=0
while read -r; do
	{ [[ "$REPLY" == +(#)* ]] || [ -z "$REPLY" ]; } && continue
	if [ "$SEEN" == "false"  ]; then
		if [[ "$REPLY" == $YEAR\[\+\]:\ * ]]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	elif [ "$SEEN" == "true"  ]; then
		if [[ "$REPLY" == $YEAR\[\-\]:\ * ]]; then
			printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
			LINE+=1
		fi
	elif [ "$SEEN" == "all"  ]; then
		printf "%s\n" "${REPLY/+([0-9])\[?\]: }"
		LINE+=1
	fi
done < "$INDEX"

[ $LINE -eq 0 ] && XERR "$LINENO" "Unable to find year $YEAR."
[ "$TTL" == "true" ] && printf "\nTotal: %d\n" "$LINE"

# vim: ft=sh noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
